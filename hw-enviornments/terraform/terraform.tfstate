{
  "version": 4,
  "terraform_version": "0.13.6",
  "serial": 417,
  "lineage": "3c67b675-6c4a-2b1b-b955-c5291f3c50e8",
  "outputs": {
    "vpc": {
      "value": {
        "azs": [
          "us-east-1a",
          "us-east-1b"
        ],
        "cgw_arns": [],
        "cgw_ids": [],
        "database_internet_gateway_route_id": "",
        "database_ipv6_egress_route_id": "",
        "database_nat_gateway_route_ids": [],
        "database_network_acl_arn": "",
        "database_network_acl_id": "",
        "database_route_table_association_ids": [
          "rtbassoc-03d9641ca80e9db23",
          "rtbassoc-003bcf9c9ec2caf84"
        ],
        "database_route_table_ids": [
          "rtb-08f8f462f0c86ae5d"
        ],
        "database_subnet_arns": [
          "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-0dd10ed31ace64f6f",
          "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-04c803c864a61da86"
        ],
        "database_subnet_group": "hello_world_demo",
        "database_subnet_group_name": "hello_world_demo",
        "database_subnets": [
          "subnet-0dd10ed31ace64f6f",
          "subnet-04c803c864a61da86"
        ],
        "database_subnets_cidr_blocks": [
          "10.11.30.0/24",
          "10.11.31.0/24"
        ],
        "database_subnets_ipv6_cidr_blocks": [
          "",
          ""
        ],
        "default_network_acl_id": "acl-00979c1dffcff55b2",
        "default_route_table_id": "rtb-0af60081bc56ec7fe",
        "default_security_group_id": "sg-0bc8b858e5bdc139e",
        "default_vpc_arn": "",
        "default_vpc_cidr_block": "",
        "default_vpc_default_network_acl_id": "",
        "default_vpc_default_route_table_id": "",
        "default_vpc_default_security_group_id": "",
        "default_vpc_enable_dns_hostnames": "",
        "default_vpc_enable_dns_support": "",
        "default_vpc_id": "",
        "default_vpc_instance_tenancy": "",
        "default_vpc_main_route_table_id": "",
        "egress_only_internet_gateway_id": "",
        "elasticache_network_acl_arn": "",
        "elasticache_network_acl_id": "",
        "elasticache_route_table_association_ids": [],
        "elasticache_route_table_ids": [
          "rtb-08f8f462f0c86ae5d"
        ],
        "elasticache_subnet_arns": [],
        "elasticache_subnet_group": "",
        "elasticache_subnet_group_name": "",
        "elasticache_subnets": [],
        "elasticache_subnets_cidr_blocks": [],
        "elasticache_subnets_ipv6_cidr_blocks": [],
        "igw_arn": "arn:aws:ec2:us-east-1:599908802495:internet-gateway/igw-0c1ad164a73c06da3",
        "igw_id": "igw-0c1ad164a73c06da3",
        "intra_network_acl_arn": "",
        "intra_network_acl_id": "",
        "intra_route_table_association_ids": [],
        "intra_route_table_ids": [],
        "intra_subnet_arns": [],
        "intra_subnets": [],
        "intra_subnets_cidr_blocks": [],
        "intra_subnets_ipv6_cidr_blocks": [],
        "name": "hello_world_demo",
        "nat_ids": [
          "eipalloc-01694bdc8460dafec"
        ],
        "nat_public_ips": [
          "54.174.179.170"
        ],
        "natgw_ids": [
          "nat-052f1db47a534618e"
        ],
        "private_ipv6_egress_route_ids": [],
        "private_nat_gateway_route_ids": [
          "r-rtb-08f8f462f0c86ae5d1080289494"
        ],
        "private_network_acl_arn": "",
        "private_network_acl_id": "",
        "private_route_table_association_ids": [
          "rtbassoc-0c53a26c7bbbf174e",
          "rtbassoc-0a139ca583591dac0"
        ],
        "private_route_table_ids": [
          "rtb-08f8f462f0c86ae5d"
        ],
        "private_subnet_arns": [
          "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-096ff4de659530b74",
          "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-05fe4f98639ff4274"
        ],
        "private_subnets": [
          "subnet-096ff4de659530b74",
          "subnet-05fe4f98639ff4274"
        ],
        "private_subnets_cidr_blocks": [
          "10.11.10.0/24",
          "10.11.11.0/24"
        ],
        "private_subnets_ipv6_cidr_blocks": [
          "",
          ""
        ],
        "public_internet_gateway_ipv6_route_id": "",
        "public_internet_gateway_route_id": "r-rtb-045c9b4550d05f71d1080289494",
        "public_network_acl_arn": "",
        "public_network_acl_id": "",
        "public_route_table_association_ids": [
          "rtbassoc-00953f8d1193852ff",
          "rtbassoc-06a811eedb97e3646"
        ],
        "public_route_table_ids": [
          "rtb-045c9b4550d05f71d"
        ],
        "public_subnet_arns": [
          "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-04bf16d6fc39bea58",
          "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-09b63ddc9dd314aa6"
        ],
        "public_subnets": [
          "subnet-04bf16d6fc39bea58",
          "subnet-09b63ddc9dd314aa6"
        ],
        "public_subnets_cidr_blocks": [
          "10.11.20.0/24",
          "10.11.21.0/24"
        ],
        "public_subnets_ipv6_cidr_blocks": [
          "",
          ""
        ],
        "redshift_network_acl_arn": "",
        "redshift_network_acl_id": "",
        "redshift_public_route_table_association_ids": [],
        "redshift_route_table_association_ids": [],
        "redshift_route_table_ids": [
          "rtb-08f8f462f0c86ae5d"
        ],
        "redshift_subnet_arns": [],
        "redshift_subnet_group": "",
        "redshift_subnets": [],
        "redshift_subnets_cidr_blocks": [],
        "redshift_subnets_ipv6_cidr_blocks": [],
        "this_customer_gateway": {},
        "vgw_arn": "",
        "vgw_id": "",
        "vpc_arn": "arn:aws:ec2:us-east-1:599908802495:vpc/vpc-0a99b62d225d4f4c8",
        "vpc_cidr_block": "10.11.0.0/16",
        "vpc_enable_dns_hostnames": true,
        "vpc_enable_dns_support": true,
        "vpc_endpoint_access_analyzer_dns_entry": [],
        "vpc_endpoint_access_analyzer_id": "",
        "vpc_endpoint_access_analyzer_network_interface_ids": [],
        "vpc_endpoint_acm_pca_dns_entry": [],
        "vpc_endpoint_acm_pca_id": "",
        "vpc_endpoint_acm_pca_network_interface_ids": [],
        "vpc_endpoint_apigw_dns_entry": [],
        "vpc_endpoint_apigw_id": "",
        "vpc_endpoint_apigw_network_interface_ids": [],
        "vpc_endpoint_appmesh_envoy_management_dns_entry": [],
        "vpc_endpoint_appmesh_envoy_management_id": "",
        "vpc_endpoint_appmesh_envoy_management_network_interface_ids": [],
        "vpc_endpoint_appstream_api_dns_entry": [],
        "vpc_endpoint_appstream_api_id": "",
        "vpc_endpoint_appstream_api_network_interface_ids": [],
        "vpc_endpoint_appstream_streaming_dns_entry": [],
        "vpc_endpoint_appstream_streaming_id": "",
        "vpc_endpoint_appstream_streaming_network_interface_ids": [],
        "vpc_endpoint_athena_dns_entry": [],
        "vpc_endpoint_athena_id": "",
        "vpc_endpoint_athena_network_interface_ids": [],
        "vpc_endpoint_auto_scaling_plans_dns_entry": [],
        "vpc_endpoint_auto_scaling_plans_id": "",
        "vpc_endpoint_auto_scaling_plans_network_interface_ids": [],
        "vpc_endpoint_cloud_directory_dns_entry": [],
        "vpc_endpoint_cloud_directory_id": "",
        "vpc_endpoint_cloud_directory_network_interface_ids": [],
        "vpc_endpoint_cloudformation_dns_entry": [],
        "vpc_endpoint_cloudformation_id": "",
        "vpc_endpoint_cloudformation_network_interface_ids": [],
        "vpc_endpoint_cloudtrail_dns_entry": [],
        "vpc_endpoint_cloudtrail_id": "",
        "vpc_endpoint_cloudtrail_network_interface_ids": [],
        "vpc_endpoint_codeartifact_api_dns_entry": [],
        "vpc_endpoint_codeartifact_api_id": "",
        "vpc_endpoint_codeartifact_api_network_interface_ids": [],
        "vpc_endpoint_codeartifact_repositories_dns_entry": [],
        "vpc_endpoint_codeartifact_repositories_id": "",
        "vpc_endpoint_codeartifact_repositories_network_interface_ids": [],
        "vpc_endpoint_codebuild_dns_entry": [],
        "vpc_endpoint_codebuild_id": "",
        "vpc_endpoint_codebuild_network_interface_ids": [],
        "vpc_endpoint_codecommit_dns_entry": [],
        "vpc_endpoint_codecommit_id": "",
        "vpc_endpoint_codecommit_network_interface_ids": [],
        "vpc_endpoint_codepipeline_dns_entry": [],
        "vpc_endpoint_codepipeline_id": "",
        "vpc_endpoint_codepipeline_network_interface_ids": [],
        "vpc_endpoint_config_dns_entry": [],
        "vpc_endpoint_config_id": "",
        "vpc_endpoint_config_network_interface_ids": [],
        "vpc_endpoint_datasync_dns_entry": [],
        "vpc_endpoint_datasync_id": "",
        "vpc_endpoint_datasync_network_interface_ids": [],
        "vpc_endpoint_dms_dns_entry": [],
        "vpc_endpoint_dms_id": "",
        "vpc_endpoint_dms_network_interface_ids": [],
        "vpc_endpoint_dynamodb_id": "",
        "vpc_endpoint_dynamodb_pl_id": "",
        "vpc_endpoint_ebs_dns_entry": [],
        "vpc_endpoint_ebs_id": "",
        "vpc_endpoint_ebs_network_interface_ids": [],
        "vpc_endpoint_ec2_autoscaling_dns_entry": [],
        "vpc_endpoint_ec2_autoscaling_id": "",
        "vpc_endpoint_ec2_autoscaling_network_interface_ids": [],
        "vpc_endpoint_ec2_dns_entry": [],
        "vpc_endpoint_ec2_id": "",
        "vpc_endpoint_ec2_network_interface_ids": [],
        "vpc_endpoint_ec2messages_dns_entry": [],
        "vpc_endpoint_ec2messages_id": "",
        "vpc_endpoint_ec2messages_network_interface_ids": [],
        "vpc_endpoint_ecr_api_dns_entry": [],
        "vpc_endpoint_ecr_api_id": "",
        "vpc_endpoint_ecr_api_network_interface_ids": [],
        "vpc_endpoint_ecr_dkr_dns_entry": [],
        "vpc_endpoint_ecr_dkr_id": "",
        "vpc_endpoint_ecr_dkr_network_interface_ids": [],
        "vpc_endpoint_ecs_agent_dns_entry": [],
        "vpc_endpoint_ecs_agent_id": "",
        "vpc_endpoint_ecs_agent_network_interface_ids": [],
        "vpc_endpoint_ecs_dns_entry": [],
        "vpc_endpoint_ecs_id": "",
        "vpc_endpoint_ecs_network_interface_ids": [],
        "vpc_endpoint_ecs_telemetry_dns_entry": [],
        "vpc_endpoint_ecs_telemetry_id": "",
        "vpc_endpoint_ecs_telemetry_network_interface_ids": [],
        "vpc_endpoint_efs_dns_entry": [],
        "vpc_endpoint_efs_id": "",
        "vpc_endpoint_efs_network_interface_ids": [],
        "vpc_endpoint_elastic_inference_runtime_dns_entry": [],
        "vpc_endpoint_elastic_inference_runtime_id": "",
        "vpc_endpoint_elastic_inference_runtime_network_interface_ids": [],
        "vpc_endpoint_elasticbeanstalk_dns_entry": [],
        "vpc_endpoint_elasticbeanstalk_health_dns_entry": [],
        "vpc_endpoint_elasticbeanstalk_health_id": "",
        "vpc_endpoint_elasticbeanstalk_health_network_interface_ids": [],
        "vpc_endpoint_elasticbeanstalk_id": "",
        "vpc_endpoint_elasticbeanstalk_network_interface_ids": [],
        "vpc_endpoint_elasticloadbalancing_dns_entry": [],
        "vpc_endpoint_elasticloadbalancing_id": "",
        "vpc_endpoint_elasticloadbalancing_network_interface_ids": [],
        "vpc_endpoint_elasticmapreduce_dns_entry": [],
        "vpc_endpoint_elasticmapreduce_id": "",
        "vpc_endpoint_elasticmapreduce_network_interface_ids": [],
        "vpc_endpoint_events_dns_entry": [],
        "vpc_endpoint_events_id": "",
        "vpc_endpoint_events_network_interface_ids": [],
        "vpc_endpoint_git_codecommit_dns_entry": [],
        "vpc_endpoint_git_codecommit_id": "",
        "vpc_endpoint_git_codecommit_network_interface_ids": [],
        "vpc_endpoint_glue_dns_entry": [],
        "vpc_endpoint_glue_id": "",
        "vpc_endpoint_glue_network_interface_ids": [],
        "vpc_endpoint_kinesis_firehose_dns_entry": [],
        "vpc_endpoint_kinesis_firehose_id": "",
        "vpc_endpoint_kinesis_firehose_network_interface_ids": [],
        "vpc_endpoint_kinesis_streams_dns_entry": [],
        "vpc_endpoint_kinesis_streams_id": "",
        "vpc_endpoint_kinesis_streams_network_interface_ids": [],
        "vpc_endpoint_kms_dns_entry": [],
        "vpc_endpoint_kms_id": "",
        "vpc_endpoint_kms_network_interface_ids": [],
        "vpc_endpoint_lambda_dns_entry": [],
        "vpc_endpoint_lambda_id": "",
        "vpc_endpoint_lambda_network_interface_ids": [],
        "vpc_endpoint_logs_dns_entry": [],
        "vpc_endpoint_logs_id": "",
        "vpc_endpoint_logs_network_interface_ids": [],
        "vpc_endpoint_monitoring_dns_entry": [],
        "vpc_endpoint_monitoring_id": "",
        "vpc_endpoint_monitoring_network_interface_ids": [],
        "vpc_endpoint_qldb_session_dns_entry": [],
        "vpc_endpoint_qldb_session_id": "",
        "vpc_endpoint_qldb_session_network_interface_ids": [],
        "vpc_endpoint_rds_dns_entry": [],
        "vpc_endpoint_rds_id": "",
        "vpc_endpoint_rds_network_interface_ids": [],
        "vpc_endpoint_rekognition_dns_entry": [],
        "vpc_endpoint_rekognition_id": "",
        "vpc_endpoint_rekognition_network_interface_ids": [],
        "vpc_endpoint_s3_id": "",
        "vpc_endpoint_s3_pl_id": "",
        "vpc_endpoint_sagemaker_api_dns_entry": [],
        "vpc_endpoint_sagemaker_api_id": "",
        "vpc_endpoint_sagemaker_api_network_interface_ids": [],
        "vpc_endpoint_sagemaker_runtime_dns_entry": [],
        "vpc_endpoint_sagemaker_runtime_id": "",
        "vpc_endpoint_sagemaker_runtime_network_interface_ids": [],
        "vpc_endpoint_secretsmanager_dns_entry": [],
        "vpc_endpoint_secretsmanager_id": "",
        "vpc_endpoint_secretsmanager_network_interface_ids": [],
        "vpc_endpoint_servicecatalog_dns_entry": [],
        "vpc_endpoint_servicecatalog_id": "",
        "vpc_endpoint_servicecatalog_network_interface_ids": [],
        "vpc_endpoint_ses_dns_entry": [],
        "vpc_endpoint_ses_id": "",
        "vpc_endpoint_ses_network_interface_ids": [],
        "vpc_endpoint_sms_dns_entry": [],
        "vpc_endpoint_sms_id": "",
        "vpc_endpoint_sms_network_interface_ids": [],
        "vpc_endpoint_sns_dns_entry": [],
        "vpc_endpoint_sns_id": "",
        "vpc_endpoint_sns_network_interface_ids": [],
        "vpc_endpoint_sqs_dns_entry": [],
        "vpc_endpoint_sqs_id": "",
        "vpc_endpoint_sqs_network_interface_ids": [],
        "vpc_endpoint_ssm_dns_entry": [],
        "vpc_endpoint_ssm_id": "",
        "vpc_endpoint_ssm_network_interface_ids": [],
        "vpc_endpoint_ssmmessages_dns_entry": [],
        "vpc_endpoint_ssmmessages_id": "",
        "vpc_endpoint_ssmmessages_network_interface_ids": [],
        "vpc_endpoint_states_dns_entry": [],
        "vpc_endpoint_states_id": "",
        "vpc_endpoint_states_network_interface_ids": [],
        "vpc_endpoint_storagegateway_dns_entry": [],
        "vpc_endpoint_storagegateway_id": "",
        "vpc_endpoint_storagegateway_network_interface_ids": [],
        "vpc_endpoint_sts_dns_entry": [],
        "vpc_endpoint_sts_id": "",
        "vpc_endpoint_sts_network_interface_ids": [],
        "vpc_endpoint_textract_dns_entry": [],
        "vpc_endpoint_textract_id": "",
        "vpc_endpoint_textract_network_interface_ids": [],
        "vpc_endpoint_transfer_dns_entry": [],
        "vpc_endpoint_transfer_id": "",
        "vpc_endpoint_transfer_network_interface_ids": [],
        "vpc_endpoint_transferserver_dns_entry": [],
        "vpc_endpoint_transferserver_id": "",
        "vpc_endpoint_transferserver_network_interface_ids": [],
        "vpc_endpoint_workspaces_dns_entry": [],
        "vpc_endpoint_workspaces_id": "",
        "vpc_endpoint_workspaces_network_interface_ids": [],
        "vpc_flow_log_cloudwatch_iam_role_arn": "",
        "vpc_flow_log_destination_arn": "",
        "vpc_flow_log_destination_type": "cloud-watch-logs",
        "vpc_flow_log_id": "",
        "vpc_id": "vpc-0a99b62d225d4f4c8",
        "vpc_instance_tenancy": "default",
        "vpc_ipv6_association_id": "",
        "vpc_ipv6_cidr_block": "",
        "vpc_main_route_table_id": "rtb-0af60081bc56ec7fe",
        "vpc_owner_id": "599908802495",
        "vpc_secondary_cidr_blocks": []
      },
      "type": [
        "object",
        {
          "azs": [
            "list",
            "string"
          ],
          "cgw_arns": [
            "tuple",
            []
          ],
          "cgw_ids": [
            "tuple",
            []
          ],
          "database_internet_gateway_route_id": "string",
          "database_ipv6_egress_route_id": "string",
          "database_nat_gateway_route_ids": [
            "tuple",
            []
          ],
          "database_network_acl_arn": "string",
          "database_network_acl_id": "string",
          "database_route_table_association_ids": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "database_route_table_ids": [
            "list",
            "string"
          ],
          "database_subnet_arns": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "database_subnet_group": "string",
          "database_subnet_group_name": "string",
          "database_subnets": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "database_subnets_cidr_blocks": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "database_subnets_ipv6_cidr_blocks": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "default_network_acl_id": "string",
          "default_route_table_id": "string",
          "default_security_group_id": "string",
          "default_vpc_arn": "string",
          "default_vpc_cidr_block": "string",
          "default_vpc_default_network_acl_id": "string",
          "default_vpc_default_route_table_id": "string",
          "default_vpc_default_security_group_id": "string",
          "default_vpc_enable_dns_hostnames": "string",
          "default_vpc_enable_dns_support": "string",
          "default_vpc_id": "string",
          "default_vpc_instance_tenancy": "string",
          "default_vpc_main_route_table_id": "string",
          "egress_only_internet_gateway_id": "string",
          "elasticache_network_acl_arn": "string",
          "elasticache_network_acl_id": "string",
          "elasticache_route_table_association_ids": [
            "tuple",
            []
          ],
          "elasticache_route_table_ids": [
            "list",
            "string"
          ],
          "elasticache_subnet_arns": [
            "tuple",
            []
          ],
          "elasticache_subnet_group": "string",
          "elasticache_subnet_group_name": "string",
          "elasticache_subnets": [
            "tuple",
            []
          ],
          "elasticache_subnets_cidr_blocks": [
            "tuple",
            []
          ],
          "elasticache_subnets_ipv6_cidr_blocks": [
            "tuple",
            []
          ],
          "igw_arn": "string",
          "igw_id": "string",
          "intra_network_acl_arn": "string",
          "intra_network_acl_id": "string",
          "intra_route_table_association_ids": [
            "tuple",
            []
          ],
          "intra_route_table_ids": [
            "tuple",
            []
          ],
          "intra_subnet_arns": [
            "tuple",
            []
          ],
          "intra_subnets": [
            "tuple",
            []
          ],
          "intra_subnets_cidr_blocks": [
            "tuple",
            []
          ],
          "intra_subnets_ipv6_cidr_blocks": [
            "tuple",
            []
          ],
          "name": "string",
          "nat_ids": [
            "tuple",
            [
              "string"
            ]
          ],
          "nat_public_ips": [
            "list",
            "string"
          ],
          "natgw_ids": [
            "tuple",
            [
              "string"
            ]
          ],
          "private_ipv6_egress_route_ids": [
            "tuple",
            []
          ],
          "private_nat_gateway_route_ids": [
            "tuple",
            [
              "string"
            ]
          ],
          "private_network_acl_arn": "string",
          "private_network_acl_id": "string",
          "private_route_table_association_ids": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "private_route_table_ids": [
            "tuple",
            [
              "string"
            ]
          ],
          "private_subnet_arns": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "private_subnets": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "private_subnets_cidr_blocks": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "private_subnets_ipv6_cidr_blocks": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "public_internet_gateway_ipv6_route_id": "string",
          "public_internet_gateway_route_id": "string",
          "public_network_acl_arn": "string",
          "public_network_acl_id": "string",
          "public_route_table_association_ids": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "public_route_table_ids": [
            "tuple",
            [
              "string"
            ]
          ],
          "public_subnet_arns": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "public_subnets": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "public_subnets_cidr_blocks": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "public_subnets_ipv6_cidr_blocks": [
            "tuple",
            [
              "string",
              "string"
            ]
          ],
          "redshift_network_acl_arn": "string",
          "redshift_network_acl_id": "string",
          "redshift_public_route_table_association_ids": [
            "tuple",
            []
          ],
          "redshift_route_table_association_ids": [
            "tuple",
            []
          ],
          "redshift_route_table_ids": [
            "list",
            "string"
          ],
          "redshift_subnet_arns": [
            "tuple",
            []
          ],
          "redshift_subnet_group": "string",
          "redshift_subnets": [
            "tuple",
            []
          ],
          "redshift_subnets_cidr_blocks": [
            "tuple",
            []
          ],
          "redshift_subnets_ipv6_cidr_blocks": [
            "tuple",
            []
          ],
          "this_customer_gateway": [
            "object",
            {}
          ],
          "vgw_arn": "string",
          "vgw_id": "string",
          "vpc_arn": "string",
          "vpc_cidr_block": "string",
          "vpc_enable_dns_hostnames": "bool",
          "vpc_enable_dns_support": "bool",
          "vpc_endpoint_access_analyzer_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_access_analyzer_id": "string",
          "vpc_endpoint_access_analyzer_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_acm_pca_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_acm_pca_id": "string",
          "vpc_endpoint_acm_pca_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_apigw_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_apigw_id": "string",
          "vpc_endpoint_apigw_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_appmesh_envoy_management_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_appmesh_envoy_management_id": "string",
          "vpc_endpoint_appmesh_envoy_management_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_appstream_api_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_appstream_api_id": "string",
          "vpc_endpoint_appstream_api_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_appstream_streaming_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_appstream_streaming_id": "string",
          "vpc_endpoint_appstream_streaming_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_athena_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_athena_id": "string",
          "vpc_endpoint_athena_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_auto_scaling_plans_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_auto_scaling_plans_id": "string",
          "vpc_endpoint_auto_scaling_plans_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_cloud_directory_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_cloud_directory_id": "string",
          "vpc_endpoint_cloud_directory_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_cloudformation_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_cloudformation_id": "string",
          "vpc_endpoint_cloudformation_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_cloudtrail_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_cloudtrail_id": "string",
          "vpc_endpoint_cloudtrail_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_codeartifact_api_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_codeartifact_api_id": "string",
          "vpc_endpoint_codeartifact_api_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_codeartifact_repositories_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_codeartifact_repositories_id": "string",
          "vpc_endpoint_codeartifact_repositories_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_codebuild_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_codebuild_id": "string",
          "vpc_endpoint_codebuild_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_codecommit_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_codecommit_id": "string",
          "vpc_endpoint_codecommit_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_codepipeline_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_codepipeline_id": "string",
          "vpc_endpoint_codepipeline_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_config_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_config_id": "string",
          "vpc_endpoint_config_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_datasync_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_datasync_id": "string",
          "vpc_endpoint_datasync_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_dms_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_dms_id": "string",
          "vpc_endpoint_dms_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_dynamodb_id": "string",
          "vpc_endpoint_dynamodb_pl_id": "string",
          "vpc_endpoint_ebs_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ebs_id": "string",
          "vpc_endpoint_ebs_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ec2_autoscaling_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ec2_autoscaling_id": "string",
          "vpc_endpoint_ec2_autoscaling_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ec2_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ec2_id": "string",
          "vpc_endpoint_ec2_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ec2messages_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ec2messages_id": "string",
          "vpc_endpoint_ec2messages_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecr_api_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecr_api_id": "string",
          "vpc_endpoint_ecr_api_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecr_dkr_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecr_dkr_id": "string",
          "vpc_endpoint_ecr_dkr_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecs_agent_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecs_agent_id": "string",
          "vpc_endpoint_ecs_agent_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecs_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecs_id": "string",
          "vpc_endpoint_ecs_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecs_telemetry_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ecs_telemetry_id": "string",
          "vpc_endpoint_ecs_telemetry_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_efs_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_efs_id": "string",
          "vpc_endpoint_efs_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_elastic_inference_runtime_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_elastic_inference_runtime_id": "string",
          "vpc_endpoint_elastic_inference_runtime_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_elasticbeanstalk_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_elasticbeanstalk_health_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_elasticbeanstalk_health_id": "string",
          "vpc_endpoint_elasticbeanstalk_health_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_elasticbeanstalk_id": "string",
          "vpc_endpoint_elasticbeanstalk_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_elasticloadbalancing_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_elasticloadbalancing_id": "string",
          "vpc_endpoint_elasticloadbalancing_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_elasticmapreduce_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_elasticmapreduce_id": "string",
          "vpc_endpoint_elasticmapreduce_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_events_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_events_id": "string",
          "vpc_endpoint_events_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_git_codecommit_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_git_codecommit_id": "string",
          "vpc_endpoint_git_codecommit_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_glue_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_glue_id": "string",
          "vpc_endpoint_glue_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_kinesis_firehose_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_kinesis_firehose_id": "string",
          "vpc_endpoint_kinesis_firehose_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_kinesis_streams_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_kinesis_streams_id": "string",
          "vpc_endpoint_kinesis_streams_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_kms_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_kms_id": "string",
          "vpc_endpoint_kms_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_lambda_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_lambda_id": "string",
          "vpc_endpoint_lambda_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_logs_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_logs_id": "string",
          "vpc_endpoint_logs_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_monitoring_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_monitoring_id": "string",
          "vpc_endpoint_monitoring_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_qldb_session_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_qldb_session_id": "string",
          "vpc_endpoint_qldb_session_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_rds_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_rds_id": "string",
          "vpc_endpoint_rds_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_rekognition_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_rekognition_id": "string",
          "vpc_endpoint_rekognition_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_s3_id": "string",
          "vpc_endpoint_s3_pl_id": "string",
          "vpc_endpoint_sagemaker_api_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_sagemaker_api_id": "string",
          "vpc_endpoint_sagemaker_api_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_sagemaker_runtime_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_sagemaker_runtime_id": "string",
          "vpc_endpoint_sagemaker_runtime_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_secretsmanager_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_secretsmanager_id": "string",
          "vpc_endpoint_secretsmanager_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_servicecatalog_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_servicecatalog_id": "string",
          "vpc_endpoint_servicecatalog_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ses_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ses_id": "string",
          "vpc_endpoint_ses_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_sms_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_sms_id": "string",
          "vpc_endpoint_sms_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_sns_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_sns_id": "string",
          "vpc_endpoint_sns_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_sqs_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_sqs_id": "string",
          "vpc_endpoint_sqs_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ssm_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ssm_id": "string",
          "vpc_endpoint_ssm_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_ssmmessages_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_ssmmessages_id": "string",
          "vpc_endpoint_ssmmessages_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_states_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_states_id": "string",
          "vpc_endpoint_states_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_storagegateway_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_storagegateway_id": "string",
          "vpc_endpoint_storagegateway_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_sts_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_sts_id": "string",
          "vpc_endpoint_sts_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_textract_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_textract_id": "string",
          "vpc_endpoint_textract_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_transfer_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_transfer_id": "string",
          "vpc_endpoint_transfer_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_transferserver_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_transferserver_id": "string",
          "vpc_endpoint_transferserver_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_endpoint_workspaces_dns_entry": [
            "tuple",
            []
          ],
          "vpc_endpoint_workspaces_id": "string",
          "vpc_endpoint_workspaces_network_interface_ids": [
            "tuple",
            []
          ],
          "vpc_flow_log_cloudwatch_iam_role_arn": "string",
          "vpc_flow_log_destination_arn": "string",
          "vpc_flow_log_destination_type": "string",
          "vpc_flow_log_id": "string",
          "vpc_id": "string",
          "vpc_instance_tenancy": "string",
          "vpc_ipv6_association_id": "string",
          "vpc_ipv6_cidr_block": "string",
          "vpc_main_route_table_id": "string",
          "vpc_owner_id": "string",
          "vpc_secondary_cidr_blocks": [
            "tuple",
            []
          ]
        }
      ]
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_db_instance",
      "name": "hello_world_db",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "address": "terraform-20210326225217962500000001.coc183vggxvt.us-east-1.rds.amazonaws.com",
            "allocated_storage": 10,
            "allow_major_version_upgrade": null,
            "apply_immediately": true,
            "arn": "arn:aws:rds:us-east-1:599908802495:db:terraform-20210326225217962500000001",
            "auto_minor_version_upgrade": true,
            "availability_zone": "us-east-1b",
            "backup_retention_period": 0,
            "backup_window": "06:15-06:45",
            "ca_cert_identifier": "rds-ca-2019",
            "character_set_name": null,
            "copy_tags_to_snapshot": false,
            "db_subnet_group_name": "hello_world_demo",
            "delete_automated_backups": true,
            "deletion_protection": false,
            "domain": "",
            "domain_iam_role_name": "",
            "enabled_cloudwatch_logs_exports": [],
            "endpoint": "terraform-20210326225217962500000001.coc183vggxvt.us-east-1.rds.amazonaws.com:5432",
            "engine": "postgres",
            "engine_version": "11.6",
            "final_snapshot_identifier": null,
            "hosted_zone_id": "Z2R2ITUGPM61AM",
            "iam_database_authentication_enabled": false,
            "id": "terraform-20210326225217962500000001",
            "identifier": "terraform-20210326225217962500000001",
            "identifier_prefix": null,
            "instance_class": "db.t2.micro",
            "iops": 0,
            "kms_key_id": "",
            "latest_restorable_time": "0001-01-01T00:00:00Z",
            "license_model": "postgresql-license",
            "maintenance_window": "thu:05:08-thu:05:38",
            "max_allocated_storage": 0,
            "monitoring_interval": 0,
            "monitoring_role_arn": "",
            "multi_az": false,
            "name": "hello_world",
            "option_group_name": "default:postgres-11",
            "parameter_group_name": "default.postgres11",
            "password": "hello_word_db_1234",
            "performance_insights_enabled": false,
            "performance_insights_kms_key_id": "",
            "performance_insights_retention_period": 0,
            "port": 5432,
            "publicly_accessible": false,
            "replicas": [],
            "replicate_source_db": "",
            "resource_id": "db-HGOWTOSS3RL6UKL3TABAPZR7U4",
            "restore_to_point_in_time": [],
            "s3_import": [],
            "security_group_names": [],
            "skip_final_snapshot": true,
            "snapshot_identifier": null,
            "status": "available",
            "storage_encrypted": false,
            "storage_type": "gp2",
            "tags": {},
            "timeouts": null,
            "timezone": "",
            "username": "drew",
            "vpc_security_group_ids": [
              "sg-0bc8b858e5bdc139e"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NDgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_db_subnet_group.database",
            "module.vpc.aws_subnet.database",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ecr_repository",
      "name": "hello_world_repo",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ecr:us-east-1:599908802495:repository/hello-world-demo-repo",
            "encryption_configuration": [
              {
                "encryption_type": "AES256",
                "kms_key": ""
              }
            ],
            "id": "hello-world-demo-repo",
            "image_scanning_configuration": [
              {
                "scan_on_push": true
              }
            ],
            "image_tag_mutability": "MUTABLE",
            "name": "hello-world-demo-repo",
            "registry_id": "599908802495",
            "repository_url": "599908802495.dkr.ecr.us-east-1.amazonaws.com/hello-world-demo-repo",
            "tags": {},
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "aws_ami",
      "name": "eks_gpu_worker",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-03829cadb4a21e092",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-06e6f5c101fb8524e",
                  "throughput": "0",
                  "volume_size": "20",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-03-23T21:32:47.000Z",
            "description": "EKS Kubernetes Worker AMI for Machine Learning Accelerated Workloads on AmazonLinux2 image (k8s: 1.16.15, docker: 19.03.13ce-1.amzn2, containerd: 1.4.1-2.amzn2)",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "amazon-eks-gpu-node-1.16-v*"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-03829cadb4a21e092",
            "image_id": "ami-03829cadb4a21e092",
            "image_location": "amazon/amazon-eks-gpu-node-1.16-v20210322",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "amazon-eks-gpu-node-1.16-v20210322",
            "name_regex": null,
            "owner_id": "602401143452",
            "owners": [
              "602401143452"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-06e6f5c101fb8524e",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "aws_ami",
      "name": "eks_worker",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-0a0b67d5830cc0c8c",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-054719cff05cdcce6",
                  "throughput": "0",
                  "volume_size": "20",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-03-23T21:22:24.000Z",
            "description": "EKS Kubernetes Worker AMI with AmazonLinux2 image, (k8s: 1.16.15, docker: 19.03.13ce-1.amzn2, containerd: 1.4.1-2.amzn2)",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "amazon-eks-node-1.16-v*"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0a0b67d5830cc0c8c",
            "image_id": "ami-0a0b67d5830cc0c8c",
            "image_location": "amazon/amazon-eks-node-1.16-v20210322",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "amazon-eks-node-1.16-v20210322",
            "name_regex": null,
            "owner_id": "602401143452",
            "owners": [
              "602401143452"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-054719cff05cdcce6",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "599908802495",
            "arn": "arn:aws:iam::599908802495:user/drew",
            "id": "599908802495",
            "user_id": "AIDAYXLKZ3672A2F2OUGH"
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "aws_eks_cluster",
      "name": "cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:eks:us-east-1:599908802495:cluster/hello_world",
            "certificate_authority": [
              {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1ETXlOakl6TVRFME5Gb1hEVE14TURNeU5ESXpNVEUwTkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUFZqCnE4RWJTVU1RRVZoRno5dCs3QzdBTkFNczhEanJJalMvNm1hUCtkOHpDWUkrZ2tORFZTbENVS0tKVm5jTnJMNHkKNkQ4QVZ5TWxsV2xZV21Qa0NBeUtvUTg2VTJiZC9VR3BldHRlVmJscU1ZdmpEK3FKVW9kN2lwaFdNUmg0SWN6TQpsUGtIS3RFWHRQUnlvbERUUmtBeCtGSERhY0VLcnZXWWNUdGtRa2ZPUDJrY25VU0d3amVuRURNRTgwZzkxbFpZCk5ZaVl6ZERCSEhld01iaWRWaXkyUWhvR2UzSnBEajlhUld5c1BGb1ZHNjNOWjUyamVTYVFiTWFHeDVpclNlRXcKa3VYVXdBa3l4NlR4TFQ3alIrRUxHTll3cmRsTy9Oa1BPbVFuUkpzQ0NnWDFDdHdRRUR1cDhBSTl4ZWI2TWVKSQoyNWROWVhkQ0tibEgxcFY1M2VNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDL1YvaG9uaEhRU1dvVVUxR0xoUUIwU3JvOGcKNmtqeUh5ZlBkSjVvWFA3QWdIYjhnZ0hYVHo3N0RKVGc4bk5NYm5HRnI1NFZLOWJXcHVYSHk3NDM2eGVOYll2VgpWcGxPZEZLTXRHTFYzNHprbGprTXh4Ym4yRDFlU1NZQUp4M0RnUmRHeXlVd0pqRGQxRTlUV2JTalZKVVFWS0N2Ck94OTdmNEsrSDJVUGd0djd5MzgydjBqeVlNMzRIQ1BQNW9qM3IrTzE0Nm5GUTFsVUJpeXRZMHdLYjBuUGg1djkKb2kzWmIzZHgvbXR0TlcxVFQ1OC94WnY0Z1ZHN1d3cmdXaUhWQVlQVFBsdVM0NVE4ZGoyd3pRdHF0dVlOdzFXVAp5cTNjaFVRY0t2VVB3TlBCNzUvVjlkSUM1WFNweVFhOHgybnFKdEltUEI4clhFenJyRGhhT2dSakozMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
              }
            ],
            "created_at": "2021-03-26 23:04:42.677 +0000 UTC",
            "enabled_cluster_log_types": [
              "api",
              "audit",
              "authenticator",
              "controllerManager",
              "scheduler"
            ],
            "endpoint": "https://3087F903F299280F65199C21FB7A1CD5.gr7.us-east-1.eks.amazonaws.com",
            "id": "hello_world",
            "identity": [
              {
                "oidc": [
                  {
                    "issuer": "https://oidc.eks.us-east-1.amazonaws.com/id/3087F903F299280F65199C21FB7A1CD5"
                  }
                ]
              }
            ],
            "kubernetes_network_config": [
              {
                "service_ipv4_cidr": "172.20.0.0/16"
              }
            ],
            "name": "hello_world",
            "platform_version": "eks.6",
            "role_arn": "arn:aws:iam::599908802495:role/hello_world20210326230435293100000001",
            "status": "ACTIVE",
            "tags": {
              "Environment": "prod",
              "Owner": "Terraform"
            },
            "version": "1.16",
            "vpc_config": [
              {
                "cluster_security_group_id": "sg-009611a579a5d7fe2",
                "endpoint_private_access": false,
                "endpoint_public_access": true,
                "public_access_cidrs": [
                  "0.0.0.0/0"
                ],
                "security_group_ids": [
                  "sg-0c156f71b6f7b000c"
                ],
                "subnet_ids": [
                  "subnet-05fe4f98639ff4274",
                  "subnet-096ff4de659530b74"
                ],
                "vpc_id": "vpc-0a99b62d225d4f4c8"
              }
            ]
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "aws_eks_cluster_auth",
      "name": "cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hello_world",
            "name": "hello_world",
            "token": "k8s-aws-v1.aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8_QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNSZYLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFZWExLWjM2N1RJN0pGN0pKJTJGMjAyMTAzMjYlMkZ1cy1lYXN0LTElMkZzdHMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDIxMDMyNlQyMzE5MTBaJlgtQW16LUV4cGlyZXM9MCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QlM0J4LWs4cy1hd3MtaWQmWC1BbXotU2lnbmF0dXJlPTc0YjM1N2RjZTE5YWFkZDYyMjRhMDQ0NjlhY2U1NDk4ZjlkMmNjODExMDc2M2ZmOWVlNzNhY2FmZTFlOWI2Yjc"
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "worker_autoscaling",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3675969154",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"eksWorkerAutoscalingAll\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeLaunchTemplateVersions\",\n        \"autoscaling:DescribeTags\",\n        \"autoscaling:DescribeLaunchConfigurations\",\n        \"autoscaling:DescribeAutoScalingInstances\",\n        \"autoscaling:DescribeAutoScalingGroups\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"eksWorkerAutoscalingOwn\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"autoscaling:UpdateAutoScalingGroup\",\n        \"autoscaling:TerminateInstanceInAutoScalingGroup\",\n        \"autoscaling:SetDesiredCapacity\"\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"autoscaling:ResourceTag/k8s.io/cluster-autoscaler/enabled\": [\n            \"true\"\n          ],\n          \"autoscaling:ResourceTag/kubernetes.io/cluster/hello_world\": [\n            \"owned\"\n          ]\n        }\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "autoscaling:DescribeAutoScalingGroups",
                  "autoscaling:DescribeAutoScalingInstances",
                  "autoscaling:DescribeLaunchConfigurations",
                  "autoscaling:DescribeTags",
                  "ec2:DescribeLaunchTemplateVersions"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": "eksWorkerAutoscalingAll"
              },
              {
                "actions": [
                  "autoscaling:SetDesiredCapacity",
                  "autoscaling:TerminateInstanceInAutoScalingGroup",
                  "autoscaling:UpdateAutoScalingGroup"
                ],
                "condition": [
                  {
                    "test": "StringEquals",
                    "values": [
                      "owned"
                    ],
                    "variable": "autoscaling:ResourceTag/kubernetes.io/cluster/hello_world"
                  },
                  {
                    "test": "StringEquals",
                    "values": [
                      "true"
                    ],
                    "variable": "autoscaling:ResourceTag/k8s.io/cluster-autoscaler/enabled"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": "eksWorkerAutoscalingOwn"
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "aws_partition",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "dns_suffix": "amazonaws.com",
            "id": "aws",
            "partition": "aws",
            "reverse_dns_prefix": "com.amazonaws"
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "admin_service_account_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: eks-admin\n  namespace: kube-system",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: eks-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: eks-admin\n  namespace: kube-system",
              "apiVersion: v1\nkind: Secret\nmetadata:\n  name: eks-admin-dashboard-token\n  namespace: kube-system\n  annotations:\n    kubernetes.io/service-account.name: \"eks-admin\"\ntype: kubernetes.io/service-account-token"
            ],
            "id": "aff953a3409a436e409a8597356590fc94bc0c704c57b8ba5fb41898f3bcef4d",
            "pattern": ".terraform/modules/eks/cluster_configs/eks-admin-service-account.tpl.yaml",
            "vars": null
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "alb_ingress_controller_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "# Application Load Balancer (ALB) Ingress Controller Deployment Manifest.\n# This manifest details sensible defaults for deploying an ALB Ingress Controller.\n# GitHub: https://github.com/kubernetes-sigs/aws-alb-ingress-controller\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\n  # Namespace the ALB Ingress Controller should run in. Does not impact which\n  # namespaces it's able to resolve ingress resource for. For limiting ingress\n  # namespace scope, see --watch-namespace.\n  namespace: kube-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: alb-ingress-controller\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: alb-ingress-controller\n    spec:\n      containers:\n        - args:\n            # Limit the namespace where this ALB Ingress Controller deployment will\n            # resolve ingress resources. If left commented, all namespaces are used.\n            # - --watch-namespace=your-k8s-namespace\n\n            # Setting the ingress-class flag below ensures that only ingress resources with the\n            # annotation kubernetes.io/ingress.class: \"alb\" are respected by the controller. You may\n            # choose any class you'd like for this controller to respect.\n            - --ingress-class=alb\n\n            # Name of your cluster. Used when naming resources created\n            # by the ALB Ingress Controller, providing distinction between\n            # clusters.\n            - --cluster-name=prod\n\n            # AWS VPC ID this ingress controller will use to create AWS resources.\n            # If unspecified, it will be discovered from ec2metadata.\n            # - --aws-vpc-id=vpc-xxxxxx\n\n            # AWS region this ingress controller will operate in.\n            # If unspecified, it will be discovered from ec2metadata.\n            # List of regions: http://docs.aws.amazon.com/general/latest/gr/rande.html#vpc_region\n            # - --aws-region=us-west-1\n\n            # Enables logging on all outbound requests sent to the AWS API.\n            # If logging is desired, set to true.\n            # - ---aws-api-debug\n            # Maximum number of times to retry the aws calls.\n            # defaults to 10.\n            # - --aws-max-retries=10\n            - --alb-name-prefix=\"k8s\"\n          env:\n            # AWS key id for authenticating with the AWS API.\n            # This is only here for examples. It's recommended you instead use\n            # a project like kube2iam for granting access.\n            #- name: AWS_ACCESS_KEY_ID\n            #  value: KEYVALUE\n\n            # AWS key secret for authenticating with the AWS API.\n            # This is only here for examples. It's recommended you instead use\n            # a project like kube2iam for granting access.\n            #- name: AWS_SECRET_ACCESS_KEY\n            #  value: SECRETVALUE\n          # Repository location of the ALB Ingress Controller.\n          image: docker.io/m00nf1sh/aws-alb-ingress-controller:v1.2.0-alpha.2\n          imagePullPolicy: Always\n          name: server\n          resources: {}\n          terminationMessagePath: /dev/termination-log\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      securityContext: {}\n      terminationGracePeriodSeconds: 30\n      serviceAccountName: alb-ingress\n      serviceAccount: alb-ingress"
            ],
            "id": "6133f05ccea0e168ff1e22c81341e69fc3422d5702c2d8846353a056a44db4d4",
            "pattern": ".terraform/modules/eks/cluster_configs/alb-ingress-controller.tpl.yaml",
            "vars": {
              "alb_image": "docker.io/m00nf1sh/aws-alb-ingress-controller:v1.2.0-alpha.2",
              "alb_prefix": "k8s",
              "cluster_name": "prod"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "alb_ingress_controller_role_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\nrules:\n  - apiGroups:\n      - \"\"\n      - extensions\n    resources:\n      - configmaps\n      - endpoints\n      - events\n      - ingresses\n      - ingresses/status\n      - services\n    verbs:\n      - create\n      - get\n      - list\n      - update\n      - watch\n      - patch\n  - apiGroups:\n      - \"\"\n      - extensions\n    resources:\n      - nodes\n      - pods\n      - secrets\n      - services\n      - namespaces\n    verbs:\n      - get\n      - list\n      - watch",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: alb-ingress-controller\nsubjects:\n  - kind: ServiceAccount\n    name: alb-ingress\n    namespace: kube-system",
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress\n  namespace: kube-system"
            ],
            "id": "aa8de5af451b08b79caa405ee752c69e9c6bd52f659c9c5f9e3de4bdc90754aa",
            "pattern": ".terraform/modules/eks/cluster_configs/alb-ingress-controller-role.tpl.yaml",
            "vars": null
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "aws_cni_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: aws-node\nrules:\n  - apiGroups:\n      - crd.k8s.amazonaws.com\n    resources:\n      - \"*\"\n    verbs:\n      - \"*\"\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n      - nodes\n      - namespaces\n    verbs: [\"list\", \"watch\", \"get\"]\n  - apiGroups: [\"extensions\"]\n    resources:\n      - daemonsets\n    verbs: [\"list\", \"watch\"]",
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: aws-node\n  namespace: kube-system",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: aws-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: aws-node\nsubjects:\n  - kind: ServiceAccount\n    name: aws-node\n    namespace: kube-system",
              "kind: DaemonSet\napiVersion: apps/v1\nmetadata:\n  name: aws-node\n  namespace: kube-system\n  labels:\n    k8s-app: aws-node\nspec:\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: \"10%\"\n  selector:\n    matchLabels:\n      k8s-app: aws-node\n  template:\n    metadata:\n      labels:\n        k8s-app: aws-node\n    spec:\n      priorityClassName: system-node-critical\n      \n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                  - key: \"beta.kubernetes.io/os\"\n                    operator: In\n                    values:\n                      - linux\n                  - key: \"beta.kubernetes.io/arch\"\n                    operator: In\n                    values:\n                      - amd64\n                  - key: \"eks.amazonaws.com/compute-type\"\n                    operator: NotIn\n                    values:\n                      - fargate\n              - matchExpressions:\n                  - key: \"kubernetes.io/os\"\n                    operator: In\n                    values:\n                      - linux\n                  - key: \"kubernetes.io/arch\"\n                    operator: In\n                    values:\n                      - amd64\n                  - key: \"eks.amazonaws.com/compute-type\"\n                    operator: NotIn\n                    values:\n                      - fargate\n      serviceAccountName: aws-node\n      hostNetwork: true\n      tolerations:\n        - operator: Exists\n      containers:\n        - image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.6.3\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 61678\n              name: metrics\n          name: aws-node\n          readinessProbe:\n            exec:\n              command: [\"/app/grpc-health-probe\", \"-addr=:50051\"]\n            initialDelaySeconds: 35\n          livenessProbe:\n            exec:\n              command: [\"/app/grpc-health-probe\", \"-addr=:50051\"]\n            initialDelaySeconds: 35\n          env:\n            - name: AWS_VPC_K8S_CNI_LOGLEVEL\n              value: DEBUG\n            - name: AWS_VPC_K8S_CNI_VETHPREFIX\n              value: eni\n            - name: AWS_VPC_ENI_MTU\n              value: \"9001\"\n            - name: MY_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            - name: AWS_VPC_K8S_CNI_EXCLUDE_SNAT_CIDRS\n              value: \"192.168.0.0/16\"\n            - name: AWS_VPC_K8S_CNI_EXTERNALSNAT\n              value: \"true\"\n          resources:\n            requests:\n              cpu: 10m\n          securityContext:\n            privileged: true\n          volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n            - mountPath: /host/var/log\n              name: log-dir\n            - mountPath: /var/run/docker.sock\n              name: dockersock\n            - mountPath: /var/run/dockershim.sock\n              name: dockershim\n      volumes:\n        - name: cni-bin-dir\n          hostPath:\n            path: /opt/cni/bin\n        - name: cni-net-dir\n          hostPath:\n            path: /etc/cni/net.d\n        - name: log-dir\n          hostPath:\n            path: /var/log\n        - name: dockersock\n          hostPath:\n            path: /var/run/docker.sock\n        - name: dockershim\n          hostPath:\n            path: /var/run/dockershim.sock",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: eniconfigs.crd.k8s.amazonaws.com\nspec:\n  scope: Cluster\n  group: crd.k8s.amazonaws.com\n  versions:\n    - name: v1alpha1\n      served: true\n      storage: true\n  names:\n    plural: eniconfigs\n    singular: eniconfig\n    kind: ENIConfig"
            ],
            "id": "c65cbb8716d73507251a9bb4e88122f15b0437e9c56c88f2eb2b776cd2f1a5d9",
            "pattern": ".terraform/modules/eks/cluster_configs/aws-node.tpl.yaml",
            "vars": {
              "disabled": "false",
              "excludesnatcidrs": "192.168.0.0/16",
              "externalsnat": "true"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "calico_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "---\n# Source: calico/templates/calico-config.yaml\n# This ConfigMap is used to configure a self-hosted Calico installation.\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: calico-config\n  namespace: kube-system\ndata:\n  # Typha is disabled.\n  typha_service_name: \"none\"\n  # Configure the backend to use.\n  calico_backend: \"bird\"\n\n  # Configure the MTU to use\n  veth_mtu: \"1440\"\n\n  # The CNI network configuration to install on each node.  The special\n  # values in this config will be automatically populated.\n  cni_network_config: |-\n    {\n      \"name\": \"k8s-pod-network\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"calico\",\n          \"log_level\": \"info\",\n          \"datastore_type\": \"kubernetes\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n          \"mtu\": __CNI_MTU__,\n          \"ipam\": {\n              \"type\": \"calico-ipam\"\n          },\n          \"policy\": {\n              \"type\": \"k8s\"\n          },\n          \"kubernetes\": {\n              \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n          }\n        },\n        {\n          \"type\": \"portmap\",\n          \"snat\": true,\n          \"capabilities\": {\"portMappings\": true}\n        }\n      ]\n    }",
              "# Source: calico/templates/kdd-crds.yaml\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n   name: felixconfigurations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: FelixConfiguration\n    plural: felixconfigurations\n    singular: felixconfiguration",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamblocks.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMBlock\n    plural: ipamblocks\n    singular: ipamblock",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: blockaffinities.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BlockAffinity\n    plural: blockaffinities\n    singular: blockaffinity",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamhandles.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMHandle\n    plural: ipamhandles\n    singular: ipamhandle",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamconfigs.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMConfig\n    plural: ipamconfigs\n    singular: ipamconfig",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: bgppeers.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BGPPeer\n    plural: bgppeers\n    singular: bgppeer",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: bgpconfigurations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BGPConfiguration\n    plural: bgpconfigurations\n    singular: bgpconfiguration",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ippools.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPPool\n    plural: ippools\n    singular: ippool",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: hostendpoints.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: HostEndpoint\n    plural: hostendpoints\n    singular: hostendpoint",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: clusterinformations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: ClusterInformation\n    plural: clusterinformations\n    singular: clusterinformation",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: globalnetworkpolicies.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: GlobalNetworkPolicy\n    plural: globalnetworkpolicies\n    singular: globalnetworkpolicy",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: globalnetworksets.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: GlobalNetworkSet\n    plural: globalnetworksets\n    singular: globalnetworkset",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: networkpolicies.crd.projectcalico.org\nspec:\n  scope: Namespaced\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: NetworkPolicy\n    plural: networkpolicies\n    singular: networkpolicy",
              "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: networksets.crd.projectcalico.org\nspec:\n  scope: Namespaced\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: NetworkSet\n    plural: networksets\n    singular: networkset",
              "# Source: calico/templates/rbac.yaml\n\n# Include a clusterrole for the kube-controllers component,\n# and bind it to the calico-kube-controllers serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-kube-controllers\nrules:\n  # Nodes are watched to monitor for deletions.\n  - apiGroups: [\"\"]\n    resources:\n      - nodes\n    verbs:\n      - watch\n      - list\n      - get\n  # Pods are queried to check for existence.\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n    verbs:\n      - get\n  # IPAM resources are manipulated when nodes are deleted.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - ippools\n    verbs:\n      - list\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n      - get\n      - list\n      - create\n      - update\n      - delete\n  # Needs access to update clusterinformations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - clusterinformations\n    verbs:\n      - get\n      - create\n      - update",
              "kind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-kube-controllers\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-kube-controllers\nsubjects:\n- kind: ServiceAccount\n  name: calico-kube-controllers\n  namespace: kube-system",
              "# Include a clusterrole for the calico-node DaemonSet,\n# and bind it to the calico-node serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-node\nrules:\n  # The CNI plugin needs to get pods, nodes, and namespaces.\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n      - nodes\n      - namespaces\n    verbs:\n      - get\n  - apiGroups: [\"\"]\n    resources:\n      - endpoints\n      - services\n    verbs:\n      # Used to discover service IPs for advertisement.\n      - watch\n      - list\n      # Used to discover Typhas.\n      - get\n  - apiGroups: [\"\"]\n    resources:\n      - nodes/status\n    verbs:\n      # Needed for clearing NodeNetworkUnavailable flag.\n      - patch\n      # Calico stores some configuration information in node annotations.\n      - update\n  # Watch for changes to Kubernetes NetworkPolicies.\n  - apiGroups: [\"networking.k8s.io\"]\n    resources:\n      - networkpolicies\n    verbs:\n      - watch\n      - list\n  # Used by Calico for policy information.\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n      - namespaces\n      - serviceaccounts\n    verbs:\n      - list\n      - watch\n  # The CNI plugin patches pods/status.\n  - apiGroups: [\"\"]\n    resources:\n      - pods/status\n    verbs:\n      - patch\n  # Calico monitors various CRDs for config.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - globalfelixconfigs\n      - felixconfigurations\n      - bgppeers\n      - globalbgpconfigs\n      - bgpconfigurations\n      - ippools\n      - ipamblocks\n      - globalnetworkpolicies\n      - globalnetworksets\n      - networkpolicies\n      - networksets\n      - clusterinformations\n      - hostendpoints\n    verbs:\n      - get\n      - list\n      - watch\n  # Calico must create and update some CRDs on startup.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - ippools\n      - felixconfigurations\n      - clusterinformations\n    verbs:\n      - create\n      - update\n  # Calico stores some configuration information on the node.\n  - apiGroups: [\"\"]\n    resources:\n      - nodes\n    verbs:\n      - get\n      - list\n      - watch\n  # These permissions are only requried for upgrade from v2.6, and can\n  # be removed after upgrade or on fresh installations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - bgpconfigurations\n      - bgppeers\n    verbs:\n      - create\n      - update\n  # These permissions are required for Calico CNI to perform IPAM allocations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n      - get\n      - list\n      - create\n      - update\n      - delete\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - ipamconfigs\n    verbs:\n      - get\n  # Block affinities must also be watchable by confd for route aggregation.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - blockaffinities\n    verbs:\n      - watch\n  # The Calico IPAM migration needs to get daemonsets. These permissions can be\n  # removed if not upgrading from an installation using host-local IPAM.\n  - apiGroups: [\"apps\"]\n    resources:\n      - daemonsets\n    verbs:\n      - get",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: calico-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-node\nsubjects:\n- kind: ServiceAccount\n  name: calico-node\n  namespace: kube-system",
              "# Source: calico/templates/calico-node.yaml\n# This manifest installs the calico-node container, as well\n# as the CNI plugins and network config on\n# each master and worker node in a Kubernetes cluster.\nkind: DaemonSet\napiVersion: apps/v1\nmetadata:\n  name: calico-node\n  namespace: kube-system\n  labels:\n    k8s-app: calico-node\nspec:\n  selector:\n    matchLabels:\n      k8s-app: calico-node\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n  template:\n    metadata:\n      labels:\n        k8s-app: calico-node\n      annotations:\n        # This, along with the CriticalAddonsOnly toleration below,\n        # marks the pod as a critical add-on, ensuring it gets\n        # priority scheduling and that its resources are reserved\n        # if it ever gets evicted.\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n    spec:\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      hostNetwork: true\n      tolerations:\n        # Make sure calico-node gets scheduled on all nodes.\n        - effect: NoSchedule\n          operator: Exists\n        # Mark the pod as a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator: Exists\n        - effect: NoExecute\n          operator: Exists\n      serviceAccountName: calico-node\n      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a \"force\n      # deletion\": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.\n      terminationGracePeriodSeconds: 0\n      priorityClassName: system-node-critical\n      initContainers:\n        # This container performs upgrade from host-local IPAM to calico-ipam.\n        # It can be deleted if this is a fresh installation, or if you have already\n        # upgraded to use calico-ipam.\n        - name: upgrade-ipam\n          image: calico/cni:v3.14.0\n          command: [\"/opt/cni/bin/calico-ipam\", \"-upgrade\"]\n          env:\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            - name: CALICO_NETWORKING_BACKEND\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: calico_backend\n          volumeMounts:\n            - mountPath: /var/lib/cni/networks\n              name: host-local-net-dir\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n        # This container installs the CNI binaries\n        # and CNI network config file on each node.\n        - name: install-cni\n          image: calico/cni:v3.14.0\n          command: [\"/install-cni.sh\"]\n          env:\n            # Name of the CNI config file to create.\n            - name: CNI_CONF_NAME\n              value: \"10-calico.conflist\"\n            # The CNI network config to install on each node.\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: cni_network_config\n            # Set the hostname based on the k8s node name.\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            # CNI MTU Config variable\n            - name: CNI_MTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # Prevents the container from sleeping forever.\n            - name: SLEEP\n              value: \"false\"\n          volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes\n        # to communicate with Felix over the Policy Sync API.\n        - name: flexvol-driver\n          image: calico/pod2daemon-flexvol:v3.14.0\n          volumeMounts:\n          - name: flexvol-driver-host\n            mountPath: /host/driver\n      containers:\n        # Runs calico-node container on each Kubernetes node.  This\n        # container programs network policy and routes on each\n        # host.\n        - name: calico-node\n          image: calico/node:v3.14.0\n          env:\n            # Use Kubernetes API as the backing datastore.\n            - name: DATASTORE_TYPE\n              value: \"kubernetes\"\n            # Wait for the datastore.\n            - name: WAIT_FOR_DATASTORE\n              value: \"true\"\n            # Set based on the k8s node name.\n            - name: NODENAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            # Choose the backend to use.\n            - name: CALICO_NETWORKING_BACKEND\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: calico_backend\n            # Cluster type to identify the deployment type\n            - name: CLUSTER_TYPE\n              value: \"k8s,bgp\"\n            # Auto-detect the BGP IP address.\n            - name: IP\n              value: \"autodetect\"\n            # Enable IPIP\n            - name: CALICO_IPV4POOL_IPIP\n              value: \"Always\"\n            # Set MTU for tunnel device used if ipip is enabled\n            - name: FELIX_IPINIPMTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # The default IPv4 pool to create on startup if none exists. Pod IPs will be\n            # chosen from this range. Changing this value after installation will have\n            # no effect. This should fall within `--cluster-cidr`.\n            - name: CALICO_IPV4POOL_CIDR\n              value: \"192.168.0.0/16\"\n            # Disable file logging so `kubectl logs` works.\n            - name: CALICO_DISABLE_FILE_LOGGING\n              value: \"true\"\n            # Set Felix endpoint to host default action to ACCEPT.\n            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION\n              value: \"ACCEPT\"\n            # Disable IPv6 on Kubernetes.\n            - name: FELIX_IPV6SUPPORT\n              value: \"false\"\n            # Set Felix logging to \"info\"\n            - name: FELIX_LOGSEVERITYSCREEN\n              value: \"info\"\n            - name: FELIX_HEALTHENABLED\n              value: \"true\"\n            - name: IP_AUTODETECTION_METHOD\n              value: interface=eth0\n\n          securityContext:\n            privileged: true\n          resources:\n            requests:\n              cpu: 250m\n          livenessProbe:\n            httpGet:\n              path: /liveness\n              port: 9099\n              host: localhost\n            periodSeconds: 10\n            initialDelaySeconds: 10\n            failureThreshold: 6\n          readinessProbe:\n            exec:\n              command:\n              - /bin/calico-node\n              - -bird-ready\n              - -felix-ready\n            periodSeconds: 10\n          volumeMounts:\n            - mountPath: /lib/modules\n              name: lib-modules\n              readOnly: true\n            - mountPath: /run/xtables.lock\n              name: xtables-lock\n              readOnly: false\n            - mountPath: /var/run/calico\n              name: var-run-calico\n              readOnly: false\n            - mountPath: /var/lib/calico\n              name: var-lib-calico\n              readOnly: false\n            - name: policysync\n              mountPath: /var/run/nodeagent\n      volumes:\n        # Used by calico-node.\n        - name: lib-modules\n          hostPath:\n            path: /lib/modules\n        - name: var-run-calico\n          hostPath:\n            path: /var/run/calico\n        - name: var-lib-calico\n          hostPath:\n            path: /var/lib/calico\n        - name: xtables-lock\n          hostPath:\n            path: /run/xtables.lock\n            type: FileOrCreate\n        # Used to install CNI.\n        - name: cni-bin-dir\n          hostPath:\n            path: /opt/cni/bin\n        - name: cni-net-dir\n          hostPath:\n            path: /etc/cni/net.d\n        # Mount in the directory for host-local IPAM allocations. This is\n        # used when upgrading from host-local to calico-ipam, and can be removed\n        # if not using the upgrade-ipam init container.\n        - name: host-local-net-dir\n          hostPath:\n            path: /var/lib/cni/networks\n        # Used to create per-pod Unix Domain Sockets\n        - name: policysync\n          hostPath:\n            type: DirectoryOrCreate\n            path: /var/run/nodeagent\n        # Used to install Flex Volume Driver\n        - name: flexvol-driver-host\n          hostPath:\n            type: DirectoryOrCreate\n            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds",
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-node\n  namespace: kube-system",
              "# Source: calico/templates/calico-kube-controllers.yaml\n\n# See https://github.com/projectcalico/kube-controllers\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n  labels:\n    k8s-app: calico-kube-controllers\nspec:\n  # The controllers can only have a single active instance.\n  replicas: 1\n  selector:\n    matchLabels:\n      k8s-app: calico-kube-controllers\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      name: calico-kube-controllers\n      namespace: kube-system\n      labels:\n        k8s-app: calico-kube-controllers\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n    spec:\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      tolerations:\n        # Mark the pod as a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator: Exists\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n      serviceAccountName: calico-kube-controllers\n      priorityClassName: system-cluster-critical\n      containers:\n        - name: calico-kube-controllers\n          image: calico/kube-controllers:v3.10.1\n          env:\n            # Choose which controllers to run.\n            - name: ENABLED_CONTROLLERS\n              value: node\n            - name: DATASTORE_TYPE\n              value: kubernetes\n          readinessProbe:\n            exec:\n              command:\n              - /usr/bin/check-status\n              - -r",
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system"
            ],
            "id": "a7e93fd14cd9d7604218d2289619acbf0ec01ad622036d5d33f685b960c513d4",
            "pattern": ".terraform/modules/eks/cluster_configs/calico.tpl.yaml",
            "vars": {
              "ip_autodetection": "interface=eth0"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "dashboard_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "# Copyright 2017 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: kubernetes-dashboard",
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard",
              "kind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard",
              "apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-certs\n  namespace: kubernetes-dashboard\ntype: Opaque",
              "apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-csrf\n  namespace: kubernetes-dashboard\ntype: Opaque\ndata:\n  csrf: \"\"",
              "apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-key-holder\n  namespace: kubernetes-dashboard\ntype: Opaque",
              "kind: ConfigMap\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-settings\n  namespace: kubernetes-dashboard",
              "kind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nrules:\n  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.\n  - apiGroups: [\"\"]\n    resources: [\"secrets\"]\n    resourceNames: [\"kubernetes-dashboard-key-holder\", \"kubernetes-dashboard-certs\", \"kubernetes-dashboard-csrf\"]\n    verbs: [\"get\", \"update\", \"delete\"]\n    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.\n  - apiGroups: [\"\"]\n    resources: [\"configmaps\"]\n    resourceNames: [\"kubernetes-dashboard-settings\"]\n    verbs: [\"get\", \"update\"]\n    # Allow Dashboard to get metrics.\n  - apiGroups: [\"\"]\n    resources: [\"services\"]\n    resourceNames: [\"heapster\", \"dashboard-metrics-scraper\"]\n    verbs: [\"proxy\"]\n  - apiGroups: [\"\"]\n    resources: [\"services/proxy\"]\n    resourceNames: [\"heapster\", \"http:heapster:\", \"https:heapster:\", \"dashboard-metrics-scraper\", \"http:dashboard-metrics-scraper\"]\n    verbs: [\"get\"]",
              "kind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\nrules:\n  # Allow Metrics Scraper to get metrics from the Metrics server\n  - apiGroups: [\"metrics.k8s.io\"]\n    resources: [\"pods\", \"nodes\"]\n    verbs: [\"get\", \"list\", \"watch\"]",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: kubernetes-dashboard\nsubjects:\n  - kind: ServiceAccount\n    name: kubernetes-dashboard\n    namespace: kubernetes-dashboard",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kubernetes-dashboard\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: kubernetes-dashboard\nsubjects:\n  - kind: ServiceAccount\n    name: kubernetes-dashboard\n    namespace: kubernetes-dashboard",
              "kind: Deployment\napiVersion: apps/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: kubernetes-dashboard\n  template:\n    metadata:\n      labels:\n        k8s-app: kubernetes-dashboard\n      annotations:\n        cni: \"aws\"\n    spec:\n      containers:\n        - name: kubernetes-dashboard\n          image: kubernetesui/dashboard:v2.0.0-beta8\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8443\n              protocol: TCP\n          args:\n            - --auto-generate-certificates\n            - --namespace=kubernetes-dashboard\n            - --token-ttl=0\n            - --sidecar-host=http://dashboard-metrics-scraper:8000\n            # Uncomment the following line to manually specify Kubernetes API server Host\n            # If not specified, Dashboard will attempt to auto discover the API server and connect\n            # to it. Uncomment only if the default does not work.\n            # - --apiserver-host=http://my-address:port\n          volumeMounts:\n            - name: kubernetes-dashboard-certs\n              mountPath: /certs\n              # Create on-disk volume to store exec logs\n            - mountPath: /tmp\n              name: tmp-volume\n          livenessProbe:\n            httpGet:\n              scheme: HTTPS\n              path: /\n              port: 8443\n            initialDelaySeconds: 30\n            timeoutSeconds: 30\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsUser: 1001\n            runAsGroup: 2001\n      volumes:\n        - name: kubernetes-dashboard-certs\n          secret:\n            secretName: kubernetes-dashboard-certs\n        - name: tmp-volume\n          emptyDir: {}\n      serviceAccountName: kubernetes-dashboard\n      nodeSelector:\n        \"beta.kubernetes.io/os\": linux\n      # Comment the following tolerations if Dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule",
              "kind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 8000\n      targetPort: 8000\n  selector:\n    k8s-app: dashboard-metrics-scraper",
              "kind: Deployment\napiVersion: apps/v1\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: dashboard-metrics-scraper\n  template:\n    metadata:\n      labels:\n        k8s-app: dashboard-metrics-scraper\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'\n    spec:\n      containers:\n        - name: dashboard-metrics-scraper\n          image: kubernetesui/metrics-scraper:v1.0.1\n          ports:\n            - containerPort: 8000\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              scheme: HTTP\n              path: /\n              port: 8000\n            initialDelaySeconds: 30\n            timeoutSeconds: 30\n          volumeMounts:\n          - mountPath: /tmp\n            name: tmp-volume\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsUser: 1001\n            runAsGroup: 2001\n      serviceAccountName: kubernetes-dashboard\n      nodeSelector:\n        \"beta.kubernetes.io/os\": linux\n      # Comment the following tolerations if Dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n      volumes:\n        - name: tmp-volume\n          emptyDir: {}"
            ],
            "id": "ac76b63e352b387ae5865c6132503a5e64f08cd0e510b70d9097111ebca510db",
            "pattern": ".terraform/modules/eks/cluster_configs/kubernetes-dashboard.tpl.yaml",
            "vars": {
              "cni": "aws"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "ebs_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [],
            "id": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
            "pattern": ".terraform/modules/eks/cluster_configs/ebs-storage-class.tpl.tpl.yaml",
            "vars": {
              "encrypted": "true"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "external_dns_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: external-dns\n  namespace: kube-system",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: external-dns\n  namespace: kube-system\nrules:\n- apiGroups: [\"\"]\n  resources: [\"services\"]\n  verbs: [\"get\",\"watch\",\"list\"]\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"watch\",\"list\"]\n- apiGroups: [\"extensions\"]\n  resources: [\"ingresses\"]\n  verbs: [\"get\",\"watch\",\"list\"]\n- apiGroups: [\"\"]\n  resources: [\"nodes\"]\n  verbs: [\"list\"]",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: external-dns-viewer\n  namespace: kube-system\n\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: external-dns\nsubjects:\n- kind: ServiceAccount\n  name: external-dns\n  namespace: kube-system",
              "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: external-dns\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app: external-dns\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: external-dns\n    spec:\n      serviceAccountName: external-dns\n      containers:\n      - name: external-dns\n        image: registry.opensource.zalan.do/teapot/external-dns:v0.7.1\n        args:\n        - --source=service\n        - --source=ingress\n        # will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones\n        \n        - --provider=aws\n        - --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization\n        - --aws-zone-type= # only look at public hosted zones (valid values are public, private or no value for both)\n        - --registry=txt\n        - --txt-owner-id=my-identifier"
            ],
            "id": "df8b1e3a587b41eb81e69a8a44946bac0ba13adcf3f52b73967a673716c41586",
            "pattern": ".terraform/modules/eks/cluster_configs/external-dns.tpl.yaml",
            "vars": {
              "domain_filters": "",
              "domain_type": ""
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "flux_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    name: flux\n  name: flux\n  namespace: flux",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  labels:\n    name: flux\n  name: flux\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n- nonResourceURLs:\n  - '*'\n  verbs:\n  - '*'",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    name: flux\n  name: flux\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: flux\nsubjects:\n- kind: ServiceAccount\n  name: flux\n  namespace: flux",
              "apiVersion: v1\nkind: Secret\nmetadata:\n  name: flux-git-deploy\n  namespace: flux\ntype: Opaque",
              "apiVersion: v1\nkind: Service\nmetadata:\n  name: memcached\n  namespace: flux\nspec:\n  ports:\n  - name: memcached\n    port: 11211\n  selector:\n    name: memcached",
              "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: flux\n  namespace: flux\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: flux\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      annotations:\n        prometheus.io/port: \"3031\"\n      labels:\n        name: flux\n    spec:\n      containers:\n      - args:\n        - --manifest-generation=true\n        - --memcached-hostname=memcached.flux\n        - --memcached-service=\n        - --ssh-keygen-dir=/var/fluxd/keygen\n        - --git-branch=master\n        - --git-path=namespaces,workloads\n        - --git-user=flux\n        - --git-email=flux@users.noreply.github.com\n        - --git-url=\n        - --manifest-generation=false\n        image: docker.io/fluxcd/flux:1.20.2\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          httpGet:\n            path: /api/flux/v6/identity.pub\n            port: 3030\n          initialDelaySeconds: 5\n          timeoutSeconds: 5\n        name: flux\n        ports:\n        - containerPort: 3030\n        readinessProbe:\n          httpGet:\n            path: /api/flux/v6/identity.pub\n            port: 3030\n          initialDelaySeconds: 5\n          timeoutSeconds: 5\n        resources:\n          requests:\n            cpu: 50m\n            memory: 64Mi\n        volumeMounts:\n        - mountPath: /etc/fluxd/ssh\n          name: git-key\n          readOnly: true\n        - mountPath: /var/fluxd/keygen\n          name: git-keygen\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      serviceAccountName: flux\n      volumes:\n      - name: git-key\n        secret:\n          defaultMode: 256\n          secretName: flux-git-deploy\n      - emptyDir:\n          medium: Memory\n        name: git-keygen",
              "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: memcached\n  namespace: flux\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: memcached\n  template:\n    metadata:\n      labels:\n        name: memcached\n    spec:\n      containers:\n      - args:\n        - -m 512\n        - -I 5m\n        - -p 11211\n        image: memcached:1.5.20\n        imagePullPolicy: IfNotPresent\n        name: memcached\n        ports:\n        - containerPort: 11211\n          name: clients\n        securityContext:\n          allowPrivilegeEscalation: false\n          runAsGroup: 11211\n          runAsUser: 11211\n      nodeSelector:\n        beta.kubernetes.io/os: linux"
            ],
            "id": "c7c842b9497bf2f1819fea417fef3bd3f62afa001d67493d80cb7dfcba907db6",
            "pattern": ".terraform/modules/eks/cluster_configs/flux.tpl.yaml",
            "vars": {
              "flux_git_branch": "master",
              "flux_git_path": "namespaces,workloads",
              "flux_git_url": "",
              "flux_git_user": "flux",
              "flux_manifest_generation": "false"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "genie_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "---\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: genie-plugin\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - pods\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"alpha.network.k8s.io\"\n    resources:\n      - logicalnetworks\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"alpha.network.k8s.io\"\n    resources:\n      - physicalnetworks\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"k8s.cni.cncf.io\"\n    resources:\n      - network-attachment-definitions\n    verbs:\n      - get\n      - update\n  - apiGroups:\n      - \"\"\n    resources:\n      - configmaps\n    verbs:\n      - get\n  - apiGroups:\n      - \"admissionregistration.k8s.io\"\n    resources:\n      - validatingwebhookconfigurations\n    verbs:\n      - get\n      - update\n      - create\n      - delete",
              "kind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: genie-plugin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: genie-plugin\nsubjects:\n- kind: ServiceAccount\n  name: genie-plugin\n  namespace: kube-system\n- kind: Group\n  name: system:authenticated\n  apiGroup: rbac.authorization.k8s.io",
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: genie-plugin\n  namespace: kube-system",
              "# This ConfigMap can be used to configure a self-hosted CNI-Genie installation.\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: genie-config\n  namespace: kube-system\ndata:\n  # The CNI network configuration to install on each node.\n  cni_genie_network_config: |-\n    {\n        \"name\": \"k8s-pod-network\",\n        \"type\": \"genie\",\n        \"cniVersion\": \"0.2.0\",\n        \"default_plugin\": \"calico\",\n        \"log_level\": \"info\",\n        \"datastore_type\": \"kubernetes\",\n        \"hostname\": \"__KUBERNETES_NODE_NAME__\",\n        \"policy\": {\n            \"type\": \"k8s\",\n            \"k8s_auth_token\": \"__SERVICEACCOUNT_TOKEN__\"\n        },\n        \"kubernetes\": {\n            \"k8s_api_root\": \"https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__\",\n            \"kubeconfig\": \"/etc/cni/net.d/genie-kubeconfig\"\n        },\n        \"romana_root\": \"http://__ROMANA_SERVICE_HOST__:__ROMANA_SERVICE_PORT__\",\n        \"segment_label_name\": \"romanaSegment\"\n    }",
              "# Install CNI-Genie plugin on each slave node.\nkind: DaemonSet\napiVersion: apps/v1\nmetadata:\n  name: genie-plugin\n  namespace: kube-system\n  labels:\n    k8s-app: genie\nspec:\n  selector:\n    matchLabels:\n      k8s-app: genie\n  template:\n    metadata:\n      labels:\n        k8s-app: genie\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n    spec:\n      hostNetwork: true\n      hostPID: true\n      serviceAccountName: genie-plugin\n      containers:\n        # Create a container with install.sh that\n        # Installs required 00-genie.conf and genie binary\n        # on slave node.\n        - name: install-cni\n          image: quay.io/huawei-cni-genie/genie-plugin:latest\n          imagePullPolicy: Always\n          command: [\"/launch.sh\"]\n          env:\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n                  name: genie-config\n                  key: cni_genie_network_config\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n          volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n      tolerations:\n      - key: CriticalAddonsOnly\n        operator: Exists\n      - key: node.kubernetes.io/not-ready\n        effect: NoSchedule\n        operator: Exists\n      - operator: \"Exists\"\n        effect: \"NoSchedule\"\n      - operator: \"Exists\"\n        effect: \"NoExecute\"\n      volumes:\n        - name: cni-bin-dir\n          hostPath:\n            path: /opt/cni/bin\n        - name: cni-net-dir\n          hostPath:\n            path: /etc/cni/net.d",
              "# ~Genie network admission controller daemonset configuration~\n# ~Genie network admission controller pods will run only in master nodes~\n# Changed to run as deployment on non master nodes for eks\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: genie-network-admission-controller\n  namespace: kube-system\n  labels:\n    role: genie-network-admission-controller\nspec:\n  selector:\n    matchLabels:\n      role: genie-network-admission-controller\n  template:\n    metadata:\n      labels:\n        role: genie-network-admission-controller\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n        # Admission controllers need to run with aws ip\n        cni: \"aws\"\n    spec:\n      serviceAccountName: genie-plugin\n      containers:\n        - name: genie-network-admission-controller\n          image: quay.io/huawei-cni-genie/genie-admission-controller:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8000",
              "# Genie network admission controller service\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: genie-network-admission-controller\n  name: genie-network-admission-controller\n  namespace: kube-system\nspec:\n  ports:\n    - port: 443\n      targetPort: 8000\n  selector:\n    role: genie-network-admission-controller"
            ],
            "id": "3f3d5d0cbe23974ba9fba33989cf58966d49a3e33ffb6d31d5c8b82697669761",
            "pattern": ".terraform/modules/eks/cluster_configs/genie.tpl.yaml",
            "vars": {
              "default_plugins": "calico"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "k8s_dns_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    cni: aws\n  labels:\n    eks.amazonaws.com/component: coredns\n    k8s-app: kube-dns\n    kubernetes.io/name: CoreDNS\n  name: coredns\n  namespace: kube-system\nspec:\n  progressDeadlineSeconds: 2147483647\n  replicas: 2\n  revisionHistoryLimit: 2147483647\n  selector:\n    matchLabels:\n      eks.amazonaws.com/component: coredns\n      k8s-app: kube-dns\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        eks.amazonaws.com/component: coredns\n        k8s-app: kube-dns\n      annotations:\n        cni: aws\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: beta.kubernetes.io/os\n                operator: In\n                values:\n                - linux\n              - key: beta.kubernetes.io/arch\n                operator: In\n                values:\n                - amd64\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: k8s-app\n                  operator: In\n                  values:\n                  - kube-dns\n              topologyKey: kubernetes.io/hostname\n            weight: 100\n      containers:\n      - args:\n        - -conf\n        - /etc/coredns/Corefile\n        image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.6.6\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          failureThreshold: 5\n          httpGet:\n            path: /health\n            port: 8080\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        name: coredns\n        ports:\n        - containerPort: 53\n          name: dns\n          protocol: UDP\n        - containerPort: 53\n          name: dns-tcp\n          protocol: TCP\n        - containerPort: 9153\n          name: metrics\n          protocol: TCP\n        resources:\n          limits:\n            memory: 170Mi\n          requests:\n            cpu: 100m\n            memory: 70Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            add:\n            - NET_BIND_SERVICE\n            drop:\n            - all\n          readOnlyRootFilesystem: true\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /etc/coredns\n          name: config-volume\n          readOnly: true\n      dnsPolicy: Default\n      priorityClassName: system-node-critical\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext: {}\n      serviceAccount: coredns\n      serviceAccountName: coredns\n      terminationGracePeriodSeconds: 30\n      tolerations:\n      - effect: NoSchedule\n        key: node-role.kubernetes.io/master\n      - key: CriticalAddonsOnly\n        operator: Exists\n      volumes:\n      - configMap:\n          defaultMode: 420\n          items:\n          - key: Corefile\n            path: Corefile\n          name: coredns\n        name: config-volume"
            ],
            "id": "b32aab7baee008b468ace48ad749c0fba0a96393b3db6f4672eacd7a68d7b8d2",
            "pattern": ".terraform/modules/eks/cluster_configs/dns.tpl.yaml",
            "vars": {
              "cni": "aws"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "metrics_server_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:aggregated-metrics-reader\n  labels:\n    rbac.authorization.k8s.io/aggregate-to-view: \"true\"\n    rbac.authorization.k8s.io/aggregate-to-edit: \"true\"\n    rbac.authorization.k8s.io/aggregate-to-admin: \"true\"\nrules:\n- apiGroups: [\"metrics.k8s.io\"]\n  resources: [\"pods\", \"nodes\"]\n  verbs: [\"get\", \"list\", \"watch\"]",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: metrics-server:system:auth-delegator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system",
              "apiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1beta1.metrics.k8s.io\nspec:\n  service:\n    name: metrics-server\n    namespace: kube-system\n  group: metrics.k8s.io\n  version: v1beta1\n  insecureSkipTLSVerify: true\n  groupPriorityMinimum: 100\n  versionPriority: 100",
              "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system",
              "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    k8s-app: metrics-server\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n  template:\n    metadata:\n      name: metrics-server\n      labels:\n        k8s-app: metrics-server\n      annotations:\n        cni: \"aws\"\n    spec:\n      serviceAccountName: metrics-server\n      volumes:\n      # mount in tmp so we can safely use from-scratch images and/or read-only containers\n      - name: tmp-dir\n        emptyDir: {}\n      containers:\n      - name: metrics-server\n        image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7\n        imagePullPolicy: IfNotPresent\n        args:\n          - --cert-dir=/tmp\n          - --secure-port=4443\n        ports:\n        - name: main-port\n          containerPort: 4443\n          protocol: TCP\n        securityContext:\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1000\n        volumeMounts:\n        - name: tmp-dir\n          mountPath: /tmp\n      nodeSelector:\n        kubernetes.io/os: linux\n        kubernetes.io/arch: \"amd64\"",
              "apiVersion: v1\nkind: Service\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    kubernetes.io/name: \"Metrics-server\"\n    kubernetes.io/cluster-service: \"true\"\nspec:\n  selector:\n    k8s-app: metrics-server\n  ports:\n  - port: 443\n    protocol: TCP\n    targetPort: main-port",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:metrics-server\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  - configmaps\n  verbs:\n  - get\n  - list\n  - watch",
              "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:metrics-server\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system"
            ],
            "id": "15ddcddd3ce190e9e9c13677578a3bd1e0653a259f416985f80df304a8a9c222",
            "pattern": ".terraform/modules/eks/cluster_configs/metrics-server.tpl.yaml",
            "vars": {
              "cni": "aws"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "sealed_secrets_controller_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system",
              "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      name: sealed-secrets-controller\n  template:\n    metadata:\n      labels:\n        name: sealed-secrets-controller\n      annotations:\n        cni: \"aws\"\n    spec:\n      containers:\n      - command:\n        - controller\n        image: quay.io/bitnami/sealed-secrets-controller:v0.7.0\n        livenessProbe:\n          httpGet:\n            path: /healthz\n            port: 8080\n        name: sealed-secrets-controller\n        ports:\n        - containerPort: 8080\n          name: http\n        readinessProbe:\n          httpGet:\n            path: /healthz\n            port: 8080\n        securityContext:\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1001\n      serviceAccountName: sealed-secrets-controller",
              "apiVersion: v1\nkind: Service\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nspec:\n  ports:\n  - port: 8080\n  selector:\n    name: sealed-secrets-controller",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: RoleBinding\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: sealed-secrets-key-admin\nsubjects:\n- apiGroup: \"\"\n  kind: ServiceAccount\n  name: sealed-secrets-controller\n  namespace: kube-system",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: Role\nmetadata:\n  name: sealed-secrets-key-admin\n  namespace: kube-system\nrules:\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - sealed-secrets-key\n  resources:\n  - secrets\n  verbs:\n  - get\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  verbs:\n  - create",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: sealed-secrets-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: secrets-unsealer\nsubjects:\n- apiGroup: \"\"\n  kind: ServiceAccount\n  name: sealed-secrets-controller\n  namespace: kube-system",
              "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: secrets-unsealer\nrules:\n- apiGroups:\n  - bitnami.com\n  resources:\n  - sealedsecrets\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  verbs:\n  - create\n  - update\n  - delete"
            ],
            "id": "992327386b97b7af1dad953ca2e13b7bbfb1a999a38d0f58e847eaa23a7c4694",
            "pattern": ".terraform/modules/eks/cluster_configs/sealed-secrets-controller.tpl.yaml",
            "vars": {
              "cni": "aws"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubectl_path_documents",
      "name": "sealed_secrets_crd_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "disable_template": false,
            "documents": [
              "---\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: sealedsecrets.bitnami.com\nspec:\n  group: bitnami.com\n  names:\n    kind: SealedSecret\n    listKind: SealedSecretList\n    plural: sealedsecrets\n    singular: sealedsecret\n  scope: Namespaced\n  version: v1alpha1"
            ],
            "id": "67e92baedc2f05c6c5f1f4397440318e5d3400fdc99f2dd105b5e135c256f569",
            "pattern": ".terraform/modules/eks/cluster_configs/sealed-secrets-crd.tpl.yaml",
            "vars": null
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "data",
      "type": "kubernetes_secret",
      "name": "dashboard_token",
      "provider": "module.eks.provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "ca.crt": "-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTIxMDMyNjIzMTE0NFoXDTMxMDMyNDIzMTE0NFowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPVj\nq8EbSUMQEVhFz9t+7C7ANAMs8DjrIjS/6maP+d8zCYI+gkNDVSlCUKKJVncNrL4y\n6D8AVyMllWlYWmPkCAyKoQ86U2bd/UGpetteVblqMYvjD+qJUod7iphWMRh4IczM\nlPkHKtEXtPRyolDTRkAx+FHDacEKrvWYcTtkQkfOP2kcnUSGwjenEDME80g91lZY\nNYiYzdDBHHewMbidViy2QhoGe3JpDj9aRWysPFoVG63NZ52jeSaQbMaGx5irSeEw\nkuXUwAkyx6TxLT7jR+ELGNYwrdlO/NkPOmQnRJsCCgX1CtwQEDup8AI9xeb6MeJI\n25dNYXdCKblH1pV53eMCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAC/V/honhHQSWoUU1GLhQB0Sro8g\n6kjyHyfPdJ5oXP7AgHb8ggHXTz77DJTg8nNMbnGFr54VK9bWpuXHy7436xeNbYvV\nVplOdFKMtGLV34zkljkMxxbn2D1eSSYAJx3DgRdGyyUwJjDd1E9TWbSjVJUQVKCv\nOx97f4K+H2UPgtv7y382v0jyYM34HCPP5oj3r+O146nFQ1lUBiytY0wKb0nPh5v9\noi3Zb3dx/mttNW1TT58/xZv4gVG7WwrgWiHVAYPTPluS45Q8dj2wzQtqtuYNw1WT\nyq3chUQcKvUPwNPB75/V9dIC5XSpyQa8x2nqJtImPB8rXEzrrDhaOgRjJ30=\n-----END CERTIFICATE-----\n",
              "namespace": "kube-system",
              "token": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ing1cXJqeUpVSU5qZUpuRnZpWVJCY1dOQndqZXpOZVptTVFkYy1zeVRJdk0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJla3MtYWRtaW4tZGFzaGJvYXJkLXRva2VuIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImVrcy1hZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjgxZGM1MDQxLWVhNTYtNGFhMi1hZDJiLWM0MWFhMDJhNDk5MSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTpla3MtYWRtaW4ifQ.XVecZIxA9h0mXrKfxgmz6GcysVvss-qCmKshw3f4KaDLi_70M-xWh4HrDohGPNVlJwqSjIzyKG3MAHPL9foqZm5LUKDTOyL3jvYsZustPAi23JQ7bdxF1mbgPvc19LVsFqMnxtKrkU3OXyEi1uf9IVsPpg16CKFqBZ-64GK9irOykCYS1IBTzem9bJSl_J5O_GPcFwsVSJqjqoD34_u60p6R01632h9U15d6RFbWxr33ibWSGxXTXvtPON0j3SnwQkGvEgrw8Mr8OsiY66SXJ_Vsc9M2YHcMcyNi7M7jk8AH0Z5-246RBzZNbNDdKFlvugjdTPpn74ve46b_fXb3TQ"
            },
            "id": "kube-system/eks-admin-dashboard-token",
            "metadata": [
              {
                "annotations": {},
                "generation": 0,
                "labels": {},
                "name": "eks-admin-dashboard-token",
                "namespace": "kube-system",
                "resource_version": "956",
                "self_link": "/api/v1/namespaces/kube-system/secrets/eks-admin-dashboard-token",
                "uid": "0f481ef5-2cc4-44f2-ab5d-63dfab35670d"
              }
            ],
            "type": "kubernetes.io/service-account-token"
          }
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "worker_autoscaling",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::599908802495:policy/eks-worker-autoscaling-hello_world2021032623191024510000000b",
            "description": "EKS worker node autoscaling policy for cluster hello_world",
            "id": "arn:aws:iam::599908802495:policy/eks-worker-autoscaling-hello_world2021032623191024510000000b",
            "name": "eks-worker-autoscaling-hello_world2021032623191024510000000b",
            "name_prefix": "eks-worker-autoscaling-hello_world",
            "path": "/",
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"eksWorkerAutoscalingAll\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeLaunchTemplateVersions\",\n        \"autoscaling:DescribeTags\",\n        \"autoscaling:DescribeLaunchConfigurations\",\n        \"autoscaling:DescribeAutoScalingInstances\",\n        \"autoscaling:DescribeAutoScalingGroups\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"eksWorkerAutoscalingOwn\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"autoscaling:UpdateAutoScalingGroup\",\n        \"autoscaling:TerminateInstanceInAutoScalingGroup\",\n        \"autoscaling:SetDesiredCapacity\"\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"autoscaling:ResourceTag/k8s.io/cluster-autoscaler/enabled\": [\n            \"true\"\n          ],\n          \"autoscaling:ResourceTag/kubernetes.io/cluster/hello_world\": [\n            \"owned\"\n          ]\n        }\n      }\n    }\n  ]\n}"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.data.aws_iam_policy_document.worker_autoscaling",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "eks_workers_albs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326231659112400000007:alb_manager",
            "name": "alb_manager",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"acm:DescribeCertificate\",\n              \"acm:ListCertificates\",\n              \"acm:GetCertificate\"\n          ],\n          \"Resource\": \"*\"\n      },\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"ec2:AuthorizeSecurityGroupIngress\",\n              \"ec2:CreateSecurityGroup\",\n              \"ec2:CreateTags\",\n              \"ec2:DeleteTags\",\n              \"ec2:DeleteSecurityGroup\",\n              \"ec2:Describe*\",\n              \"ec2:ModifyInstanceAttribute\",\n              \"ec2:ModifyNetworkInterfaceAttribute\",\n              \"ec2:RevokeSecurityGroupIngress\"\n          ],\n          \"Resource\": \"*\"\n      },\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"elasticloadbalancing:AddTags\",\n              \"elasticloadbalancing:CreateListener\",\n              \"elasticloadbalancing:CreateLoadBalancer\",\n              \"elasticloadbalancing:CreateRule\",\n              \"elasticloadbalancing:CreateTargetGroup\",\n              \"elasticloadbalancing:DeleteListener\",\n              \"elasticloadbalancing:DeleteLoadBalancer\",\n              \"elasticloadbalancing:DeleteRule\",\n              \"elasticloadbalancing:DeleteTargetGroup\",\n              \"elasticloadbalancing:DeregisterTargets\",\n              \"elasticloadbalancing:DescribeListeners\",\n              \"elasticloadbalancing:DescribeListenerCertificates\",\n              \"elasticloadbalancing:DescribeLoadBalancers\",\n              \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n              \"elasticloadbalancing:DescribeRules\",\n              \"elasticloadbalancing:DescribeSSLPolicies\",\n              \"elasticloadbalancing:DescribeTags\",\n              \"elasticloadbalancing:DescribeTargetGroups\",\n              \"elasticloadbalancing:DescribeTargetGroupAttributes\",\n              \"elasticloadbalancing:DescribeTargetHealth\",\n              \"elasticloadbalancing:ModifyListener\",\n              \"elasticloadbalancing:ModifyLoadBalancerAttributes\",\n              \"elasticloadbalancing:ModifyRule\",\n              \"elasticloadbalancing:ModifyTargetGroup\",\n              \"elasticloadbalancing:ModifyTargetGroupAttributes\",\n              \"elasticloadbalancing:RegisterTargets\",\n              \"elasticloadbalancing:RemoveTags\",\n              \"elasticloadbalancing:SetIpAddressType\",\n              \"elasticloadbalancing:SetSecurityGroups\",\n              \"elasticloadbalancing:SetSubnets\",\n              \"elasticloadbalancing:SetWebACL\"\n          ],\n          \"Resource\": \"*\"\n      },\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"iam:GetServerCertificate\",\n              \"iam:ListServerCertificates\",\n              \"iam:CreateServiceLinkedRole\",\n              \"iam:AttachRolePolicy\",\n              \"iam:PutRolePolicy\"\n          ],\n          \"Resource\": \"*\"\n      },\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"waf-regional:GetWebACLForResource\",\n              \"waf-regional:GetWebACL\",\n              \"waf-regional:AssociateWebACL\",\n              \"waf-regional:DisassociateWebACL\"\n          ],\n          \"Resource\": \"*\"\n      },\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"tag:GetResources\",\n              \"tag:TagResources\"\n          ],\n          \"Resource\": \"*\"\n      },\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"waf:GetWebACL\"\n          ],\n          \"Resource\": \"*\"\n      }\n  ]\n}\n",
            "role": "hello_world20210326231659112400000007"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "eks_workers_route53",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326231659112400000007:route53_manager",
            "name": "route53_manager",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"route53:ChangeResourceRecordSets\"\n          ],\n          \"Resource\": [\n              \"arn:aws:route53:::hostedzone/*\"\n          ]\n      },\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"route53:ListHostedZones\",\n              \"route53:ListResourceRecordSets\"\n          ],\n          \"Resource\": [\n              \"*\"\n          ]\n      }\n  ]\n}",
            "role": "hello_world20210326231659112400000007"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "AmazonEC2RoleForSSM",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326231659112400000007-2021032623193745490000000e",
            "policy_arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
            "role": "hello_world20210326231659112400000007"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "workers_autoscaling",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326231659112400000007-2021032623193745480000000d",
            "policy_arn": "arn:aws:iam::599908802495:policy/eks-worker-autoscaling-hello_world2021032623191024510000000b",
            "role": "hello_world20210326231659112400000007"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.aws_iam_policy.worker_autoscaling",
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.aws_iam_policy_document.worker_autoscaling",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "allow_all",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "10.0.0.0/8"
            ],
            "description": null,
            "from_port": 22,
            "id": "sgrule-3970876924",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-068e58fa196cf0ab0",
            "self": false,
            "source_security_group_id": null,
            "to_port": 22,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "manged_to_non_managed",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 0,
            "id": "sgrule-3520791298",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "-1",
            "security_group_id": "sg-068e58fa196cf0ab0",
            "self": false,
            "source_security_group_id": "sg-009611a579a5d7fe2",
            "to_port": 65535,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "non_manged_to_managed",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 0,
            "id": "sgrule-1057841277",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "-1",
            "security_group_id": "sg-009611a579a5d7fe2",
            "self": false,
            "source_security_group_id": "sg-068e58fa196cf0ab0",
            "to_port": 65535,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "admin_service_account_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/eks-admin",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:eks-adminfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "949",
            "live_uid": "81dc5041-ea56-4aa2-ad2b-c41aa02a4991",
            "name": "eks-admin",
            "namespace": "kube-system",
            "resource_version": "949",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "81dc5041-ea56-4aa2-ad2b-c41aa02a4991",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: eks-admin\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: eks-admin\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:eks-adminfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.admin_service_account_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/eks-admin",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:cluster-adminfieldName:name,fieldValue:eks-adminfieldName:name,fieldValue:eks-adminfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "961",
            "live_uid": "fa0c18b8-7c4b-479e-8efb-d606c1eec969",
            "name": "eks-admin",
            "namespace": null,
            "resource_version": "961",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "fa0c18b8-7c4b-479e-8efb-d606c1eec969",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: eks-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: eks-admin\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: eks-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: eks-admin\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:cluster-adminfieldName:name,fieldValue:eks-adminfieldName:name,fieldValue:eks-adminfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.admin_service_account_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/secrets/eks-admin-dashboard-token",
            "ignore_fields": null,
            "kind": "Secret",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:SecretfieldName:kubernetes.io/service-account.name,fieldValue:eks-adminfieldName:name,fieldValue:eks-admin-dashboard-tokenfieldName:namespace,fieldValue:kube-systemfieldName:type,fieldValue:kubernetes.io/service-account-token",
            "live_resource_version": "956",
            "live_uid": "0f481ef5-2cc4-44f2-ab5d-63dfab35670d",
            "name": "eks-admin-dashboard-token",
            "namespace": "kube-system",
            "resource_version": "956",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "0f481ef5-2cc4-44f2-ab5d-63dfab35670d",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: eks-admin-dashboard-token\n  namespace: kube-system\n  annotations:\n    kubernetes.io/service-account.name: \"eks-admin\"\ntype: kubernetes.io/service-account-token",
            "yaml_body_parsed": "apiVersion: v1\ndata: (sensitive value)\nkind: Secret\nmetadata:\n  annotations:\n    kubernetes.io/service-account.name: eks-admin\n  name: eks-admin-dashboard-token\n  namespace: kube-system\ntype: kubernetes.io/service-account-token\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:SecretfieldName:kubernetes.io/service-account.name,fieldValue:eks-adminfieldName:name,fieldValue:eks-admin-dashboard-tokenfieldName:namespace,fieldValue:kube-systemfieldName:type,fieldValue:kubernetes.io/service-account-token"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.admin_service_account_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "alb_ingress_controller_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kube-system/deployments/alb-ingress-controller",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:app,fieldValue:alb-ingress-controllerfieldName:app,fieldValue:alb-ingress-controllerfieldName:app,fieldValue:alb-ingress-controllerfieldName:args[0],fieldValue:--ingress-class=albfieldName:args[1],fieldValue:--cluster-name=prodfieldName:args[2],fieldValue:--alb-name-prefix=\"k8s\"fieldName:dnsPolicy,fieldValue:ClusterFirstfieldName:image,fieldValue:docker.io/m00nf1sh/aws-alb-ingress-controller:v1.2.0-alpha.2fieldName:imagePullPolicy,fieldValue:AlwaysfieldName:kind,fieldValue:DeploymentfieldName:maxSurge,fieldValue:1fieldName:maxUnavailable,fieldValue:1fieldName:name,fieldValue:alb-ingress-controllerfieldName:name,fieldValue:serverfieldName:namespace,fieldValue:kube-systemfieldName:replicas,fieldValue:1fieldName:restartPolicy,fieldValue:AlwaysfieldName:serviceAccount,fieldValue:alb-ingressfieldName:serviceAccountName,fieldValue:alb-ingressfieldName:terminationGracePeriodSeconds,fieldValue:30fieldName:terminationMessagePath,fieldValue:/dev/termination-logfieldName:type,fieldValue:RollingUpdate",
            "live_resource_version": "932",
            "live_uid": "674315dd-8bb0-4d85-b645-1a2109b5e719",
            "name": "alb-ingress-controller",
            "namespace": "kube-system",
            "resource_version": "932",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "674315dd-8bb0-4d85-b645-1a2109b5e719",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Application Load Balancer (ALB) Ingress Controller Deployment Manifest.\n# This manifest details sensible defaults for deploying an ALB Ingress Controller.\n# GitHub: https://github.com/kubernetes-sigs/aws-alb-ingress-controller\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\n  # Namespace the ALB Ingress Controller should run in. Does not impact which\n  # namespaces it's able to resolve ingress resource for. For limiting ingress\n  # namespace scope, see --watch-namespace.\n  namespace: kube-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: alb-ingress-controller\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: alb-ingress-controller\n    spec:\n      containers:\n        - args:\n            # Limit the namespace where this ALB Ingress Controller deployment will\n            # resolve ingress resources. If left commented, all namespaces are used.\n            # - --watch-namespace=your-k8s-namespace\n\n            # Setting the ingress-class flag below ensures that only ingress resources with the\n            # annotation kubernetes.io/ingress.class: \"alb\" are respected by the controller. You may\n            # choose any class you'd like for this controller to respect.\n            - --ingress-class=alb\n\n            # Name of your cluster. Used when naming resources created\n            # by the ALB Ingress Controller, providing distinction between\n            # clusters.\n            - --cluster-name=prod\n\n            # AWS VPC ID this ingress controller will use to create AWS resources.\n            # If unspecified, it will be discovered from ec2metadata.\n            # - --aws-vpc-id=vpc-xxxxxx\n\n            # AWS region this ingress controller will operate in.\n            # If unspecified, it will be discovered from ec2metadata.\n            # List of regions: http://docs.aws.amazon.com/general/latest/gr/rande.html#vpc_region\n            # - --aws-region=us-west-1\n\n            # Enables logging on all outbound requests sent to the AWS API.\n            # If logging is desired, set to true.\n            # - ---aws-api-debug\n            # Maximum number of times to retry the aws calls.\n            # defaults to 10.\n            # - --aws-max-retries=10\n            - --alb-name-prefix=\"k8s\"\n          env:\n            # AWS key id for authenticating with the AWS API.\n            # This is only here for examples. It's recommended you instead use\n            # a project like kube2iam for granting access.\n            #- name: AWS_ACCESS_KEY_ID\n            #  value: KEYVALUE\n\n            # AWS key secret for authenticating with the AWS API.\n            # This is only here for examples. It's recommended you instead use\n            # a project like kube2iam for granting access.\n            #- name: AWS_SECRET_ACCESS_KEY\n            #  value: SECRETVALUE\n          # Repository location of the ALB Ingress Controller.\n          image: docker.io/m00nf1sh/aws-alb-ingress-controller:v1.2.0-alpha.2\n          imagePullPolicy: Always\n          name: server\n          resources: {}\n          terminationMessagePath: /dev/termination-log\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      securityContext: {}\n      terminationGracePeriodSeconds: 30\n      serviceAccountName: alb-ingress\n      serviceAccount: alb-ingress",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\n  namespace: kube-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: alb-ingress-controller\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: alb-ingress-controller\n    spec:\n      containers:\n      - args:\n        - --ingress-class=alb\n        - --cluster-name=prod\n        - --alb-name-prefix=\"k8s\"\n        env: null\n        image: docker.io/m00nf1sh/aws-alb-ingress-controller:v1.2.0-alpha.2\n        imagePullPolicy: Always\n        name: server\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      securityContext: {}\n      serviceAccount: alb-ingress\n      serviceAccountName: alb-ingress\n      terminationGracePeriodSeconds: 30\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:app,fieldValue:alb-ingress-controllerfieldName:app,fieldValue:alb-ingress-controllerfieldName:app,fieldValue:alb-ingress-controllerfieldName:args[0],fieldValue:--ingress-class=albfieldName:args[1],fieldValue:--cluster-name=prodfieldName:args[2],fieldValue:--alb-name-prefix=\"k8s\"fieldName:dnsPolicy,fieldValue:ClusterFirstfieldName:image,fieldValue:docker.io/m00nf1sh/aws-alb-ingress-controller:v1.2.0-alpha.2fieldName:imagePullPolicy,fieldValue:AlwaysfieldName:kind,fieldValue:DeploymentfieldName:maxSurge,fieldValue:1fieldName:maxUnavailable,fieldValue:1fieldName:name,fieldValue:alb-ingress-controllerfieldName:name,fieldValue:serverfieldName:namespace,fieldValue:kube-systemfieldName:replicas,fieldValue:1fieldName:restartPolicy,fieldValue:AlwaysfieldName:serviceAccount,fieldValue:alb-ingressfieldName:serviceAccountName,fieldValue:alb-ingressfieldName:terminationGracePeriodSeconds,fieldValue:30fieldName:terminationMessagePath,fieldValue:/dev/termination-logfieldName:type,fieldValue:RollingUpdate"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.alb_ingress_controller_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "alb_ingress_controller_role_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterroles/alb-ingress-controller",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[1],fieldValue:extensionsfieldName:apiGroups[1],fieldValue:extensionsfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:app,fieldValue:alb-ingress-controllerfieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:alb-ingress-controllerfieldName:resources[0],fieldValue:configmapsfieldName:resources[0],fieldValue:nodesfieldName:resources[1],fieldValue:endpointsfieldName:resources[1],fieldValue:podsfieldName:resources[2],fieldValue:eventsfieldName:resources[2],fieldValue:secretsfieldName:resources[3],fieldValue:ingressesfieldName:resources[3],fieldValue:servicesfieldName:resources[4],fieldValue:ingresses/statusfieldName:resources[4],fieldValue:namespacesfieldName:resources[5],fieldValue:servicesfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:listfieldName:verbs[2],fieldValue:watchfieldName:verbs[3],fieldValue:updatefieldName:verbs[4],fieldValue:watchfieldName:verbs[5],fieldValue:patch",
            "live_resource_version": "896",
            "live_uid": "6dd2ed01-c767-4588-bddd-433349fee003",
            "name": "alb-ingress-controller",
            "namespace": null,
            "resource_version": "896",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "6dd2ed01-c767-4588-bddd-433349fee003",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\nrules:\n  - apiGroups:\n      - \"\"\n      - extensions\n    resources:\n      - configmaps\n      - endpoints\n      - events\n      - ingresses\n      - ingresses/status\n      - services\n    verbs:\n      - create\n      - get\n      - list\n      - update\n      - watch\n      - patch\n  - apiGroups:\n      - \"\"\n      - extensions\n    resources:\n      - nodes\n      - pods\n      - secrets\n      - services\n      - namespaces\n    verbs:\n      - get\n      - list\n      - watch",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\nrules:\n- apiGroups:\n  - \"\"\n  - extensions\n  resources:\n  - configmaps\n  - endpoints\n  - events\n  - ingresses\n  - ingresses/status\n  - services\n  verbs:\n  - create\n  - get\n  - list\n  - update\n  - watch\n  - patch\n- apiGroups:\n  - \"\"\n  - extensions\n  resources:\n  - nodes\n  - pods\n  - secrets\n  - services\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[1],fieldValue:extensionsfieldName:apiGroups[1],fieldValue:extensionsfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:app,fieldValue:alb-ingress-controllerfieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:alb-ingress-controllerfieldName:resources[0],fieldValue:configmapsfieldName:resources[0],fieldValue:nodesfieldName:resources[1],fieldValue:endpointsfieldName:resources[1],fieldValue:podsfieldName:resources[2],fieldValue:eventsfieldName:resources[2],fieldValue:secretsfieldName:resources[3],fieldValue:ingressesfieldName:resources[3],fieldValue:servicesfieldName:resources[4],fieldValue:ingresses/statusfieldName:resources[4],fieldValue:namespacesfieldName:resources[5],fieldValue:servicesfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:listfieldName:verbs[2],fieldValue:watchfieldName:verbs[3],fieldValue:updatefieldName:verbs[4],fieldValue:watchfieldName:verbs[5],fieldValue:patch"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.alb_ingress_controller_role_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/alb-ingress-controller",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:app,fieldValue:alb-ingress-controllerfieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:alb-ingressfieldName:name,fieldValue:alb-ingress-controllerfieldName:name,fieldValue:alb-ingress-controllerfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "894",
            "live_uid": "8d8083a7-bc50-45da-8e9e-424bcce4208d",
            "name": "alb-ingress-controller",
            "namespace": null,
            "resource_version": "894",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "8d8083a7-bc50-45da-8e9e-424bcce4208d",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: alb-ingress-controller\nsubjects:\n  - kind: ServiceAccount\n    name: alb-ingress\n    namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: alb-ingress-controller\nsubjects:\n- kind: ServiceAccount\n  name: alb-ingress\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:app,fieldValue:alb-ingress-controllerfieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:alb-ingressfieldName:name,fieldValue:alb-ingress-controllerfieldName:name,fieldValue:alb-ingress-controllerfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.alb_ingress_controller_role_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/alb-ingress",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:app,fieldValue:alb-ingress-controllerfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:alb-ingressfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "904",
            "live_uid": "82c97191-a090-4b5c-b3bd-b985b6905ebc",
            "name": "alb-ingress",
            "namespace": "kube-system",
            "resource_version": "904",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "82c97191-a090-4b5c-b3bd-b985b6905ebc",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: alb-ingress-controller\n  name: alb-ingress\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:app,fieldValue:alb-ingress-controllerfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:alb-ingressfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.alb_ingress_controller_role_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "aws_cni_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": true,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterroles/aws-node",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:crd.k8s.amazonaws.comfieldName:apiGroups[0],fieldValue:extensionsfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:aws-nodefieldName:resources[0],fieldValue:*fieldName:resources[0],fieldValue:daemonsetsfieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:nodesfieldName:resources[2],fieldValue:namespacesfieldName:verbs[0],fieldValue:*fieldName:verbs[0],fieldValue:listfieldName:verbs[0],fieldValue:listfieldName:verbs[1],fieldValue:watchfieldName:verbs[1],fieldValue:watchfieldName:verbs[2],fieldValue:get",
            "live_resource_version": "1205",
            "live_uid": "4a157e8f-2bd8-46fd-bcfc-75a5f551a939",
            "name": "aws-node",
            "namespace": null,
            "resource_version": "1205",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "4a157e8f-2bd8-46fd-bcfc-75a5f551a939",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: aws-node\nrules:\n  - apiGroups:\n      - crd.k8s.amazonaws.com\n    resources:\n      - \"*\"\n    verbs:\n      - \"*\"\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n      - nodes\n      - namespaces\n    verbs: [\"list\", \"watch\", \"get\"]\n  - apiGroups: [\"extensions\"]\n    resources:\n      - daemonsets\n    verbs: [\"list\", \"watch\"]",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: aws-node\nrules:\n- apiGroups:\n  - crd.k8s.amazonaws.com\n  resources:\n  - '*'\n  verbs:\n  - '*'\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - namespaces\n  verbs:\n  - list\n  - watch\n  - get\n- apiGroups:\n  - extensions\n  resources:\n  - daemonsets\n  verbs:\n  - list\n  - watch\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:crd.k8s.amazonaws.comfieldName:apiGroups[0],fieldValue:extensionsfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:aws-nodefieldName:resources[0],fieldValue:*fieldName:resources[0],fieldValue:daemonsetsfieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:nodesfieldName:resources[2],fieldValue:namespacesfieldName:verbs[0],fieldValue:*fieldName:verbs[0],fieldValue:listfieldName:verbs[0],fieldValue:listfieldName:verbs[1],fieldValue:watchfieldName:verbs[1],fieldValue:watchfieldName:verbs[2],fieldValue:get"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": true,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/aws-node",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:aws-nodefieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "220",
            "live_uid": "39e3d23f-6e12-4813-97d4-14a0eb2d05c9",
            "name": "aws-node",
            "namespace": "kube-system",
            "resource_version": "220",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "39e3d23f-6e12-4813-97d4-14a0eb2d05c9",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: aws-node\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: aws-node\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:aws-nodefieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": true,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/aws-node",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:aws-nodefieldName:name,fieldValue:aws-nodefieldName:name,fieldValue:aws-nodefieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "155",
            "live_uid": "2623d8cc-6da2-45fd-a674-aea88f977136",
            "name": "aws-node",
            "namespace": null,
            "resource_version": "155",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "2623d8cc-6da2-45fd-a674-aea88f977136",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: aws-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: aws-node\nsubjects:\n  - kind: ServiceAccount\n    name: aws-node\n    namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: aws-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: aws-node\nsubjects:\n- kind: ServiceAccount\n  name: aws-node\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:aws-nodefieldName:name,fieldValue:aws-nodefieldName:name,fieldValue:aws-nodefieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": true,
            "id": "/apis/apps/v1/namespaces/kube-system/daemonsets/aws-node",
            "ignore_fields": null,
            "kind": "DaemonSet",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:command[0],fieldValue:/app/grpc-health-probefieldName:command[0],fieldValue:/app/grpc-health-probefieldName:command[1],fieldValue:-addr=:50051fieldName:command[1],fieldValue:-addr=:50051fieldName:containerPort,fieldValue:61678fieldName:cpu,fieldValue:10mfieldName:fieldPath,fieldValue:spec.nodeNamefieldName:hostNetwork,fieldValue:truefieldName:image,fieldValue:602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.6.3fieldName:imagePullPolicy,fieldValue:AlwaysfieldName:initialDelaySeconds,fieldValue:35fieldName:initialDelaySeconds,fieldValue:35fieldName:k8s-app,fieldValue:aws-nodefieldName:k8s-app,fieldValue:aws-nodefieldName:k8s-app,fieldValue:aws-nodefieldName:key,fieldValue:beta.kubernetes.io/archfieldName:key,fieldValue:beta.kubernetes.io/osfieldName:key,fieldValue:eks.amazonaws.com/compute-typefieldName:key,fieldValue:eks.amazonaws.com/compute-typefieldName:key,fieldValue:kubernetes.io/archfieldName:key,fieldValue:kubernetes.io/osfieldName:kind,fieldValue:DaemonSetfieldName:maxUnavailable,fieldValue:10%fieldName:mountPath,fieldValue:/host/etc/cni/net.dfieldName:mountPath,fieldValue:/host/opt/cni/binfieldName:mountPath,fieldValue:/host/var/logfieldName:mountPath,fieldValue:/var/run/docker.sockfieldName:mountPath,fieldValue:/var/run/dockershim.sockfieldName:name,fieldValue:AWS_VPC_ENI_MTUfieldName:name,fieldValue:AWS_VPC_K8S_CNI_EXCLUDE_SNAT_CIDRSfieldName:name,fieldValue:AWS_VPC_K8S_CNI_EXTERNALSNATfieldName:name,fieldValue:AWS_VPC_K8S_CNI_LOGLEVELfieldName:name,fieldValue:AWS_VPC_K8S_CNI_VETHPREFIXfieldName:name,fieldValue:MY_NODE_NAMEfieldName:name,fieldValue:aws-nodefieldName:name,fieldValue:aws-nodefieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:dockershimfieldName:name,fieldValue:dockershimfieldName:name,fieldValue:dockersockfieldName:name,fieldValue:dockersockfieldName:name,fieldValue:log-dirfieldName:name,fieldValue:log-dirfieldName:name,fieldValue:metricsfieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:operator,fieldValue:NotInfieldName:operator,fieldValue:NotInfieldName:path,fieldValue:/etc/cni/net.dfieldName:path,fieldValue:/opt/cni/binfieldName:path,fieldValue:/var/logfieldName:path,fieldValue:/var/run/docker.sockfieldName:path,fieldValue:/var/run/dockershim.sockfieldName:priorityClassName,fieldValue:system-node-criticalfieldName:privileged,fieldValue:truefieldName:serviceAccountName,fieldValue:aws-nodefieldName:type,fieldValue:RollingUpdatefieldName:value,fieldValue:192.168.0.0/16fieldName:value,fieldValue:9001fieldName:value,fieldValue:DEBUGfieldName:value,fieldValue:enifieldName:value,fieldValue:truefieldName:values[0],fieldValue:amd64fieldName:values[0],fieldValue:amd64fieldName:values[0],fieldValue:fargatefieldName:values[0],fieldValue:fargatefieldName:values[0],fieldValue:linuxfieldName:values[0],fieldValue:linux",
            "live_resource_version": "1208",
            "live_uid": "a712d45d-d97c-4aa4-ab9f-6c5e34cb5e00",
            "name": "aws-node",
            "namespace": "kube-system",
            "resource_version": "1208",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "a712d45d-d97c-4aa4-ab9f-6c5e34cb5e00",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: DaemonSet\napiVersion: apps/v1\nmetadata:\n  name: aws-node\n  namespace: kube-system\n  labels:\n    k8s-app: aws-node\nspec:\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: \"10%\"\n  selector:\n    matchLabels:\n      k8s-app: aws-node\n  template:\n    metadata:\n      labels:\n        k8s-app: aws-node\n    spec:\n      priorityClassName: system-node-critical\n      \n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                  - key: \"beta.kubernetes.io/os\"\n                    operator: In\n                    values:\n                      - linux\n                  - key: \"beta.kubernetes.io/arch\"\n                    operator: In\n                    values:\n                      - amd64\n                  - key: \"eks.amazonaws.com/compute-type\"\n                    operator: NotIn\n                    values:\n                      - fargate\n              - matchExpressions:\n                  - key: \"kubernetes.io/os\"\n                    operator: In\n                    values:\n                      - linux\n                  - key: \"kubernetes.io/arch\"\n                    operator: In\n                    values:\n                      - amd64\n                  - key: \"eks.amazonaws.com/compute-type\"\n                    operator: NotIn\n                    values:\n                      - fargate\n      serviceAccountName: aws-node\n      hostNetwork: true\n      tolerations:\n        - operator: Exists\n      containers:\n        - image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.6.3\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 61678\n              name: metrics\n          name: aws-node\n          readinessProbe:\n            exec:\n              command: [\"/app/grpc-health-probe\", \"-addr=:50051\"]\n            initialDelaySeconds: 35\n          livenessProbe:\n            exec:\n              command: [\"/app/grpc-health-probe\", \"-addr=:50051\"]\n            initialDelaySeconds: 35\n          env:\n            - name: AWS_VPC_K8S_CNI_LOGLEVEL\n              value: DEBUG\n            - name: AWS_VPC_K8S_CNI_VETHPREFIX\n              value: eni\n            - name: AWS_VPC_ENI_MTU\n              value: \"9001\"\n            - name: MY_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            - name: AWS_VPC_K8S_CNI_EXCLUDE_SNAT_CIDRS\n              value: \"192.168.0.0/16\"\n            - name: AWS_VPC_K8S_CNI_EXTERNALSNAT\n              value: \"true\"\n          resources:\n            requests:\n              cpu: 10m\n          securityContext:\n            privileged: true\n          volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n            - mountPath: /host/var/log\n              name: log-dir\n            - mountPath: /var/run/docker.sock\n              name: dockersock\n            - mountPath: /var/run/dockershim.sock\n              name: dockershim\n      volumes:\n        - name: cni-bin-dir\n          hostPath:\n            path: /opt/cni/bin\n        - name: cni-net-dir\n          hostPath:\n            path: /etc/cni/net.d\n        - name: log-dir\n          hostPath:\n            path: /var/log\n        - name: dockersock\n          hostPath:\n            path: /var/run/docker.sock\n        - name: dockershim\n          hostPath:\n            path: /var/run/dockershim.sock",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    k8s-app: aws-node\n  name: aws-node\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      k8s-app: aws-node\n  template:\n    metadata:\n      labels:\n        k8s-app: aws-node\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: beta.kubernetes.io/os\n                operator: In\n                values:\n                - linux\n              - key: beta.kubernetes.io/arch\n                operator: In\n                values:\n                - amd64\n              - key: eks.amazonaws.com/compute-type\n                operator: NotIn\n                values:\n                - fargate\n            - matchExpressions:\n              - key: kubernetes.io/os\n                operator: In\n                values:\n                - linux\n              - key: kubernetes.io/arch\n                operator: In\n                values:\n                - amd64\n              - key: eks.amazonaws.com/compute-type\n                operator: NotIn\n                values:\n                - fargate\n      containers:\n      - env:\n        - name: AWS_VPC_K8S_CNI_LOGLEVEL\n          value: DEBUG\n        - name: AWS_VPC_K8S_CNI_VETHPREFIX\n          value: eni\n        - name: AWS_VPC_ENI_MTU\n          value: \"9001\"\n        - name: MY_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: AWS_VPC_K8S_CNI_EXCLUDE_SNAT_CIDRS\n          value: 192.168.0.0/16\n        - name: AWS_VPC_K8S_CNI_EXTERNALSNAT\n          value: \"true\"\n        image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.6.3\n        imagePullPolicy: Always\n        livenessProbe:\n          exec:\n            command:\n            - /app/grpc-health-probe\n            - -addr=:50051\n          initialDelaySeconds: 35\n        name: aws-node\n        ports:\n        - containerPort: 61678\n          name: metrics\n        readinessProbe:\n          exec:\n            command:\n            - /app/grpc-health-probe\n            - -addr=:50051\n          initialDelaySeconds: 35\n        resources:\n          requests:\n            cpu: 10m\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - mountPath: /host/opt/cni/bin\n          name: cni-bin-dir\n        - mountPath: /host/etc/cni/net.d\n          name: cni-net-dir\n        - mountPath: /host/var/log\n          name: log-dir\n        - mountPath: /var/run/docker.sock\n          name: dockersock\n        - mountPath: /var/run/dockershim.sock\n          name: dockershim\n      hostNetwork: true\n      priorityClassName: system-node-critical\n      serviceAccountName: aws-node\n      tolerations:\n      - operator: Exists\n      volumes:\n      - hostPath:\n          path: /opt/cni/bin\n        name: cni-bin-dir\n      - hostPath:\n          path: /etc/cni/net.d\n        name: cni-net-dir\n      - hostPath:\n          path: /var/log\n        name: log-dir\n      - hostPath:\n          path: /var/run/docker.sock\n        name: dockersock\n      - hostPath:\n          path: /var/run/dockershim.sock\n        name: dockershim\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 10%\n    type: RollingUpdate\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:command[0],fieldValue:/app/grpc-health-probefieldName:command[0],fieldValue:/app/grpc-health-probefieldName:command[1],fieldValue:-addr=:50051fieldName:command[1],fieldValue:-addr=:50051fieldName:containerPort,fieldValue:61678fieldName:cpu,fieldValue:10mfieldName:fieldPath,fieldValue:spec.nodeNamefieldName:hostNetwork,fieldValue:truefieldName:image,fieldValue:602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.6.3fieldName:imagePullPolicy,fieldValue:AlwaysfieldName:initialDelaySeconds,fieldValue:35fieldName:initialDelaySeconds,fieldValue:35fieldName:k8s-app,fieldValue:aws-nodefieldName:k8s-app,fieldValue:aws-nodefieldName:k8s-app,fieldValue:aws-nodefieldName:key,fieldValue:beta.kubernetes.io/archfieldName:key,fieldValue:beta.kubernetes.io/osfieldName:key,fieldValue:eks.amazonaws.com/compute-typefieldName:key,fieldValue:eks.amazonaws.com/compute-typefieldName:key,fieldValue:kubernetes.io/archfieldName:key,fieldValue:kubernetes.io/osfieldName:kind,fieldValue:DaemonSetfieldName:maxUnavailable,fieldValue:10%fieldName:mountPath,fieldValue:/host/etc/cni/net.dfieldName:mountPath,fieldValue:/host/opt/cni/binfieldName:mountPath,fieldValue:/host/var/logfieldName:mountPath,fieldValue:/var/run/docker.sockfieldName:mountPath,fieldValue:/var/run/dockershim.sockfieldName:name,fieldValue:AWS_VPC_ENI_MTUfieldName:name,fieldValue:AWS_VPC_K8S_CNI_EXCLUDE_SNAT_CIDRSfieldName:name,fieldValue:AWS_VPC_K8S_CNI_EXTERNALSNATfieldName:name,fieldValue:AWS_VPC_K8S_CNI_LOGLEVELfieldName:name,fieldValue:AWS_VPC_K8S_CNI_VETHPREFIXfieldName:name,fieldValue:MY_NODE_NAMEfieldName:name,fieldValue:aws-nodefieldName:name,fieldValue:aws-nodefieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:dockershimfieldName:name,fieldValue:dockershimfieldName:name,fieldValue:dockersockfieldName:name,fieldValue:dockersockfieldName:name,fieldValue:log-dirfieldName:name,fieldValue:log-dirfieldName:name,fieldValue:metricsfieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:operator,fieldValue:NotInfieldName:operator,fieldValue:NotInfieldName:path,fieldValue:/etc/cni/net.dfieldName:path,fieldValue:/opt/cni/binfieldName:path,fieldValue:/var/logfieldName:path,fieldValue:/var/run/docker.sockfieldName:path,fieldValue:/var/run/dockershim.sockfieldName:priorityClassName,fieldValue:system-node-criticalfieldName:privileged,fieldValue:truefieldName:serviceAccountName,fieldValue:aws-nodefieldName:type,fieldValue:RollingUpdatefieldName:value,fieldValue:192.168.0.0/16fieldName:value,fieldValue:9001fieldName:value,fieldValue:DEBUGfieldName:value,fieldValue:enifieldName:value,fieldValue:truefieldName:values[0],fieldValue:amd64fieldName:values[0],fieldValue:amd64fieldName:values[0],fieldValue:fargatefieldName:values[0],fieldValue:fargatefieldName:values[0],fieldValue:linuxfieldName:values[0],fieldValue:linux"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": true,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/eniconfigs.crd.k8s.amazonaws.com",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.k8s.amazonaws.comfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:ENIConfigfieldName:name,fieldValue:eniconfigs.crd.k8s.amazonaws.comfieldName:name,fieldValue:v1alpha1fieldName:plural,fieldValue:eniconfigsfieldName:scope,fieldValue:ClusterfieldName:served,fieldValue:truefieldName:singular,fieldValue:eniconfigfieldName:storage,fieldValue:true",
            "live_resource_version": "160",
            "live_uid": "c408f5a6-e8f6-4a13-82a1-706c503a5c3b",
            "name": "eniconfigs.crd.k8s.amazonaws.com",
            "namespace": null,
            "resource_version": "160",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "c408f5a6-e8f6-4a13-82a1-706c503a5c3b",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: eniconfigs.crd.k8s.amazonaws.com\nspec:\n  scope: Cluster\n  group: crd.k8s.amazonaws.com\n  versions:\n    - name: v1alpha1\n      served: true\n      storage: true\n  names:\n    plural: eniconfigs\n    singular: eniconfig\n    kind: ENIConfig",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: eniconfigs.crd.k8s.amazonaws.com\nspec:\n  group: crd.k8s.amazonaws.com\n  names:\n    kind: ENIConfig\n    plural: eniconfigs\n    singular: eniconfig\n  scope: Cluster\n  versions:\n  - name: v1alpha1\n    served: true\n    storage: true\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.k8s.amazonaws.comfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:ENIConfigfieldName:name,fieldValue:eniconfigs.crd.k8s.amazonaws.comfieldName:name,fieldValue:v1alpha1fieldName:plural,fieldValue:eniconfigsfieldName:scope,fieldValue:ClusterfieldName:served,fieldValue:truefieldName:singular,fieldValue:eniconfigfieldName:storage,fieldValue:true"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "calico_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/configmaps/calico-config",
            "ignore_fields": null,
            "kind": "ConfigMap",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:calico_backend,fieldValue:birdfieldName:cni_network_config,fieldValue:{\n  \"name\": \"k8s-pod-network\",\n  \"cniVersion\": \"0.3.1\",\n  \"plugins\": [\n    {\n      \"type\": \"calico\",\n      \"log_level\": \"info\",\n      \"datastore_type\": \"kubernetes\",\n      \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n      \"mtu\": __CNI_MTU__,\n      \"ipam\": {\n          \"type\": \"calico-ipam\"\n      },\n      \"policy\": {\n          \"type\": \"k8s\"\n      },\n      \"kubernetes\": {\n          \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"snat\": true,\n      \"capabilities\": {\"portMappings\": true}\n    }\n  ]\n}fieldName:kind,fieldValue:ConfigMapfieldName:name,fieldValue:calico-configfieldName:namespace,fieldValue:kube-systemfieldName:typha_service_name,fieldValue:nonefieldName:veth_mtu,fieldValue:1440",
            "live_resource_version": "1191",
            "live_uid": "caabfc04-ba86-4a13-a6cf-cfe4ea8bdb00",
            "name": "calico-config",
            "namespace": "kube-system",
            "resource_version": "1191",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "caabfc04-ba86-4a13-a6cf-cfe4ea8bdb00",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "---\n# Source: calico/templates/calico-config.yaml\n# This ConfigMap is used to configure a self-hosted Calico installation.\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: calico-config\n  namespace: kube-system\ndata:\n  # Typha is disabled.\n  typha_service_name: \"none\"\n  # Configure the backend to use.\n  calico_backend: \"bird\"\n\n  # Configure the MTU to use\n  veth_mtu: \"1440\"\n\n  # The CNI network configuration to install on each node.  The special\n  # values in this config will be automatically populated.\n  cni_network_config: |-\n    {\n      \"name\": \"k8s-pod-network\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"calico\",\n          \"log_level\": \"info\",\n          \"datastore_type\": \"kubernetes\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n          \"mtu\": __CNI_MTU__,\n          \"ipam\": {\n              \"type\": \"calico-ipam\"\n          },\n          \"policy\": {\n              \"type\": \"k8s\"\n          },\n          \"kubernetes\": {\n              \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n          }\n        },\n        {\n          \"type\": \"portmap\",\n          \"snat\": true,\n          \"capabilities\": {\"portMappings\": true}\n        }\n      ]\n    }",
            "yaml_body_parsed": "apiVersion: v1\ndata:\n  calico_backend: bird\n  cni_network_config: |-\n    {\n      \"name\": \"k8s-pod-network\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"calico\",\n          \"log_level\": \"info\",\n          \"datastore_type\": \"kubernetes\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n          \"mtu\": __CNI_MTU__,\n          \"ipam\": {\n              \"type\": \"calico-ipam\"\n          },\n          \"policy\": {\n              \"type\": \"k8s\"\n          },\n          \"kubernetes\": {\n              \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n          }\n        },\n        {\n          \"type\": \"portmap\",\n          \"snat\": true,\n          \"capabilities\": {\"portMappings\": true}\n        }\n      ]\n    }\n  typha_service_name: none\n  veth_mtu: \"1440\"\nkind: ConfigMap\nmetadata:\n  name: calico-config\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:calico_backend,fieldValue:birdfieldName:cni_network_config,fieldValue:{\n  \"name\": \"k8s-pod-network\",\n  \"cniVersion\": \"0.3.1\",\n  \"plugins\": [\n    {\n      \"type\": \"calico\",\n      \"log_level\": \"info\",\n      \"datastore_type\": \"kubernetes\",\n      \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n      \"mtu\": __CNI_MTU__,\n      \"ipam\": {\n          \"type\": \"calico-ipam\"\n      },\n      \"policy\": {\n          \"type\": \"k8s\"\n      },\n      \"kubernetes\": {\n          \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n      }\n    },\n    {\n      \"type\": \"portmap\",\n      \"snat\": true,\n      \"capabilities\": {\"portMappings\": true}\n    }\n  ]\n}fieldName:kind,fieldValue:ConfigMapfieldName:name,fieldValue:calico-configfieldName:namespace,fieldValue:kube-systemfieldName:typha_service_name,fieldValue:nonefieldName:veth_mtu,fieldValue:1440"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/felixconfigurations.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:FelixConfigurationfieldName:name,fieldValue:felixconfigurations.crd.projectcalico.orgfieldName:plural,fieldValue:felixconfigurationsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:felixconfigurationfieldName:version,fieldValue:v1",
            "live_resource_version": "1128",
            "live_uid": "79ca94c5-7a4d-4871-a46e-d6403e2390f5",
            "name": "felixconfigurations.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1128",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "79ca94c5-7a4d-4871-a46e-d6403e2390f5",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Source: calico/templates/kdd-crds.yaml\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n   name: felixconfigurations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: FelixConfiguration\n    plural: felixconfigurations\n    singular: felixconfiguration",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: felixconfigurations.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: FelixConfiguration\n    plural: felixconfigurations\n    singular: felixconfiguration\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:FelixConfigurationfieldName:name,fieldValue:felixconfigurations.crd.projectcalico.orgfieldName:plural,fieldValue:felixconfigurationsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:felixconfigurationfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/ipamblocks.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:IPAMBlockfieldName:name,fieldValue:ipamblocks.crd.projectcalico.orgfieldName:plural,fieldValue:ipamblocksfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:ipamblockfieldName:version,fieldValue:v1",
            "live_resource_version": "1111",
            "live_uid": "94c8b5d4-6703-429e-8558-9e9b4aeda84c",
            "name": "ipamblocks.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1111",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "94c8b5d4-6703-429e-8558-9e9b4aeda84c",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamblocks.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMBlock\n    plural: ipamblocks\n    singular: ipamblock",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamblocks.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: IPAMBlock\n    plural: ipamblocks\n    singular: ipamblock\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:IPAMBlockfieldName:name,fieldValue:ipamblocks.crd.projectcalico.orgfieldName:plural,fieldValue:ipamblocksfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:ipamblockfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/blockaffinities.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:BlockAffinityfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:name,fieldValue:blockaffinities.crd.projectcalico.orgfieldName:plural,fieldValue:blockaffinitiesfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:blockaffinityfieldName:version,fieldValue:v1",
            "live_resource_version": "1089",
            "live_uid": "ffd22541-6d34-418d-aeef-107eaaff8aa4",
            "name": "blockaffinities.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1089",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "ffd22541-6d34-418d-aeef-107eaaff8aa4",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: blockaffinities.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BlockAffinity\n    plural: blockaffinities\n    singular: blockaffinity",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: blockaffinities.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: BlockAffinity\n    plural: blockaffinities\n    singular: blockaffinity\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:BlockAffinityfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:name,fieldValue:blockaffinities.crd.projectcalico.orgfieldName:plural,fieldValue:blockaffinitiesfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:blockaffinityfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/ipamhandles.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:IPAMHandlefieldName:name,fieldValue:ipamhandles.crd.projectcalico.orgfieldName:plural,fieldValue:ipamhandlesfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:ipamhandlefieldName:version,fieldValue:v1",
            "live_resource_version": "1129",
            "live_uid": "edcdcffc-0486-4528-a084-95410baf352a",
            "name": "ipamhandles.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1129",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "edcdcffc-0486-4528-a084-95410baf352a",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamhandles.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMHandle\n    plural: ipamhandles\n    singular: ipamhandle",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamhandles.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: IPAMHandle\n    plural: ipamhandles\n    singular: ipamhandle\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:IPAMHandlefieldName:name,fieldValue:ipamhandles.crd.projectcalico.orgfieldName:plural,fieldValue:ipamhandlesfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:ipamhandlefieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/ipamconfigs.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:IPAMConfigfieldName:name,fieldValue:ipamconfigs.crd.projectcalico.orgfieldName:plural,fieldValue:ipamconfigsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:ipamconfigfieldName:version,fieldValue:v1",
            "live_resource_version": "1144",
            "live_uid": "b7620bda-f279-4a62-bf35-b02057b66637",
            "name": "ipamconfigs.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1144",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "b7620bda-f279-4a62-bf35-b02057b66637",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamconfigs.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMConfig\n    plural: ipamconfigs\n    singular: ipamconfig",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamconfigs.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: IPAMConfig\n    plural: ipamconfigs\n    singular: ipamconfig\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:IPAMConfigfieldName:name,fieldValue:ipamconfigs.crd.projectcalico.orgfieldName:plural,fieldValue:ipamconfigsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:ipamconfigfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 6,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/bgppeers.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:BGPPeerfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:name,fieldValue:bgppeers.crd.projectcalico.orgfieldName:plural,fieldValue:bgppeersfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:bgppeerfieldName:version,fieldValue:v1",
            "live_resource_version": "1117",
            "live_uid": "808edc51-cbc6-4371-9009-a82d5aeae3ff",
            "name": "bgppeers.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1117",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "808edc51-cbc6-4371-9009-a82d5aeae3ff",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: bgppeers.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BGPPeer\n    plural: bgppeers\n    singular: bgppeer",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: bgppeers.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: BGPPeer\n    plural: bgppeers\n    singular: bgppeer\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:BGPPeerfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:name,fieldValue:bgppeers.crd.projectcalico.orgfieldName:plural,fieldValue:bgppeersfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:bgppeerfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 7,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/bgpconfigurations.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:BGPConfigurationfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:name,fieldValue:bgpconfigurations.crd.projectcalico.orgfieldName:plural,fieldValue:bgpconfigurationsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:bgpconfigurationfieldName:version,fieldValue:v1",
            "live_resource_version": "1189",
            "live_uid": "b310fa5d-3247-4d19-84e0-dc4bba0bfaab",
            "name": "bgpconfigurations.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1189",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "b310fa5d-3247-4d19-84e0-dc4bba0bfaab",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: bgpconfigurations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BGPConfiguration\n    plural: bgpconfigurations\n    singular: bgpconfiguration",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: bgpconfigurations.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: BGPConfiguration\n    plural: bgpconfigurations\n    singular: bgpconfiguration\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:BGPConfigurationfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:name,fieldValue:bgpconfigurations.crd.projectcalico.orgfieldName:plural,fieldValue:bgpconfigurationsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:bgpconfigurationfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 8,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/ippools.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:IPPoolfieldName:name,fieldValue:ippools.crd.projectcalico.orgfieldName:plural,fieldValue:ippoolsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:ippoolfieldName:version,fieldValue:v1",
            "live_resource_version": "1102",
            "live_uid": "2783a5e7-e889-4bf8-9ef5-d6f826f18f44",
            "name": "ippools.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1102",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "2783a5e7-e889-4bf8-9ef5-d6f826f18f44",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ippools.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPPool\n    plural: ippools\n    singular: ippool",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ippools.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: IPPool\n    plural: ippools\n    singular: ippool\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:IPPoolfieldName:name,fieldValue:ippools.crd.projectcalico.orgfieldName:plural,fieldValue:ippoolsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:ippoolfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 9,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/hostendpoints.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:HostEndpointfieldName:name,fieldValue:hostendpoints.crd.projectcalico.orgfieldName:plural,fieldValue:hostendpointsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:hostendpointfieldName:version,fieldValue:v1",
            "live_resource_version": "1132",
            "live_uid": "2ad2e325-dd05-4920-97a3-93fb9c97a4a4",
            "name": "hostendpoints.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1132",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "2ad2e325-dd05-4920-97a3-93fb9c97a4a4",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: hostendpoints.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: HostEndpoint\n    plural: hostendpoints\n    singular: hostendpoint",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: hostendpoints.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: HostEndpoint\n    plural: hostendpoints\n    singular: hostendpoint\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:HostEndpointfieldName:name,fieldValue:hostendpoints.crd.projectcalico.orgfieldName:plural,fieldValue:hostendpointsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:hostendpointfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 10,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/clusterinformations.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:ClusterInformationfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:name,fieldValue:clusterinformations.crd.projectcalico.orgfieldName:plural,fieldValue:clusterinformationsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:clusterinformationfieldName:version,fieldValue:v1",
            "live_resource_version": "1123",
            "live_uid": "66b97dd4-b0a0-42b5-8890-0ed8b41db4ab",
            "name": "clusterinformations.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1123",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "66b97dd4-b0a0-42b5-8890-0ed8b41db4ab",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: clusterinformations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: ClusterInformation\n    plural: clusterinformations\n    singular: clusterinformation",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: clusterinformations.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: ClusterInformation\n    plural: clusterinformations\n    singular: clusterinformation\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:ClusterInformationfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:name,fieldValue:clusterinformations.crd.projectcalico.orgfieldName:plural,fieldValue:clusterinformationsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:clusterinformationfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 11,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/globalnetworkpolicies.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:GlobalNetworkPolicyfieldName:name,fieldValue:globalnetworkpolicies.crd.projectcalico.orgfieldName:plural,fieldValue:globalnetworkpoliciesfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:globalnetworkpolicyfieldName:version,fieldValue:v1",
            "live_resource_version": "1139",
            "live_uid": "5c3c3d8d-1324-4d09-94ec-165d48d5c3eb",
            "name": "globalnetworkpolicies.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1139",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "5c3c3d8d-1324-4d09-94ec-165d48d5c3eb",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: globalnetworkpolicies.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: GlobalNetworkPolicy\n    plural: globalnetworkpolicies\n    singular: globalnetworkpolicy",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: globalnetworkpolicies.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: GlobalNetworkPolicy\n    plural: globalnetworkpolicies\n    singular: globalnetworkpolicy\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:GlobalNetworkPolicyfieldName:name,fieldValue:globalnetworkpolicies.crd.projectcalico.orgfieldName:plural,fieldValue:globalnetworkpoliciesfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:globalnetworkpolicyfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 12,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/globalnetworksets.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:GlobalNetworkSetfieldName:name,fieldValue:globalnetworksets.crd.projectcalico.orgfieldName:plural,fieldValue:globalnetworksetsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:globalnetworksetfieldName:version,fieldValue:v1",
            "live_resource_version": "1159",
            "live_uid": "4fbd59d9-a8bd-422d-aa87-095d17edd222",
            "name": "globalnetworksets.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1159",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "4fbd59d9-a8bd-422d-aa87-095d17edd222",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: globalnetworksets.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: GlobalNetworkSet\n    plural: globalnetworksets\n    singular: globalnetworkset",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: globalnetworksets.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: GlobalNetworkSet\n    plural: globalnetworksets\n    singular: globalnetworkset\n  scope: Cluster\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:GlobalNetworkSetfieldName:name,fieldValue:globalnetworksets.crd.projectcalico.orgfieldName:plural,fieldValue:globalnetworksetsfieldName:scope,fieldValue:ClusterfieldName:singular,fieldValue:globalnetworksetfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 13,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/networkpolicies.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:NetworkPolicyfieldName:name,fieldValue:networkpolicies.crd.projectcalico.orgfieldName:plural,fieldValue:networkpoliciesfieldName:scope,fieldValue:NamespacedfieldName:singular,fieldValue:networkpolicyfieldName:version,fieldValue:v1",
            "live_resource_version": "1099",
            "live_uid": "5970526b-d77e-49c4-bc47-4a850bbd14d9",
            "name": "networkpolicies.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1099",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "5970526b-d77e-49c4-bc47-4a850bbd14d9",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: networkpolicies.crd.projectcalico.org\nspec:\n  scope: Namespaced\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: NetworkPolicy\n    plural: networkpolicies\n    singular: networkpolicy",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: networkpolicies.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: NetworkPolicy\n    plural: networkpolicies\n    singular: networkpolicy\n  scope: Namespaced\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:NetworkPolicyfieldName:name,fieldValue:networkpolicies.crd.projectcalico.orgfieldName:plural,fieldValue:networkpoliciesfieldName:scope,fieldValue:NamespacedfieldName:singular,fieldValue:networkpolicyfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 14,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/networksets.crd.projectcalico.org",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:NetworkSetfieldName:name,fieldValue:networksets.crd.projectcalico.orgfieldName:plural,fieldValue:networksetsfieldName:scope,fieldValue:NamespacedfieldName:singular,fieldValue:networksetfieldName:version,fieldValue:v1",
            "live_resource_version": "1194",
            "live_uid": "49cc2a6a-6047-4aed-aa9b-cebc35cebb3d",
            "name": "networksets.crd.projectcalico.org",
            "namespace": null,
            "resource_version": "1194",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "49cc2a6a-6047-4aed-aa9b-cebc35cebb3d",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: networksets.crd.projectcalico.org\nspec:\n  scope: Namespaced\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: NetworkSet\n    plural: networksets\n    singular: networkset",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: networksets.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n  names:\n    kind: NetworkSet\n    plural: networksets\n    singular: networkset\n  scope: Namespaced\n  version: v1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:crd.projectcalico.orgfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:NetworkSetfieldName:name,fieldValue:networksets.crd.projectcalico.orgfieldName:plural,fieldValue:networksetsfieldName:scope,fieldValue:NamespacedfieldName:singular,fieldValue:networksetfieldName:version,fieldValue:v1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 15,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterroles/calico-kube-controllers",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:calico-kube-controllersfieldName:resources[0],fieldValue:blockaffinitiesfieldName:resources[0],fieldValue:clusterinformationsfieldName:resources[0],fieldValue:ippoolsfieldName:resources[0],fieldValue:nodesfieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:ipamblocksfieldName:resources[2],fieldValue:ipamhandlesfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:listfieldName:verbs[0],fieldValue:watchfieldName:verbs[1],fieldValue:createfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:createfieldName:verbs[2],fieldValue:getfieldName:verbs[2],fieldValue:updatefieldName:verbs[3],fieldValue:updatefieldName:verbs[4],fieldValue:delete",
            "live_resource_version": "1091",
            "live_uid": "c935c940-1080-45da-b156-4268d483cc7e",
            "name": "calico-kube-controllers",
            "namespace": null,
            "resource_version": "1091",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "c935c940-1080-45da-b156-4268d483cc7e",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Source: calico/templates/rbac.yaml\n\n# Include a clusterrole for the kube-controllers component,\n# and bind it to the calico-kube-controllers serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-kube-controllers\nrules:\n  # Nodes are watched to monitor for deletions.\n  - apiGroups: [\"\"]\n    resources:\n      - nodes\n    verbs:\n      - watch\n      - list\n      - get\n  # Pods are queried to check for existence.\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n    verbs:\n      - get\n  # IPAM resources are manipulated when nodes are deleted.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - ippools\n    verbs:\n      - list\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n      - get\n      - list\n      - create\n      - update\n      - delete\n  # Needs access to update clusterinformations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - clusterinformations\n    verbs:\n      - get\n      - create\n      - update",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: calico-kube-controllers\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - watch\n  - list\n  - get\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - ippools\n  verbs:\n  - list\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - blockaffinities\n  - ipamblocks\n  - ipamhandles\n  verbs:\n  - get\n  - list\n  - create\n  - update\n  - delete\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - clusterinformations\n  verbs:\n  - get\n  - create\n  - update\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:calico-kube-controllersfieldName:resources[0],fieldValue:blockaffinitiesfieldName:resources[0],fieldValue:clusterinformationsfieldName:resources[0],fieldValue:ippoolsfieldName:resources[0],fieldValue:nodesfieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:ipamblocksfieldName:resources[2],fieldValue:ipamhandlesfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:listfieldName:verbs[0],fieldValue:watchfieldName:verbs[1],fieldValue:createfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:createfieldName:verbs[2],fieldValue:getfieldName:verbs[2],fieldValue:updatefieldName:verbs[3],fieldValue:updatefieldName:verbs[4],fieldValue:delete"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 16,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/calico-kube-controllers",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:calico-kube-controllersfieldName:name,fieldValue:calico-kube-controllersfieldName:name,fieldValue:calico-kube-controllersfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1145",
            "live_uid": "eed3b211-07d3-429f-b175-199c82936c74",
            "name": "calico-kube-controllers",
            "namespace": null,
            "resource_version": "1145",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "eed3b211-07d3-429f-b175-199c82936c74",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-kube-controllers\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-kube-controllers\nsubjects:\n- kind: ServiceAccount\n  name: calico-kube-controllers\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: calico-kube-controllers\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-kube-controllers\nsubjects:\n- kind: ServiceAccount\n  name: calico-kube-controllers\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:calico-kube-controllersfieldName:name,fieldValue:calico-kube-controllersfieldName:name,fieldValue:calico-kube-controllersfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 17,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterroles/calico-node",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:appsfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:networking.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:calico-nodefieldName:resources[0],fieldValue:bgpconfigurationsfieldName:resources[0],fieldValue:blockaffinitiesfieldName:resources[0],fieldValue:blockaffinitiesfieldName:resources[0],fieldValue:daemonsetsfieldName:resources[0],fieldValue:endpointsfieldName:resources[0],fieldValue:globalfelixconfigsfieldName:resources[0],fieldValue:ipamconfigsfieldName:resources[0],fieldValue:ippoolsfieldName:resources[0],fieldValue:networkpoliciesfieldName:resources[0],fieldValue:nodesfieldName:resources[0],fieldValue:nodes/statusfieldName:resources[0],fieldValue:podsfieldName:resources[0],fieldValue:podsfieldName:resources[0],fieldValue:pods/statusfieldName:resources[10],fieldValue:networksetsfieldName:resources[11],fieldValue:clusterinformationsfieldName:resources[12],fieldValue:hostendpointsfieldName:resources[1],fieldValue:bgppeersfieldName:resources[1],fieldValue:felixconfigurationsfieldName:resources[1],fieldValue:felixconfigurationsfieldName:resources[1],fieldValue:ipamblocksfieldName:resources[1],fieldValue:namespacesfieldName:resources[1],fieldValue:nodesfieldName:resources[1],fieldValue:servicesfieldName:resources[2],fieldValue:bgppeersfieldName:resources[2],fieldValue:clusterinformationsfieldName:resources[2],fieldValue:ipamhandlesfieldName:resources[2],fieldValue:namespacesfieldName:resources[2],fieldValue:serviceaccountsfieldName:resources[3],fieldValue:globalbgpconfigsfieldName:resources[4],fieldValue:bgpconfigurationsfieldName:resources[5],fieldValue:ippoolsfieldName:resources[6],fieldValue:ipamblocksfieldName:resources[7],fieldValue:globalnetworkpoliciesfieldName:resources[8],fieldValue:globalnetworksetsfieldName:resources[9],fieldValue:networkpoliciesfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:listfieldName:verbs[0],fieldValue:patchfieldName:verbs[0],fieldValue:patchfieldName:verbs[0],fieldValue:watchfieldName:verbs[0],fieldValue:watchfieldName:verbs[0],fieldValue:watchfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:watchfieldName:verbs[2],fieldValue:createfieldName:verbs[2],fieldValue:getfieldName:verbs[2],fieldValue:watchfieldName:verbs[2],fieldValue:watchfieldName:verbs[3],fieldValue:updatefieldName:verbs[4],fieldValue:delete",
            "live_resource_version": "1118",
            "live_uid": "b264af8b-b688-466d-89d9-f4c2c60e81cd",
            "name": "calico-node",
            "namespace": null,
            "resource_version": "1118",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "b264af8b-b688-466d-89d9-f4c2c60e81cd",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Include a clusterrole for the calico-node DaemonSet,\n# and bind it to the calico-node serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-node\nrules:\n  # The CNI plugin needs to get pods, nodes, and namespaces.\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n      - nodes\n      - namespaces\n    verbs:\n      - get\n  - apiGroups: [\"\"]\n    resources:\n      - endpoints\n      - services\n    verbs:\n      # Used to discover service IPs for advertisement.\n      - watch\n      - list\n      # Used to discover Typhas.\n      - get\n  - apiGroups: [\"\"]\n    resources:\n      - nodes/status\n    verbs:\n      # Needed for clearing NodeNetworkUnavailable flag.\n      - patch\n      # Calico stores some configuration information in node annotations.\n      - update\n  # Watch for changes to Kubernetes NetworkPolicies.\n  - apiGroups: [\"networking.k8s.io\"]\n    resources:\n      - networkpolicies\n    verbs:\n      - watch\n      - list\n  # Used by Calico for policy information.\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n      - namespaces\n      - serviceaccounts\n    verbs:\n      - list\n      - watch\n  # The CNI plugin patches pods/status.\n  - apiGroups: [\"\"]\n    resources:\n      - pods/status\n    verbs:\n      - patch\n  # Calico monitors various CRDs for config.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - globalfelixconfigs\n      - felixconfigurations\n      - bgppeers\n      - globalbgpconfigs\n      - bgpconfigurations\n      - ippools\n      - ipamblocks\n      - globalnetworkpolicies\n      - globalnetworksets\n      - networkpolicies\n      - networksets\n      - clusterinformations\n      - hostendpoints\n    verbs:\n      - get\n      - list\n      - watch\n  # Calico must create and update some CRDs on startup.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - ippools\n      - felixconfigurations\n      - clusterinformations\n    verbs:\n      - create\n      - update\n  # Calico stores some configuration information on the node.\n  - apiGroups: [\"\"]\n    resources:\n      - nodes\n    verbs:\n      - get\n      - list\n      - watch\n  # These permissions are only requried for upgrade from v2.6, and can\n  # be removed after upgrade or on fresh installations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - bgpconfigurations\n      - bgppeers\n    verbs:\n      - create\n      - update\n  # These permissions are required for Calico CNI to perform IPAM allocations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n      - get\n      - list\n      - create\n      - update\n      - delete\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - ipamconfigs\n    verbs:\n      - get\n  # Block affinities must also be watchable by confd for route aggregation.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - blockaffinities\n    verbs:\n      - watch\n  # The Calico IPAM migration needs to get daemonsets. These permissions can be\n  # removed if not upgrading from an installation using host-local IPAM.\n  - apiGroups: [\"apps\"]\n    resources:\n      - daemonsets\n    verbs:\n      - get",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: calico-node\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - namespaces\n  verbs:\n  - get\n- apiGroups:\n  - \"\"\n  resources:\n  - endpoints\n  - services\n  verbs:\n  - watch\n  - list\n  - get\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes/status\n  verbs:\n  - patch\n  - update\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - networkpolicies\n  verbs:\n  - watch\n  - list\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - namespaces\n  - serviceaccounts\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - pods/status\n  verbs:\n  - patch\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - globalfelixconfigs\n  - felixconfigurations\n  - bgppeers\n  - globalbgpconfigs\n  - bgpconfigurations\n  - ippools\n  - ipamblocks\n  - globalnetworkpolicies\n  - globalnetworksets\n  - networkpolicies\n  - networksets\n  - clusterinformations\n  - hostendpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - ippools\n  - felixconfigurations\n  - clusterinformations\n  verbs:\n  - create\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - bgpconfigurations\n  - bgppeers\n  verbs:\n  - create\n  - update\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - blockaffinities\n  - ipamblocks\n  - ipamhandles\n  verbs:\n  - get\n  - list\n  - create\n  - update\n  - delete\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - ipamconfigs\n  verbs:\n  - get\n- apiGroups:\n  - crd.projectcalico.org\n  resources:\n  - blockaffinities\n  verbs:\n  - watch\n- apiGroups:\n  - apps\n  resources:\n  - daemonsets\n  verbs:\n  - get\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:appsfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:crd.projectcalico.orgfieldName:apiGroups[0],fieldValue:networking.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:calico-nodefieldName:resources[0],fieldValue:bgpconfigurationsfieldName:resources[0],fieldValue:blockaffinitiesfieldName:resources[0],fieldValue:blockaffinitiesfieldName:resources[0],fieldValue:daemonsetsfieldName:resources[0],fieldValue:endpointsfieldName:resources[0],fieldValue:globalfelixconfigsfieldName:resources[0],fieldValue:ipamconfigsfieldName:resources[0],fieldValue:ippoolsfieldName:resources[0],fieldValue:networkpoliciesfieldName:resources[0],fieldValue:nodesfieldName:resources[0],fieldValue:nodes/statusfieldName:resources[0],fieldValue:podsfieldName:resources[0],fieldValue:podsfieldName:resources[0],fieldValue:pods/statusfieldName:resources[10],fieldValue:networksetsfieldName:resources[11],fieldValue:clusterinformationsfieldName:resources[12],fieldValue:hostendpointsfieldName:resources[1],fieldValue:bgppeersfieldName:resources[1],fieldValue:felixconfigurationsfieldName:resources[1],fieldValue:felixconfigurationsfieldName:resources[1],fieldValue:ipamblocksfieldName:resources[1],fieldValue:namespacesfieldName:resources[1],fieldValue:nodesfieldName:resources[1],fieldValue:servicesfieldName:resources[2],fieldValue:bgppeersfieldName:resources[2],fieldValue:clusterinformationsfieldName:resources[2],fieldValue:ipamhandlesfieldName:resources[2],fieldValue:namespacesfieldName:resources[2],fieldValue:serviceaccountsfieldName:resources[3],fieldValue:globalbgpconfigsfieldName:resources[4],fieldValue:bgpconfigurationsfieldName:resources[5],fieldValue:ippoolsfieldName:resources[6],fieldValue:ipamblocksfieldName:resources[7],fieldValue:globalnetworkpoliciesfieldName:resources[8],fieldValue:globalnetworksetsfieldName:resources[9],fieldValue:networkpoliciesfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:listfieldName:verbs[0],fieldValue:patchfieldName:verbs[0],fieldValue:patchfieldName:verbs[0],fieldValue:watchfieldName:verbs[0],fieldValue:watchfieldName:verbs[0],fieldValue:watchfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:watchfieldName:verbs[2],fieldValue:createfieldName:verbs[2],fieldValue:getfieldName:verbs[2],fieldValue:watchfieldName:verbs[2],fieldValue:watchfieldName:verbs[3],fieldValue:updatefieldName:verbs[4],fieldValue:delete"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 18,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/calico-node",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:calico-nodefieldName:name,fieldValue:calico-nodefieldName:name,fieldValue:calico-nodefieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1115",
            "live_uid": "7c97e1b2-f0ce-4423-bb37-c73484f42452",
            "name": "calico-node",
            "namespace": null,
            "resource_version": "1115",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "7c97e1b2-f0ce-4423-bb37-c73484f42452",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: calico-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-node\nsubjects:\n- kind: ServiceAccount\n  name: calico-node\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: calico-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-node\nsubjects:\n- kind: ServiceAccount\n  name: calico-node\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:calico-nodefieldName:name,fieldValue:calico-nodefieldName:name,fieldValue:calico-nodefieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 19,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kube-system/daemonsets/calico-node",
            "ignore_fields": null,
            "kind": "DaemonSet",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:beta.kubernetes.io/os,fieldValue:linuxfieldName:command[0],fieldValue:/bin/calico-nodefieldName:command[0],fieldValue:/install-cni.shfieldName:command[0],fieldValue:/opt/cni/bin/calico-ipamfieldName:command[1],fieldValue:-bird-readyfieldName:command[1],fieldValue:-upgradefieldName:command[2],fieldValue:-felix-readyfieldName:cpu,fieldValue:250mfieldName:effect,fieldValue:NoExecutefieldName:effect,fieldValue:NoSchedulefieldName:failureThreshold,fieldValue:6fieldName:fieldPath,fieldValue:spec.nodeNamefieldName:fieldPath,fieldValue:spec.nodeNamefieldName:fieldPath,fieldValue:spec.nodeNamefieldName:host,fieldValue:localhostfieldName:hostNetwork,fieldValue:truefieldName:image,fieldValue:calico/cni:v3.14.0fieldName:image,fieldValue:calico/cni:v3.14.0fieldName:image,fieldValue:calico/node:v3.14.0fieldName:image,fieldValue:calico/pod2daemon-flexvol:v3.14.0fieldName:initialDelaySeconds,fieldValue:10fieldName:k8s-app,fieldValue:calico-nodefieldName:k8s-app,fieldValue:calico-nodefieldName:k8s-app,fieldValue:calico-nodefieldName:key,fieldValue:CriticalAddonsOnlyfieldName:key,fieldValue:calico_backendfieldName:key,fieldValue:calico_backendfieldName:key,fieldValue:cni_network_configfieldName:key,fieldValue:veth_mtufieldName:key,fieldValue:veth_mtufieldName:kind,fieldValue:DaemonSetfieldName:maxUnavailable,fieldValue:1fieldName:mountPath,fieldValue:/host/driverfieldName:mountPath,fieldValue:/host/etc/cni/net.dfieldName:mountPath,fieldValue:/host/opt/cni/binfieldName:mountPath,fieldValue:/host/opt/cni/binfieldName:mountPath,fieldValue:/lib/modulesfieldName:mountPath,fieldValue:/run/xtables.lockfieldName:mountPath,fieldValue:/var/lib/calicofieldName:mountPath,fieldValue:/var/lib/cni/networksfieldName:mountPath,fieldValue:/var/run/calicofieldName:mountPath,fieldValue:/var/run/nodeagentfieldName:name,fieldValue:CALICO_DISABLE_FILE_LOGGINGfieldName:name,fieldValue:CALICO_IPV4POOL_CIDRfieldName:name,fieldValue:CALICO_IPV4POOL_IPIPfieldName:name,fieldValue:CALICO_NETWORKING_BACKENDfieldName:name,fieldValue:CALICO_NETWORKING_BACKENDfieldName:name,fieldValue:CLUSTER_TYPEfieldName:name,fieldValue:CNI_CONF_NAMEfieldName:name,fieldValue:CNI_MTUfieldName:name,fieldValue:CNI_NETWORK_CONFIGfieldName:name,fieldValue:DATASTORE_TYPEfieldName:name,fieldValue:FELIX_DEFAULTENDPOINTTOHOSTACTIONfieldName:name,fieldValue:FELIX_HEALTHENABLEDfieldName:name,fieldValue:FELIX_IPINIPMTUfieldName:name,fieldValue:FELIX_IPV6SUPPORTfieldName:name,fieldValue:FELIX_LOGSEVERITYSCREENfieldName:name,fieldValue:IPfieldName:name,fieldValue:IP_AUTODETECTION_METHODfieldName:name,fieldValue:KUBERNETES_NODE_NAMEfieldName:name,fieldValue:KUBERNETES_NODE_NAMEfieldName:name,fieldValue:NODENAMEfieldName:name,fieldValue:SLEEPfieldName:name,fieldValue:WAIT_FOR_DATASTOREfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-nodefieldName:name,fieldValue:calico-nodefieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:flexvol-driverfieldName:name,fieldValue:flexvol-driver-hostfieldName:name,fieldValue:flexvol-driver-hostfieldName:name,fieldValue:host-local-net-dirfieldName:name,fieldValue:host-local-net-dirfieldName:name,fieldValue:install-cnifieldName:name,fieldValue:lib-modulesfieldName:name,fieldValue:lib-modulesfieldName:name,fieldValue:policysyncfieldName:name,fieldValue:policysyncfieldName:name,fieldValue:upgrade-ipamfieldName:name,fieldValue:var-lib-calicofieldName:name,fieldValue:var-lib-calicofieldName:name,fieldValue:var-run-calicofieldName:name,fieldValue:var-run-calicofieldName:name,fieldValue:xtables-lockfieldName:name,fieldValue:xtables-lockfieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:path,fieldValue:/etc/cni/net.dfieldName:path,fieldValue:/lib/modulesfieldName:path,fieldValue:/livenessfieldName:path,fieldValue:/opt/cni/binfieldName:path,fieldValue:/run/xtables.lockfieldName:path,fieldValue:/usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~udsfieldName:path,fieldValue:/var/lib/calicofieldName:path,fieldValue:/var/lib/cni/networksfieldName:path,fieldValue:/var/run/calicofieldName:path,fieldValue:/var/run/nodeagentfieldName:periodSeconds,fieldValue:10fieldName:periodSeconds,fieldValue:10fieldName:port,fieldValue:9099fieldName:priorityClassName,fieldValue:system-node-criticalfieldName:privileged,fieldValue:truefieldName:readOnly,fieldValue:truefieldName:scheduler.alpha.kubernetes.io/critical-pod,fieldValue:fieldName:serviceAccountName,fieldValue:calico-nodefieldName:terminationGracePeriodSeconds,fieldValue:0fieldName:type,fieldValue:DirectoryOrCreatefieldName:type,fieldValue:DirectoryOrCreatefieldName:type,fieldValue:FileOrCreatefieldName:type,fieldValue:RollingUpdatefieldName:value,fieldValue:10-calico.conflistfieldName:value,fieldValue:192.168.0.0/16fieldName:value,fieldValue:ACCEPTfieldName:value,fieldValue:AlwaysfieldName:value,fieldValue:autodetectfieldName:value,fieldValue:falsefieldName:value,fieldValue:falsefieldName:value,fieldValue:infofieldName:value,fieldValue:interface=eth0fieldName:value,fieldValue:k8s,bgpfieldName:value,fieldValue:kubernetesfieldName:value,fieldValue:truefieldName:value,fieldValue:truefieldName:value,fieldValue:true",
            "live_resource_version": "1140",
            "live_uid": "6a4fe024-e99c-4e4a-a7ba-37c4a333d913",
            "name": "calico-node",
            "namespace": "kube-system",
            "resource_version": "1140",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "6a4fe024-e99c-4e4a-a7ba-37c4a333d913",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Source: calico/templates/calico-node.yaml\n# This manifest installs the calico-node container, as well\n# as the CNI plugins and network config on\n# each master and worker node in a Kubernetes cluster.\nkind: DaemonSet\napiVersion: apps/v1\nmetadata:\n  name: calico-node\n  namespace: kube-system\n  labels:\n    k8s-app: calico-node\nspec:\n  selector:\n    matchLabels:\n      k8s-app: calico-node\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n  template:\n    metadata:\n      labels:\n        k8s-app: calico-node\n      annotations:\n        # This, along with the CriticalAddonsOnly toleration below,\n        # marks the pod as a critical add-on, ensuring it gets\n        # priority scheduling and that its resources are reserved\n        # if it ever gets evicted.\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n    spec:\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      hostNetwork: true\n      tolerations:\n        # Make sure calico-node gets scheduled on all nodes.\n        - effect: NoSchedule\n          operator: Exists\n        # Mark the pod as a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator: Exists\n        - effect: NoExecute\n          operator: Exists\n      serviceAccountName: calico-node\n      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a \"force\n      # deletion\": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.\n      terminationGracePeriodSeconds: 0\n      priorityClassName: system-node-critical\n      initContainers:\n        # This container performs upgrade from host-local IPAM to calico-ipam.\n        # It can be deleted if this is a fresh installation, or if you have already\n        # upgraded to use calico-ipam.\n        - name: upgrade-ipam\n          image: calico/cni:v3.14.0\n          command: [\"/opt/cni/bin/calico-ipam\", \"-upgrade\"]\n          env:\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            - name: CALICO_NETWORKING_BACKEND\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: calico_backend\n          volumeMounts:\n            - mountPath: /var/lib/cni/networks\n              name: host-local-net-dir\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n        # This container installs the CNI binaries\n        # and CNI network config file on each node.\n        - name: install-cni\n          image: calico/cni:v3.14.0\n          command: [\"/install-cni.sh\"]\n          env:\n            # Name of the CNI config file to create.\n            - name: CNI_CONF_NAME\n              value: \"10-calico.conflist\"\n            # The CNI network config to install on each node.\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: cni_network_config\n            # Set the hostname based on the k8s node name.\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            # CNI MTU Config variable\n            - name: CNI_MTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # Prevents the container from sleeping forever.\n            - name: SLEEP\n              value: \"false\"\n          volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes\n        # to communicate with Felix over the Policy Sync API.\n        - name: flexvol-driver\n          image: calico/pod2daemon-flexvol:v3.14.0\n          volumeMounts:\n          - name: flexvol-driver-host\n            mountPath: /host/driver\n      containers:\n        # Runs calico-node container on each Kubernetes node.  This\n        # container programs network policy and routes on each\n        # host.\n        - name: calico-node\n          image: calico/node:v3.14.0\n          env:\n            # Use Kubernetes API as the backing datastore.\n            - name: DATASTORE_TYPE\n              value: \"kubernetes\"\n            # Wait for the datastore.\n            - name: WAIT_FOR_DATASTORE\n              value: \"true\"\n            # Set based on the k8s node name.\n            - name: NODENAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            # Choose the backend to use.\n            - name: CALICO_NETWORKING_BACKEND\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: calico_backend\n            # Cluster type to identify the deployment type\n            - name: CLUSTER_TYPE\n              value: \"k8s,bgp\"\n            # Auto-detect the BGP IP address.\n            - name: IP\n              value: \"autodetect\"\n            # Enable IPIP\n            - name: CALICO_IPV4POOL_IPIP\n              value: \"Always\"\n            # Set MTU for tunnel device used if ipip is enabled\n            - name: FELIX_IPINIPMTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # The default IPv4 pool to create on startup if none exists. Pod IPs will be\n            # chosen from this range. Changing this value after installation will have\n            # no effect. This should fall within `--cluster-cidr`.\n            - name: CALICO_IPV4POOL_CIDR\n              value: \"192.168.0.0/16\"\n            # Disable file logging so `kubectl logs` works.\n            - name: CALICO_DISABLE_FILE_LOGGING\n              value: \"true\"\n            # Set Felix endpoint to host default action to ACCEPT.\n            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION\n              value: \"ACCEPT\"\n            # Disable IPv6 on Kubernetes.\n            - name: FELIX_IPV6SUPPORT\n              value: \"false\"\n            # Set Felix logging to \"info\"\n            - name: FELIX_LOGSEVERITYSCREEN\n              value: \"info\"\n            - name: FELIX_HEALTHENABLED\n              value: \"true\"\n            - name: IP_AUTODETECTION_METHOD\n              value: interface=eth0\n\n          securityContext:\n            privileged: true\n          resources:\n            requests:\n              cpu: 250m\n          livenessProbe:\n            httpGet:\n              path: /liveness\n              port: 9099\n              host: localhost\n            periodSeconds: 10\n            initialDelaySeconds: 10\n            failureThreshold: 6\n          readinessProbe:\n            exec:\n              command:\n              - /bin/calico-node\n              - -bird-ready\n              - -felix-ready\n            periodSeconds: 10\n          volumeMounts:\n            - mountPath: /lib/modules\n              name: lib-modules\n              readOnly: true\n            - mountPath: /run/xtables.lock\n              name: xtables-lock\n              readOnly: false\n            - mountPath: /var/run/calico\n              name: var-run-calico\n              readOnly: false\n            - mountPath: /var/lib/calico\n              name: var-lib-calico\n              readOnly: false\n            - name: policysync\n              mountPath: /var/run/nodeagent\n      volumes:\n        # Used by calico-node.\n        - name: lib-modules\n          hostPath:\n            path: /lib/modules\n        - name: var-run-calico\n          hostPath:\n            path: /var/run/calico\n        - name: var-lib-calico\n          hostPath:\n            path: /var/lib/calico\n        - name: xtables-lock\n          hostPath:\n            path: /run/xtables.lock\n            type: FileOrCreate\n        # Used to install CNI.\n        - name: cni-bin-dir\n          hostPath:\n            path: /opt/cni/bin\n        - name: cni-net-dir\n          hostPath:\n            path: /etc/cni/net.d\n        # Mount in the directory for host-local IPAM allocations. This is\n        # used when upgrading from host-local to calico-ipam, and can be removed\n        # if not using the upgrade-ipam init container.\n        - name: host-local-net-dir\n          hostPath:\n            path: /var/lib/cni/networks\n        # Used to create per-pod Unix Domain Sockets\n        - name: policysync\n          hostPath:\n            type: DirectoryOrCreate\n            path: /var/run/nodeagent\n        # Used to install Flex Volume Driver\n        - name: flexvol-driver-host\n          hostPath:\n            type: DirectoryOrCreate\n            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    k8s-app: calico-node\n  name: calico-node\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      k8s-app: calico-node\n  template:\n    metadata:\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: \"\"\n      labels:\n        k8s-app: calico-node\n    spec:\n      containers:\n      - env:\n        - name: DATASTORE_TYPE\n          value: kubernetes\n        - name: WAIT_FOR_DATASTORE\n          value: \"true\"\n        - name: NODENAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: CALICO_NETWORKING_BACKEND\n          valueFrom:\n            configMapKeyRef:\n              key: calico_backend\n              name: calico-config\n        - name: CLUSTER_TYPE\n          value: k8s,bgp\n        - name: IP\n          value: autodetect\n        - name: CALICO_IPV4POOL_IPIP\n          value: Always\n        - name: FELIX_IPINIPMTU\n          valueFrom:\n            configMapKeyRef:\n              key: veth_mtu\n              name: calico-config\n        - name: CALICO_IPV4POOL_CIDR\n          value: 192.168.0.0/16\n        - name: CALICO_DISABLE_FILE_LOGGING\n          value: \"true\"\n        - name: FELIX_DEFAULTENDPOINTTOHOSTACTION\n          value: ACCEPT\n        - name: FELIX_IPV6SUPPORT\n          value: \"false\"\n        - name: FELIX_LOGSEVERITYSCREEN\n          value: info\n        - name: FELIX_HEALTHENABLED\n          value: \"true\"\n        - name: IP_AUTODETECTION_METHOD\n          value: interface=eth0\n        image: calico/node:v3.14.0\n        livenessProbe:\n          failureThreshold: 6\n          httpGet:\n            host: localhost\n            path: /liveness\n            port: 9099\n          initialDelaySeconds: 10\n          periodSeconds: 10\n        name: calico-node\n        readinessProbe:\n          exec:\n            command:\n            - /bin/calico-node\n            - -bird-ready\n            - -felix-ready\n          periodSeconds: 10\n        resources:\n          requests:\n            cpu: 250m\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - mountPath: /lib/modules\n          name: lib-modules\n          readOnly: true\n        - mountPath: /run/xtables.lock\n          name: xtables-lock\n          readOnly: false\n        - mountPath: /var/run/calico\n          name: var-run-calico\n          readOnly: false\n        - mountPath: /var/lib/calico\n          name: var-lib-calico\n          readOnly: false\n        - mountPath: /var/run/nodeagent\n          name: policysync\n      hostNetwork: true\n      initContainers:\n      - command:\n        - /opt/cni/bin/calico-ipam\n        - -upgrade\n        env:\n        - name: KUBERNETES_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: CALICO_NETWORKING_BACKEND\n          valueFrom:\n            configMapKeyRef:\n              key: calico_backend\n              name: calico-config\n        image: calico/cni:v3.14.0\n        name: upgrade-ipam\n        volumeMounts:\n        - mountPath: /var/lib/cni/networks\n          name: host-local-net-dir\n        - mountPath: /host/opt/cni/bin\n          name: cni-bin-dir\n      - command:\n        - /install-cni.sh\n        env:\n        - name: CNI_CONF_NAME\n          value: 10-calico.conflist\n        - name: CNI_NETWORK_CONFIG\n          valueFrom:\n            configMapKeyRef:\n              key: cni_network_config\n              name: calico-config\n        - name: KUBERNETES_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: CNI_MTU\n          valueFrom:\n            configMapKeyRef:\n              key: veth_mtu\n              name: calico-config\n        - name: SLEEP\n          value: \"false\"\n        image: calico/cni:v3.14.0\n        name: install-cni\n        volumeMounts:\n        - mountPath: /host/opt/cni/bin\n          name: cni-bin-dir\n        - mountPath: /host/etc/cni/net.d\n          name: cni-net-dir\n      - image: calico/pod2daemon-flexvol:v3.14.0\n        name: flexvol-driver\n        volumeMounts:\n        - mountPath: /host/driver\n          name: flexvol-driver-host\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      priorityClassName: system-node-critical\n      serviceAccountName: calico-node\n      terminationGracePeriodSeconds: 0\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      - key: CriticalAddonsOnly\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: /lib/modules\n        name: lib-modules\n      - hostPath:\n          path: /var/run/calico\n        name: var-run-calico\n      - hostPath:\n          path: /var/lib/calico\n        name: var-lib-calico\n      - hostPath:\n          path: /run/xtables.lock\n          type: FileOrCreate\n        name: xtables-lock\n      - hostPath:\n          path: /opt/cni/bin\n        name: cni-bin-dir\n      - hostPath:\n          path: /etc/cni/net.d\n        name: cni-net-dir\n      - hostPath:\n          path: /var/lib/cni/networks\n        name: host-local-net-dir\n      - hostPath:\n          path: /var/run/nodeagent\n          type: DirectoryOrCreate\n        name: policysync\n      - hostPath:\n          path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds\n          type: DirectoryOrCreate\n        name: flexvol-driver-host\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 1\n    type: RollingUpdate\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:beta.kubernetes.io/os,fieldValue:linuxfieldName:command[0],fieldValue:/bin/calico-nodefieldName:command[0],fieldValue:/install-cni.shfieldName:command[0],fieldValue:/opt/cni/bin/calico-ipamfieldName:command[1],fieldValue:-bird-readyfieldName:command[1],fieldValue:-upgradefieldName:command[2],fieldValue:-felix-readyfieldName:cpu,fieldValue:250mfieldName:effect,fieldValue:NoExecutefieldName:effect,fieldValue:NoSchedulefieldName:failureThreshold,fieldValue:6fieldName:fieldPath,fieldValue:spec.nodeNamefieldName:fieldPath,fieldValue:spec.nodeNamefieldName:fieldPath,fieldValue:spec.nodeNamefieldName:host,fieldValue:localhostfieldName:hostNetwork,fieldValue:truefieldName:image,fieldValue:calico/cni:v3.14.0fieldName:image,fieldValue:calico/cni:v3.14.0fieldName:image,fieldValue:calico/node:v3.14.0fieldName:image,fieldValue:calico/pod2daemon-flexvol:v3.14.0fieldName:initialDelaySeconds,fieldValue:10fieldName:k8s-app,fieldValue:calico-nodefieldName:k8s-app,fieldValue:calico-nodefieldName:k8s-app,fieldValue:calico-nodefieldName:key,fieldValue:CriticalAddonsOnlyfieldName:key,fieldValue:calico_backendfieldName:key,fieldValue:calico_backendfieldName:key,fieldValue:cni_network_configfieldName:key,fieldValue:veth_mtufieldName:key,fieldValue:veth_mtufieldName:kind,fieldValue:DaemonSetfieldName:maxUnavailable,fieldValue:1fieldName:mountPath,fieldValue:/host/driverfieldName:mountPath,fieldValue:/host/etc/cni/net.dfieldName:mountPath,fieldValue:/host/opt/cni/binfieldName:mountPath,fieldValue:/host/opt/cni/binfieldName:mountPath,fieldValue:/lib/modulesfieldName:mountPath,fieldValue:/run/xtables.lockfieldName:mountPath,fieldValue:/var/lib/calicofieldName:mountPath,fieldValue:/var/lib/cni/networksfieldName:mountPath,fieldValue:/var/run/calicofieldName:mountPath,fieldValue:/var/run/nodeagentfieldName:name,fieldValue:CALICO_DISABLE_FILE_LOGGINGfieldName:name,fieldValue:CALICO_IPV4POOL_CIDRfieldName:name,fieldValue:CALICO_IPV4POOL_IPIPfieldName:name,fieldValue:CALICO_NETWORKING_BACKENDfieldName:name,fieldValue:CALICO_NETWORKING_BACKENDfieldName:name,fieldValue:CLUSTER_TYPEfieldName:name,fieldValue:CNI_CONF_NAMEfieldName:name,fieldValue:CNI_MTUfieldName:name,fieldValue:CNI_NETWORK_CONFIGfieldName:name,fieldValue:DATASTORE_TYPEfieldName:name,fieldValue:FELIX_DEFAULTENDPOINTTOHOSTACTIONfieldName:name,fieldValue:FELIX_HEALTHENABLEDfieldName:name,fieldValue:FELIX_IPINIPMTUfieldName:name,fieldValue:FELIX_IPV6SUPPORTfieldName:name,fieldValue:FELIX_LOGSEVERITYSCREENfieldName:name,fieldValue:IPfieldName:name,fieldValue:IP_AUTODETECTION_METHODfieldName:name,fieldValue:KUBERNETES_NODE_NAMEfieldName:name,fieldValue:KUBERNETES_NODE_NAMEfieldName:name,fieldValue:NODENAMEfieldName:name,fieldValue:SLEEPfieldName:name,fieldValue:WAIT_FOR_DATASTOREfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-configfieldName:name,fieldValue:calico-nodefieldName:name,fieldValue:calico-nodefieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:flexvol-driverfieldName:name,fieldValue:flexvol-driver-hostfieldName:name,fieldValue:flexvol-driver-hostfieldName:name,fieldValue:host-local-net-dirfieldName:name,fieldValue:host-local-net-dirfieldName:name,fieldValue:install-cnifieldName:name,fieldValue:lib-modulesfieldName:name,fieldValue:lib-modulesfieldName:name,fieldValue:policysyncfieldName:name,fieldValue:policysyncfieldName:name,fieldValue:upgrade-ipamfieldName:name,fieldValue:var-lib-calicofieldName:name,fieldValue:var-lib-calicofieldName:name,fieldValue:var-run-calicofieldName:name,fieldValue:var-run-calicofieldName:name,fieldValue:xtables-lockfieldName:name,fieldValue:xtables-lockfieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:path,fieldValue:/etc/cni/net.dfieldName:path,fieldValue:/lib/modulesfieldName:path,fieldValue:/livenessfieldName:path,fieldValue:/opt/cni/binfieldName:path,fieldValue:/run/xtables.lockfieldName:path,fieldValue:/usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~udsfieldName:path,fieldValue:/var/lib/calicofieldName:path,fieldValue:/var/lib/cni/networksfieldName:path,fieldValue:/var/run/calicofieldName:path,fieldValue:/var/run/nodeagentfieldName:periodSeconds,fieldValue:10fieldName:periodSeconds,fieldValue:10fieldName:port,fieldValue:9099fieldName:priorityClassName,fieldValue:system-node-criticalfieldName:privileged,fieldValue:truefieldName:readOnly,fieldValue:truefieldName:scheduler.alpha.kubernetes.io/critical-pod,fieldValue:fieldName:serviceAccountName,fieldValue:calico-nodefieldName:terminationGracePeriodSeconds,fieldValue:0fieldName:type,fieldValue:DirectoryOrCreatefieldName:type,fieldValue:DirectoryOrCreatefieldName:type,fieldValue:FileOrCreatefieldName:type,fieldValue:RollingUpdatefieldName:value,fieldValue:10-calico.conflistfieldName:value,fieldValue:192.168.0.0/16fieldName:value,fieldValue:ACCEPTfieldName:value,fieldValue:AlwaysfieldName:value,fieldValue:autodetectfieldName:value,fieldValue:falsefieldName:value,fieldValue:falsefieldName:value,fieldValue:infofieldName:value,fieldValue:interface=eth0fieldName:value,fieldValue:k8s,bgpfieldName:value,fieldValue:kubernetesfieldName:value,fieldValue:truefieldName:value,fieldValue:truefieldName:value,fieldValue:true"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 20,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/calico-node",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:calico-nodefieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1176",
            "live_uid": "5bebffd0-ee6b-4b2d-8f54-3bd64c2a7a12",
            "name": "calico-node",
            "namespace": "kube-system",
            "resource_version": "1176",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "5bebffd0-ee6b-4b2d-8f54-3bd64c2a7a12",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-node\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-node\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:calico-nodefieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 21,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kube-system/deployments/calico-kube-controllers",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:beta.kubernetes.io/os,fieldValue:linuxfieldName:command[0],fieldValue:/usr/bin/check-statusfieldName:command[1],fieldValue:-rfieldName:effect,fieldValue:NoSchedulefieldName:image,fieldValue:calico/kube-controllers:v3.10.1fieldName:k8s-app,fieldValue:calico-kube-controllersfieldName:k8s-app,fieldValue:calico-kube-controllersfieldName:k8s-app,fieldValue:calico-kube-controllersfieldName:key,fieldValue:CriticalAddonsOnlyfieldName:key,fieldValue:node-role.kubernetes.io/masterfieldName:kind,fieldValue:DeploymentfieldName:name,fieldValue:DATASTORE_TYPEfieldName:name,fieldValue:ENABLED_CONTROLLERSfieldName:name,fieldValue:calico-kube-controllersfieldName:name,fieldValue:calico-kube-controllersfieldName:name,fieldValue:calico-kube-controllersfieldName:namespace,fieldValue:kube-systemfieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:priorityClassName,fieldValue:system-cluster-criticalfieldName:replicas,fieldValue:1fieldName:scheduler.alpha.kubernetes.io/critical-pod,fieldValue:fieldName:serviceAccountName,fieldValue:calico-kube-controllersfieldName:type,fieldValue:RecreatefieldName:value,fieldValue:kubernetesfieldName:value,fieldValue:node",
            "live_resource_version": "1103",
            "live_uid": "7c15f467-41af-433c-9ddd-b80897c82bc7",
            "name": "calico-kube-controllers",
            "namespace": "kube-system",
            "resource_version": "1103",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "7c15f467-41af-433c-9ddd-b80897c82bc7",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Source: calico/templates/calico-kube-controllers.yaml\n\n# See https://github.com/projectcalico/kube-controllers\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n  labels:\n    k8s-app: calico-kube-controllers\nspec:\n  # The controllers can only have a single active instance.\n  replicas: 1\n  selector:\n    matchLabels:\n      k8s-app: calico-kube-controllers\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      name: calico-kube-controllers\n      namespace: kube-system\n      labels:\n        k8s-app: calico-kube-controllers\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n    spec:\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      tolerations:\n        # Mark the pod as a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator: Exists\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n      serviceAccountName: calico-kube-controllers\n      priorityClassName: system-cluster-critical\n      containers:\n        - name: calico-kube-controllers\n          image: calico/kube-controllers:v3.10.1\n          env:\n            # Choose which controllers to run.\n            - name: ENABLED_CONTROLLERS\n              value: node\n            - name: DATASTORE_TYPE\n              value: kubernetes\n          readinessProbe:\n            exec:\n              command:\n              - /usr/bin/check-status\n              - -r",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    k8s-app: calico-kube-controllers\n  name: calico-kube-controllers\n  namespace: kube-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      k8s-app: calico-kube-controllers\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: \"\"\n      labels:\n        k8s-app: calico-kube-controllers\n      name: calico-kube-controllers\n      namespace: kube-system\n    spec:\n      containers:\n      - env:\n        - name: ENABLED_CONTROLLERS\n          value: node\n        - name: DATASTORE_TYPE\n          value: kubernetes\n        image: calico/kube-controllers:v3.10.1\n        name: calico-kube-controllers\n        readinessProbe:\n          exec:\n            command:\n            - /usr/bin/check-status\n            - -r\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      priorityClassName: system-cluster-critical\n      serviceAccountName: calico-kube-controllers\n      tolerations:\n      - key: CriticalAddonsOnly\n        operator: Exists\n      - effect: NoSchedule\n        key: node-role.kubernetes.io/master\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:beta.kubernetes.io/os,fieldValue:linuxfieldName:command[0],fieldValue:/usr/bin/check-statusfieldName:command[1],fieldValue:-rfieldName:effect,fieldValue:NoSchedulefieldName:image,fieldValue:calico/kube-controllers:v3.10.1fieldName:k8s-app,fieldValue:calico-kube-controllersfieldName:k8s-app,fieldValue:calico-kube-controllersfieldName:k8s-app,fieldValue:calico-kube-controllersfieldName:key,fieldValue:CriticalAddonsOnlyfieldName:key,fieldValue:node-role.kubernetes.io/masterfieldName:kind,fieldValue:DeploymentfieldName:name,fieldValue:DATASTORE_TYPEfieldName:name,fieldValue:ENABLED_CONTROLLERSfieldName:name,fieldValue:calico-kube-controllersfieldName:name,fieldValue:calico-kube-controllersfieldName:name,fieldValue:calico-kube-controllersfieldName:namespace,fieldValue:kube-systemfieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:priorityClassName,fieldValue:system-cluster-criticalfieldName:replicas,fieldValue:1fieldName:scheduler.alpha.kubernetes.io/critical-pod,fieldValue:fieldName:serviceAccountName,fieldValue:calico-kube-controllersfieldName:type,fieldValue:RecreatefieldName:value,fieldValue:kubernetesfieldName:value,fieldValue:node"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 22,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/calico-kube-controllers",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:calico-kube-controllersfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1186",
            "live_uid": "832dc99e-b694-4a38-8c30-0241dfd0313c",
            "name": "calico-kube-controllers",
            "namespace": "kube-system",
            "resource_version": "1186",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "832dc99e-b694-4a38-8c30-0241dfd0313c",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:calico-kube-controllersfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "dashboard_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kubernetes-dashboard",
            "ignore_fields": null,
            "kind": "Namespace",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:NamespacefieldName:name,fieldValue:kubernetes-dashboard",
            "live_resource_version": "964",
            "live_uid": "fe2ec0d9-211f-46fc-b39e-470fe5d3c30f",
            "name": "kubernetes-dashboard",
            "namespace": null,
            "resource_version": "964",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "fe2ec0d9-211f-46fc-b39e-470fe5d3c30f",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Copyright 2017 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: kubernetes-dashboard",
            "yaml_body_parsed": "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: kubernetes-dashboard\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:NamespacefieldName:name,fieldValue:kubernetes-dashboard"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kubernetes-dashboard/serviceaccounts/kubernetes-dashboard",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboard",
            "live_resource_version": "976",
            "live_uid": "935e3e24-1824-4df4-9f07-57122467fc5f",
            "name": "kubernetes-dashboard",
            "namespace": "kubernetes-dashboard",
            "resource_version": "976",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "935e3e24-1824-4df4-9f07-57122467fc5f",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboard"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kubernetes-dashboard/services/kubernetes-dashboard",
            "ignore_fields": null,
            "kind": "Service",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:ServicefieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:port,fieldValue:443fieldName:targetPort,fieldValue:8443",
            "live_resource_version": "1007",
            "live_uid": "b81e5483-1998-4794-9c17-66738581b208",
            "name": "kubernetes-dashboard",
            "namespace": "kubernetes-dashboard",
            "resource_version": "1007",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "b81e5483-1998-4794-9c17-66738581b208",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard",
            "yaml_body_parsed": "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n  - port: 443\n    targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:ServicefieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:port,fieldValue:443fieldName:targetPort,fieldValue:8443"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kubernetes-dashboard/secrets/kubernetes-dashboard-certs",
            "ignore_fields": null,
            "kind": "Secret",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:SecretfieldName:name,fieldValue:kubernetes-dashboard-certsfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:type,fieldValue:Opaque",
            "live_resource_version": "974",
            "live_uid": "2a28e26c-b76b-443f-b5a4-e373b6fa0410",
            "name": "kubernetes-dashboard-certs",
            "namespace": "kubernetes-dashboard",
            "resource_version": "974",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "2a28e26c-b76b-443f-b5a4-e373b6fa0410",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-certs\n  namespace: kubernetes-dashboard\ntype: Opaque",
            "yaml_body_parsed": "apiVersion: v1\ndata: (sensitive value)\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-certs\n  namespace: kubernetes-dashboard\ntype: Opaque\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:SecretfieldName:name,fieldValue:kubernetes-dashboard-certsfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:type,fieldValue:Opaque"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kubernetes-dashboard/secrets/kubernetes-dashboard-csrf",
            "ignore_fields": null,
            "kind": "Secret",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:csrf,fieldValue:fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:SecretfieldName:name,fieldValue:kubernetes-dashboard-csrffieldName:namespace,fieldValue:kubernetes-dashboardfieldName:type,fieldValue:Opaque",
            "live_resource_version": "1017",
            "live_uid": "90605ce0-a16e-44f0-8d5f-0cf3b9435d9f",
            "name": "kubernetes-dashboard-csrf",
            "namespace": "kubernetes-dashboard",
            "resource_version": "1017",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "90605ce0-a16e-44f0-8d5f-0cf3b9435d9f",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-csrf\n  namespace: kubernetes-dashboard\ntype: Opaque\ndata:\n  csrf: \"\"",
            "yaml_body_parsed": "apiVersion: v1\ndata: (sensitive value)\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-csrf\n  namespace: kubernetes-dashboard\ntype: Opaque\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:csrf,fieldValue:fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:SecretfieldName:name,fieldValue:kubernetes-dashboard-csrffieldName:namespace,fieldValue:kubernetes-dashboardfieldName:type,fieldValue:Opaque"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kubernetes-dashboard/secrets/kubernetes-dashboard-key-holder",
            "ignore_fields": null,
            "kind": "Secret",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:SecretfieldName:name,fieldValue:kubernetes-dashboard-key-holderfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:type,fieldValue:Opaque",
            "live_resource_version": "969",
            "live_uid": "4039e006-de0c-482f-83f5-1ad3380c0b1a",
            "name": "kubernetes-dashboard-key-holder",
            "namespace": "kubernetes-dashboard",
            "resource_version": "969",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "4039e006-de0c-482f-83f5-1ad3380c0b1a",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-key-holder\n  namespace: kubernetes-dashboard\ntype: Opaque",
            "yaml_body_parsed": "apiVersion: v1\ndata: (sensitive value)\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-key-holder\n  namespace: kubernetes-dashboard\ntype: Opaque\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:SecretfieldName:name,fieldValue:kubernetes-dashboard-key-holderfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:type,fieldValue:Opaque"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 6,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kubernetes-dashboard/configmaps/kubernetes-dashboard-settings",
            "ignore_fields": null,
            "kind": "ConfigMap",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:ConfigMapfieldName:name,fieldValue:kubernetes-dashboard-settingsfieldName:namespace,fieldValue:kubernetes-dashboard",
            "live_resource_version": "1085",
            "live_uid": "c7bcc9e6-3868-49c4-8de2-9fddcbc52312",
            "name": "kubernetes-dashboard-settings",
            "namespace": "kubernetes-dashboard",
            "resource_version": "1085",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "c7bcc9e6-3868-49c4-8de2-9fddcbc52312",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: ConfigMap\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-settings\n  namespace: kubernetes-dashboard",
            "yaml_body_parsed": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-settings\n  namespace: kubernetes-dashboard\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:ConfigMapfieldName:name,fieldValue:kubernetes-dashboard-settingsfieldName:namespace,fieldValue:kubernetes-dashboard"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 7,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/namespaces/kubernetes-dashboard/roles/kubernetes-dashboard",
            "ignore_fields": null,
            "kind": "Role",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:RolefieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:resourceNames[0],fieldValue:heapsterfieldName:resourceNames[0],fieldValue:heapsterfieldName:resourceNames[0],fieldValue:kubernetes-dashboard-key-holderfieldName:resourceNames[0],fieldValue:kubernetes-dashboard-settingsfieldName:resourceNames[1],fieldValue:dashboard-metrics-scraperfieldName:resourceNames[1],fieldValue:http:heapster:fieldName:resourceNames[1],fieldValue:kubernetes-dashboard-certsfieldName:resourceNames[2],fieldValue:https:heapster:fieldName:resourceNames[2],fieldValue:kubernetes-dashboard-csrffieldName:resourceNames[3],fieldValue:dashboard-metrics-scraperfieldName:resourceNames[4],fieldValue:http:dashboard-metrics-scraperfieldName:resources[0],fieldValue:configmapsfieldName:resources[0],fieldValue:secretsfieldName:resources[0],fieldValue:servicesfieldName:resources[0],fieldValue:services/proxyfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:proxyfieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[2],fieldValue:delete",
            "live_resource_version": "1064",
            "live_uid": "d1fd7505-ffb6-4699-81eb-74ab3b929d15",
            "name": "kubernetes-dashboard",
            "namespace": "kubernetes-dashboard",
            "resource_version": "1064",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "d1fd7505-ffb6-4699-81eb-74ab3b929d15",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nrules:\n  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.\n  - apiGroups: [\"\"]\n    resources: [\"secrets\"]\n    resourceNames: [\"kubernetes-dashboard-key-holder\", \"kubernetes-dashboard-certs\", \"kubernetes-dashboard-csrf\"]\n    verbs: [\"get\", \"update\", \"delete\"]\n    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.\n  - apiGroups: [\"\"]\n    resources: [\"configmaps\"]\n    resourceNames: [\"kubernetes-dashboard-settings\"]\n    verbs: [\"get\", \"update\"]\n    # Allow Dashboard to get metrics.\n  - apiGroups: [\"\"]\n    resources: [\"services\"]\n    resourceNames: [\"heapster\", \"dashboard-metrics-scraper\"]\n    verbs: [\"proxy\"]\n  - apiGroups: [\"\"]\n    resources: [\"services/proxy\"]\n    resourceNames: [\"heapster\", \"http:heapster:\", \"https:heapster:\", \"dashboard-metrics-scraper\", \"http:dashboard-metrics-scraper\"]\n    verbs: [\"get\"]",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nrules:\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - kubernetes-dashboard-key-holder\n  - kubernetes-dashboard-certs\n  - kubernetes-dashboard-csrf\n  resources:\n  - secrets\n  verbs:\n  - get\n  - update\n  - delete\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - kubernetes-dashboard-settings\n  resources:\n  - configmaps\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - heapster\n  - dashboard-metrics-scraper\n  resources:\n  - services\n  verbs:\n  - proxy\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - heapster\n  - 'http:heapster:'\n  - 'https:heapster:'\n  - dashboard-metrics-scraper\n  - http:dashboard-metrics-scraper\n  resources:\n  - services/proxy\n  verbs:\n  - get\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:RolefieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:resourceNames[0],fieldValue:heapsterfieldName:resourceNames[0],fieldValue:heapsterfieldName:resourceNames[0],fieldValue:kubernetes-dashboard-key-holderfieldName:resourceNames[0],fieldValue:kubernetes-dashboard-settingsfieldName:resourceNames[1],fieldValue:dashboard-metrics-scraperfieldName:resourceNames[1],fieldValue:http:heapster:fieldName:resourceNames[1],fieldValue:kubernetes-dashboard-certsfieldName:resourceNames[2],fieldValue:https:heapster:fieldName:resourceNames[2],fieldValue:kubernetes-dashboard-csrffieldName:resourceNames[3],fieldValue:dashboard-metrics-scraperfieldName:resourceNames[4],fieldValue:http:dashboard-metrics-scraperfieldName:resources[0],fieldValue:configmapsfieldName:resources[0],fieldValue:secretsfieldName:resources[0],fieldValue:servicesfieldName:resources[0],fieldValue:services/proxyfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:proxyfieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[2],fieldValue:delete"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 8,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterroles/kubernetes-dashboard",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:metrics.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:kubernetes-dashboardfieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:nodesfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:watch",
            "live_resource_version": "960",
            "live_uid": "82c89fd4-bca0-4e3f-ace4-73b7ac916627",
            "name": "kubernetes-dashboard",
            "namespace": null,
            "resource_version": "960",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "82c89fd4-bca0-4e3f-ace4-73b7ac916627",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\nrules:\n  # Allow Metrics Scraper to get metrics from the Metrics server\n  - apiGroups: [\"metrics.k8s.io\"]\n    resources: [\"pods\", \"nodes\"]\n    verbs: [\"get\", \"list\", \"watch\"]",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\nrules:\n- apiGroups:\n  - metrics.k8s.io\n  resources:\n  - pods\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:metrics.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:kubernetes-dashboardfieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:nodesfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:watch"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 9,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/namespaces/kubernetes-dashboard/rolebindings/kubernetes-dashboard",
            "ignore_fields": null,
            "kind": "RoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:RolefieldName:kind,fieldValue:RoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboard",
            "live_resource_version": "1014",
            "live_uid": "1966e3d1-a67a-4787-94e6-9786b5e8c0c8",
            "name": "kubernetes-dashboard",
            "namespace": "kubernetes-dashboard",
            "resource_version": "1014",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "1966e3d1-a67a-4787-94e6-9786b5e8c0c8",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: kubernetes-dashboard\nsubjects:\n  - kind: ServiceAccount\n    name: kubernetes-dashboard\n    namespace: kubernetes-dashboard",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: kubernetes-dashboard\nsubjects:\n- kind: ServiceAccount\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:kind,fieldValue:RolefieldName:kind,fieldValue:RoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboard"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 10,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/kubernetes-dashboard",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboard",
            "live_resource_version": "985",
            "live_uid": "ac8d405d-2ca9-4413-bd03-66c424699d89",
            "name": "kubernetes-dashboard",
            "namespace": null,
            "resource_version": "985",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "ac8d405d-2ca9-4413-bd03-66c424699d89",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kubernetes-dashboard\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: kubernetes-dashboard\nsubjects:\n  - kind: ServiceAccount\n    name: kubernetes-dashboard\n    namespace: kubernetes-dashboard",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kubernetes-dashboard\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: kubernetes-dashboard\nsubjects:\n- kind: ServiceAccount\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:namespace,fieldValue:kubernetes-dashboard"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 11,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kubernetes-dashboard/deployments/kubernetes-dashboard",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:allowPrivilegeEscalation,fieldValue:falsefieldName:apiVersion,fieldValue:apps/v1fieldName:args[0],fieldValue:--auto-generate-certificatesfieldName:args[1],fieldValue:--namespace=kubernetes-dashboardfieldName:args[2],fieldValue:--token-ttl=0fieldName:args[3],fieldValue:--sidecar-host=http://dashboard-metrics-scraper:8000fieldName:beta.kubernetes.io/os,fieldValue:linuxfieldName:cni,fieldValue:awsfieldName:containerPort,fieldValue:8443fieldName:effect,fieldValue:NoSchedulefieldName:image,fieldValue:kubernetesui/dashboard:v2.0.0-beta8fieldName:imagePullPolicy,fieldValue:AlwaysfieldName:initialDelaySeconds,fieldValue:30fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:key,fieldValue:node-role.kubernetes.io/masterfieldName:kind,fieldValue:DeploymentfieldName:mountPath,fieldValue:/certsfieldName:mountPath,fieldValue:/tmpfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboard-certsfieldName:name,fieldValue:kubernetes-dashboard-certsfieldName:name,fieldValue:tmp-volumefieldName:name,fieldValue:tmp-volumefieldName:namespace,fieldValue:kubernetes-dashboardfieldName:path,fieldValue:/fieldName:port,fieldValue:8443fieldName:protocol,fieldValue:TCPfieldName:readOnlyRootFilesystem,fieldValue:truefieldName:replicas,fieldValue:1fieldName:revisionHistoryLimit,fieldValue:10fieldName:runAsGroup,fieldValue:2001fieldName:runAsUser,fieldValue:1001fieldName:scheme,fieldValue:HTTPSfieldName:secretName,fieldValue:kubernetes-dashboard-certsfieldName:serviceAccountName,fieldValue:kubernetes-dashboardfieldName:timeoutSeconds,fieldValue:30",
            "live_resource_version": "1042",
            "live_uid": "ebeb06c6-0f6e-412a-805a-d436d8a96ac0",
            "name": "kubernetes-dashboard",
            "namespace": "kubernetes-dashboard",
            "resource_version": "1042",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "ebeb06c6-0f6e-412a-805a-d436d8a96ac0",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: Deployment\napiVersion: apps/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: kubernetes-dashboard\n  template:\n    metadata:\n      labels:\n        k8s-app: kubernetes-dashboard\n      annotations:\n        cni: \"aws\"\n    spec:\n      containers:\n        - name: kubernetes-dashboard\n          image: kubernetesui/dashboard:v2.0.0-beta8\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8443\n              protocol: TCP\n          args:\n            - --auto-generate-certificates\n            - --namespace=kubernetes-dashboard\n            - --token-ttl=0\n            - --sidecar-host=http://dashboard-metrics-scraper:8000\n            # Uncomment the following line to manually specify Kubernetes API server Host\n            # If not specified, Dashboard will attempt to auto discover the API server and connect\n            # to it. Uncomment only if the default does not work.\n            # - --apiserver-host=http://my-address:port\n          volumeMounts:\n            - name: kubernetes-dashboard-certs\n              mountPath: /certs\n              # Create on-disk volume to store exec logs\n            - mountPath: /tmp\n              name: tmp-volume\n          livenessProbe:\n            httpGet:\n              scheme: HTTPS\n              path: /\n              port: 8443\n            initialDelaySeconds: 30\n            timeoutSeconds: 30\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsUser: 1001\n            runAsGroup: 2001\n      volumes:\n        - name: kubernetes-dashboard-certs\n          secret:\n            secretName: kubernetes-dashboard-certs\n        - name: tmp-volume\n          emptyDir: {}\n      serviceAccountName: kubernetes-dashboard\n      nodeSelector:\n        \"beta.kubernetes.io/os\": linux\n      # Comment the following tolerations if Dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: kubernetes-dashboard\n  template:\n    metadata:\n      annotations:\n        cni: aws\n      labels:\n        k8s-app: kubernetes-dashboard\n    spec:\n      containers:\n      - args:\n        - --auto-generate-certificates\n        - --namespace=kubernetes-dashboard\n        - --token-ttl=0\n        - --sidecar-host=http://dashboard-metrics-scraper:8000\n        image: kubernetesui/dashboard:v2.0.0-beta8\n        imagePullPolicy: Always\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8443\n            scheme: HTTPS\n          initialDelaySeconds: 30\n          timeoutSeconds: 30\n        name: kubernetes-dashboard\n        ports:\n        - containerPort: 8443\n          protocol: TCP\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          runAsGroup: 2001\n          runAsUser: 1001\n        volumeMounts:\n        - mountPath: /certs\n          name: kubernetes-dashboard-certs\n        - mountPath: /tmp\n          name: tmp-volume\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      serviceAccountName: kubernetes-dashboard\n      tolerations:\n      - effect: NoSchedule\n        key: node-role.kubernetes.io/master\n      volumes:\n      - name: kubernetes-dashboard-certs\n        secret:\n          secretName: kubernetes-dashboard-certs\n      - emptyDir: {}\n        name: tmp-volume\n",
            "yaml_incluster": "fieldName:allowPrivilegeEscalation,fieldValue:falsefieldName:apiVersion,fieldValue:apps/v1fieldName:args[0],fieldValue:--auto-generate-certificatesfieldName:args[1],fieldValue:--namespace=kubernetes-dashboardfieldName:args[2],fieldValue:--token-ttl=0fieldName:args[3],fieldValue:--sidecar-host=http://dashboard-metrics-scraper:8000fieldName:beta.kubernetes.io/os,fieldValue:linuxfieldName:cni,fieldValue:awsfieldName:containerPort,fieldValue:8443fieldName:effect,fieldValue:NoSchedulefieldName:image,fieldValue:kubernetesui/dashboard:v2.0.0-beta8fieldName:imagePullPolicy,fieldValue:AlwaysfieldName:initialDelaySeconds,fieldValue:30fieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:k8s-app,fieldValue:kubernetes-dashboardfieldName:key,fieldValue:node-role.kubernetes.io/masterfieldName:kind,fieldValue:DeploymentfieldName:mountPath,fieldValue:/certsfieldName:mountPath,fieldValue:/tmpfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboardfieldName:name,fieldValue:kubernetes-dashboard-certsfieldName:name,fieldValue:kubernetes-dashboard-certsfieldName:name,fieldValue:tmp-volumefieldName:name,fieldValue:tmp-volumefieldName:namespace,fieldValue:kubernetes-dashboardfieldName:path,fieldValue:/fieldName:port,fieldValue:8443fieldName:protocol,fieldValue:TCPfieldName:readOnlyRootFilesystem,fieldValue:truefieldName:replicas,fieldValue:1fieldName:revisionHistoryLimit,fieldValue:10fieldName:runAsGroup,fieldValue:2001fieldName:runAsUser,fieldValue:1001fieldName:scheme,fieldValue:HTTPSfieldName:secretName,fieldValue:kubernetes-dashboard-certsfieldName:serviceAccountName,fieldValue:kubernetes-dashboardfieldName:timeoutSeconds,fieldValue:30"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 12,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kubernetes-dashboard/services/dashboard-metrics-scraper",
            "ignore_fields": null,
            "kind": "Service",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:kind,fieldValue:ServicefieldName:name,fieldValue:dashboard-metrics-scraperfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:port,fieldValue:8000fieldName:targetPort,fieldValue:8000",
            "live_resource_version": "971",
            "live_uid": "1ff5e913-6d7e-4c21-bbe1-0f249f0ea4e3",
            "name": "dashboard-metrics-scraper",
            "namespace": "kubernetes-dashboard",
            "resource_version": "971",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "1ff5e913-6d7e-4c21-bbe1-0f249f0ea4e3",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 8000\n      targetPort: 8000\n  selector:\n    k8s-app: dashboard-metrics-scraper",
            "yaml_body_parsed": "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n  - port: 8000\n    targetPort: 8000\n  selector:\n    k8s-app: dashboard-metrics-scraper\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:kind,fieldValue:ServicefieldName:name,fieldValue:dashboard-metrics-scraperfieldName:namespace,fieldValue:kubernetes-dashboardfieldName:port,fieldValue:8000fieldName:targetPort,fieldValue:8000"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 13,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kubernetes-dashboard/deployments/dashboard-metrics-scraper",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:allowPrivilegeEscalation,fieldValue:falsefieldName:apiVersion,fieldValue:apps/v1fieldName:beta.kubernetes.io/os,fieldValue:linuxfieldName:containerPort,fieldValue:8000fieldName:effect,fieldValue:NoSchedulefieldName:image,fieldValue:kubernetesui/metrics-scraper:v1.0.1fieldName:initialDelaySeconds,fieldValue:30fieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:key,fieldValue:node-role.kubernetes.io/masterfieldName:kind,fieldValue:DeploymentfieldName:mountPath,fieldValue:/tmpfieldName:name,fieldValue:dashboard-metrics-scraperfieldName:name,fieldValue:dashboard-metrics-scraperfieldName:name,fieldValue:tmp-volumefieldName:name,fieldValue:tmp-volumefieldName:namespace,fieldValue:kubernetes-dashboardfieldName:path,fieldValue:/fieldName:port,fieldValue:8000fieldName:protocol,fieldValue:TCPfieldName:readOnlyRootFilesystem,fieldValue:truefieldName:replicas,fieldValue:1fieldName:revisionHistoryLimit,fieldValue:10fieldName:runAsGroup,fieldValue:2001fieldName:runAsUser,fieldValue:1001fieldName:scheme,fieldValue:HTTPfieldName:seccomp.security.alpha.kubernetes.io/pod,fieldValue:runtime/defaultfieldName:serviceAccountName,fieldValue:kubernetes-dashboardfieldName:timeoutSeconds,fieldValue:30",
            "live_resource_version": "1072",
            "live_uid": "fcc20831-9567-473a-a236-c6b3cf486d5f",
            "name": "dashboard-metrics-scraper",
            "namespace": "kubernetes-dashboard",
            "resource_version": "1072",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "fcc20831-9567-473a-a236-c6b3cf486d5f",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: Deployment\napiVersion: apps/v1\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: dashboard-metrics-scraper\n  template:\n    metadata:\n      labels:\n        k8s-app: dashboard-metrics-scraper\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'\n    spec:\n      containers:\n        - name: dashboard-metrics-scraper\n          image: kubernetesui/metrics-scraper:v1.0.1\n          ports:\n            - containerPort: 8000\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              scheme: HTTP\n              path: /\n              port: 8000\n            initialDelaySeconds: 30\n            timeoutSeconds: 30\n          volumeMounts:\n          - mountPath: /tmp\n            name: tmp-volume\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsUser: 1001\n            runAsGroup: 2001\n      serviceAccountName: kubernetes-dashboard\n      nodeSelector:\n        \"beta.kubernetes.io/os\": linux\n      # Comment the following tolerations if Dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n      volumes:\n        - name: tmp-volume\n          emptyDir: {}",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: dashboard-metrics-scraper\n  template:\n    metadata:\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: runtime/default\n      labels:\n        k8s-app: dashboard-metrics-scraper\n    spec:\n      containers:\n      - image: kubernetesui/metrics-scraper:v1.0.1\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8000\n            scheme: HTTP\n          initialDelaySeconds: 30\n          timeoutSeconds: 30\n        name: dashboard-metrics-scraper\n        ports:\n        - containerPort: 8000\n          protocol: TCP\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          runAsGroup: 2001\n          runAsUser: 1001\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-volume\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      serviceAccountName: kubernetes-dashboard\n      tolerations:\n      - effect: NoSchedule\n        key: node-role.kubernetes.io/master\n      volumes:\n      - emptyDir: {}\n        name: tmp-volume\n",
            "yaml_incluster": "fieldName:allowPrivilegeEscalation,fieldValue:falsefieldName:apiVersion,fieldValue:apps/v1fieldName:beta.kubernetes.io/os,fieldValue:linuxfieldName:containerPort,fieldValue:8000fieldName:effect,fieldValue:NoSchedulefieldName:image,fieldValue:kubernetesui/metrics-scraper:v1.0.1fieldName:initialDelaySeconds,fieldValue:30fieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:k8s-app,fieldValue:dashboard-metrics-scraperfieldName:key,fieldValue:node-role.kubernetes.io/masterfieldName:kind,fieldValue:DeploymentfieldName:mountPath,fieldValue:/tmpfieldName:name,fieldValue:dashboard-metrics-scraperfieldName:name,fieldValue:dashboard-metrics-scraperfieldName:name,fieldValue:tmp-volumefieldName:name,fieldValue:tmp-volumefieldName:namespace,fieldValue:kubernetes-dashboardfieldName:path,fieldValue:/fieldName:port,fieldValue:8000fieldName:protocol,fieldValue:TCPfieldName:readOnlyRootFilesystem,fieldValue:truefieldName:replicas,fieldValue:1fieldName:revisionHistoryLimit,fieldValue:10fieldName:runAsGroup,fieldValue:2001fieldName:runAsUser,fieldValue:1001fieldName:scheme,fieldValue:HTTPfieldName:seccomp.security.alpha.kubernetes.io/pod,fieldValue:runtime/defaultfieldName:serviceAccountName,fieldValue:kubernetes-dashboardfieldName:timeoutSeconds,fieldValue:30"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.dashboard_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "external_dns_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/external-dns",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:external-dnsfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "937",
            "live_uid": "1f77df95-a9cb-47df-b0c5-34e4919e63ba",
            "name": "external-dns",
            "namespace": "kube-system",
            "resource_version": "937",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "1f77df95-a9cb-47df-b0c5-34e4919e63ba",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: external-dns\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: external-dns\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:external-dnsfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.external_dns_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/external-dns",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:extensionsfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:external-dnsfieldName:resources[0],fieldValue:ingressesfieldName:resources[0],fieldValue:nodesfieldName:resources[0],fieldValue:podsfieldName:resources[0],fieldValue:servicesfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:listfieldName:verbs[1],fieldValue:watchfieldName:verbs[1],fieldValue:watchfieldName:verbs[1],fieldValue:watchfieldName:verbs[2],fieldValue:listfieldName:verbs[2],fieldValue:listfieldName:verbs[2],fieldValue:list",
            "live_resource_version": "933",
            "live_uid": "48a26fa7-ae37-4fbf-8533-d83a5b08d2a5",
            "name": "external-dns",
            "namespace": "kube-system",
            "resource_version": "933",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "48a26fa7-ae37-4fbf-8533-d83a5b08d2a5",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: external-dns\n  namespace: kube-system\nrules:\n- apiGroups: [\"\"]\n  resources: [\"services\"]\n  verbs: [\"get\",\"watch\",\"list\"]\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\",\"watch\",\"list\"]\n- apiGroups: [\"extensions\"]\n  resources: [\"ingresses\"]\n  verbs: [\"get\",\"watch\",\"list\"]\n- apiGroups: [\"\"]\n  resources: [\"nodes\"]\n  verbs: [\"list\"]",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: external-dns\n  namespace: kube-system\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - services\n  verbs:\n  - get\n  - watch\n  - list\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - watch\n  - list\n- apiGroups:\n  - extensions\n  resources:\n  - ingresses\n  verbs:\n  - get\n  - watch\n  - list\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  verbs:\n  - list\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:extensionsfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:external-dnsfieldName:resources[0],fieldValue:ingressesfieldName:resources[0],fieldValue:nodesfieldName:resources[0],fieldValue:podsfieldName:resources[0],fieldValue:servicesfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:listfieldName:verbs[1],fieldValue:watchfieldName:verbs[1],fieldValue:watchfieldName:verbs[1],fieldValue:watchfieldName:verbs[2],fieldValue:listfieldName:verbs[2],fieldValue:listfieldName:verbs[2],fieldValue:list"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.external_dns_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/external-dns-viewer",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:external-dnsfieldName:name,fieldValue:external-dnsfieldName:name,fieldValue:external-dns-viewerfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "877",
            "live_uid": "56afcafd-5ecf-4ad1-a84e-464bf563096a",
            "name": "external-dns-viewer",
            "namespace": "kube-system",
            "resource_version": "877",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "56afcafd-5ecf-4ad1-a84e-464bf563096a",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: external-dns-viewer\n  namespace: kube-system\n\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: external-dns\nsubjects:\n- kind: ServiceAccount\n  name: external-dns\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: external-dns-viewer\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: external-dns\nsubjects:\n- kind: ServiceAccount\n  name: external-dns\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:external-dnsfieldName:name,fieldValue:external-dnsfieldName:name,fieldValue:external-dns-viewerfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.external_dns_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kube-system/deployments/external-dns",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:app,fieldValue:external-dnsfieldName:app,fieldValue:external-dnsfieldName:args[0],fieldValue:--source=servicefieldName:args[1],fieldValue:--source=ingressfieldName:args[2],fieldValue:--provider=awsfieldName:args[3],fieldValue:--policy=upsert-onlyfieldName:args[4],fieldValue:--aws-zone-type=fieldName:args[5],fieldValue:--registry=txtfieldName:args[6],fieldValue:--txt-owner-id=my-identifierfieldName:image,fieldValue:registry.opensource.zalan.do/teapot/external-dns:v0.7.1fieldName:kind,fieldValue:DeploymentfieldName:name,fieldValue:external-dnsfieldName:name,fieldValue:external-dnsfieldName:namespace,fieldValue:kube-systemfieldName:serviceAccountName,fieldValue:external-dnsfieldName:type,fieldValue:Recreate",
            "live_resource_version": "892",
            "live_uid": "56d35689-7ed4-4e6c-a90e-3792c646db34",
            "name": "external-dns",
            "namespace": "kube-system",
            "resource_version": "892",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "56d35689-7ed4-4e6c-a90e-3792c646db34",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: external-dns\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app: external-dns\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: external-dns\n    spec:\n      serviceAccountName: external-dns\n      containers:\n      - name: external-dns\n        image: registry.opensource.zalan.do/teapot/external-dns:v0.7.1\n        args:\n        - --source=service\n        - --source=ingress\n        # will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones\n        \n        - --provider=aws\n        - --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization\n        - --aws-zone-type= # only look at public hosted zones (valid values are public, private or no value for both)\n        - --registry=txt\n        - --txt-owner-id=my-identifier",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: external-dns\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app: external-dns\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: external-dns\n    spec:\n      containers:\n      - args:\n        - --source=service\n        - --source=ingress\n        - --provider=aws\n        - --policy=upsert-only\n        - --aws-zone-type=\n        - --registry=txt\n        - --txt-owner-id=my-identifier\n        image: registry.opensource.zalan.do/teapot/external-dns:v0.7.1\n        name: external-dns\n      serviceAccountName: external-dns\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:app,fieldValue:external-dnsfieldName:app,fieldValue:external-dnsfieldName:args[0],fieldValue:--source=servicefieldName:args[1],fieldValue:--source=ingressfieldName:args[2],fieldValue:--provider=awsfieldName:args[3],fieldValue:--policy=upsert-onlyfieldName:args[4],fieldValue:--aws-zone-type=fieldName:args[5],fieldValue:--registry=txtfieldName:args[6],fieldValue:--txt-owner-id=my-identifierfieldName:image,fieldValue:registry.opensource.zalan.do/teapot/external-dns:v0.7.1fieldName:kind,fieldValue:DeploymentfieldName:name,fieldValue:external-dnsfieldName:name,fieldValue:external-dnsfieldName:namespace,fieldValue:kube-systemfieldName:serviceAccountName,fieldValue:external-dnsfieldName:type,fieldValue:Recreate"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.external_dns_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "genie_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/genie-plugin",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:admissionregistration.k8s.iofieldName:apiGroups[0],fieldValue:alpha.network.k8s.iofieldName:apiGroups[0],fieldValue:alpha.network.k8s.iofieldName:apiGroups[0],fieldValue:k8s.cni.cncf.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:genie-pluginfieldName:resources[0],fieldValue:configmapsfieldName:resources[0],fieldValue:logicalnetworksfieldName:resources[0],fieldValue:network-attachment-definitionsfieldName:resources[0],fieldValue:physicalnetworksfieldName:resources[0],fieldValue:podsfieldName:resources[0],fieldValue:validatingwebhookconfigurationsfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[2],fieldValue:createfieldName:verbs[2],fieldValue:patchfieldName:verbs[2],fieldValue:patchfieldName:verbs[2],fieldValue:patchfieldName:verbs[3],fieldValue:delete",
            "live_resource_version": "943",
            "live_uid": "413023b6-4db7-46d9-b339-432c6da8ecc2",
            "name": "genie-plugin",
            "namespace": null,
            "resource_version": "943",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "413023b6-4db7-46d9-b339-432c6da8ecc2",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "---\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: genie-plugin\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - pods\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"alpha.network.k8s.io\"\n    resources:\n      - logicalnetworks\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"alpha.network.k8s.io\"\n    resources:\n      - physicalnetworks\n    verbs:\n      - get\n      - update\n      - patch\n  - apiGroups:\n      - \"k8s.cni.cncf.io\"\n    resources:\n      - network-attachment-definitions\n    verbs:\n      - get\n      - update\n  - apiGroups:\n      - \"\"\n    resources:\n      - configmaps\n    verbs:\n      - get\n  - apiGroups:\n      - \"admissionregistration.k8s.io\"\n    resources:\n      - validatingwebhookconfigurations\n    verbs:\n      - get\n      - update\n      - create\n      - delete",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: genie-plugin\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  verbs:\n  - get\n  - update\n  - patch\n- apiGroups:\n  - alpha.network.k8s.io\n  resources:\n  - logicalnetworks\n  verbs:\n  - get\n  - update\n  - patch\n- apiGroups:\n  - alpha.network.k8s.io\n  resources:\n  - physicalnetworks\n  verbs:\n  - get\n  - update\n  - patch\n- apiGroups:\n  - k8s.cni.cncf.io\n  resources:\n  - network-attachment-definitions\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - \"\"\n  resources:\n  - configmaps\n  verbs:\n  - get\n- apiGroups:\n  - admissionregistration.k8s.io\n  resources:\n  - validatingwebhookconfigurations\n  verbs:\n  - get\n  - update\n  - create\n  - delete\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:admissionregistration.k8s.iofieldName:apiGroups[0],fieldValue:alpha.network.k8s.iofieldName:apiGroups[0],fieldValue:alpha.network.k8s.iofieldName:apiGroups[0],fieldValue:k8s.cni.cncf.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:genie-pluginfieldName:resources[0],fieldValue:configmapsfieldName:resources[0],fieldValue:logicalnetworksfieldName:resources[0],fieldValue:network-attachment-definitionsfieldName:resources[0],fieldValue:physicalnetworksfieldName:resources[0],fieldValue:podsfieldName:resources[0],fieldValue:validatingwebhookconfigurationsfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[1],fieldValue:updatefieldName:verbs[2],fieldValue:createfieldName:verbs[2],fieldValue:patchfieldName:verbs[2],fieldValue:patchfieldName:verbs[2],fieldValue:patchfieldName:verbs[3],fieldValue:delete"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/genie-plugin",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:GroupfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:genie-pluginfieldName:name,fieldValue:genie-pluginfieldName:name,fieldValue:genie-pluginfieldName:name,fieldValue:system:authenticatedfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "882",
            "live_uid": "62a17039-2521-4432-b21d-a84b7a35ac10",
            "name": "genie-plugin",
            "namespace": null,
            "resource_version": "882",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "62a17039-2521-4432-b21d-a84b7a35ac10",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "kind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: genie-plugin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: genie-plugin\nsubjects:\n- kind: ServiceAccount\n  name: genie-plugin\n  namespace: kube-system\n- kind: Group\n  name: system:authenticated\n  apiGroup: rbac.authorization.k8s.io",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: genie-plugin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: genie-plugin\nsubjects:\n- kind: ServiceAccount\n  name: genie-plugin\n  namespace: kube-system\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: system:authenticated\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:GroupfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:genie-pluginfieldName:name,fieldValue:genie-pluginfieldName:name,fieldValue:genie-pluginfieldName:name,fieldValue:system:authenticatedfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/genie-plugin",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:genie-pluginfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "888",
            "live_uid": "8fcea4fd-e9a4-4da3-b2bf-5becb6700098",
            "name": "genie-plugin",
            "namespace": "kube-system",
            "resource_version": "888",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "8fcea4fd-e9a4-4da3-b2bf-5becb6700098",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: genie-plugin\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: genie-plugin\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:genie-pluginfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/configmaps/genie-config",
            "ignore_fields": null,
            "kind": "ConfigMap",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:cni_genie_network_config,fieldValue:{\n    \"name\": \"k8s-pod-network\",\n    \"type\": \"genie\",\n    \"cniVersion\": \"0.2.0\",\n    \"default_plugin\": \"calico\",\n    \"log_level\": \"info\",\n    \"datastore_type\": \"kubernetes\",\n    \"hostname\": \"__KUBERNETES_NODE_NAME__\",\n    \"policy\": {\n        \"type\": \"k8s\",\n        \"k8s_auth_token\": \"__SERVICEACCOUNT_TOKEN__\"\n    },\n    \"kubernetes\": {\n        \"k8s_api_root\": \"https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__\",\n        \"kubeconfig\": \"/etc/cni/net.d/genie-kubeconfig\"\n    },\n    \"romana_root\": \"http://__ROMANA_SERVICE_HOST__:__ROMANA_SERVICE_PORT__\",\n    \"segment_label_name\": \"romanaSegment\"\n}fieldName:kind,fieldValue:ConfigMapfieldName:name,fieldValue:genie-configfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "898",
            "live_uid": "a39af505-3536-46cb-b96d-1560378c0c28",
            "name": "genie-config",
            "namespace": "kube-system",
            "resource_version": "898",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "a39af505-3536-46cb-b96d-1560378c0c28",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# This ConfigMap can be used to configure a self-hosted CNI-Genie installation.\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: genie-config\n  namespace: kube-system\ndata:\n  # The CNI network configuration to install on each node.\n  cni_genie_network_config: |-\n    {\n        \"name\": \"k8s-pod-network\",\n        \"type\": \"genie\",\n        \"cniVersion\": \"0.2.0\",\n        \"default_plugin\": \"calico\",\n        \"log_level\": \"info\",\n        \"datastore_type\": \"kubernetes\",\n        \"hostname\": \"__KUBERNETES_NODE_NAME__\",\n        \"policy\": {\n            \"type\": \"k8s\",\n            \"k8s_auth_token\": \"__SERVICEACCOUNT_TOKEN__\"\n        },\n        \"kubernetes\": {\n            \"k8s_api_root\": \"https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__\",\n            \"kubeconfig\": \"/etc/cni/net.d/genie-kubeconfig\"\n        },\n        \"romana_root\": \"http://__ROMANA_SERVICE_HOST__:__ROMANA_SERVICE_PORT__\",\n        \"segment_label_name\": \"romanaSegment\"\n    }",
            "yaml_body_parsed": "apiVersion: v1\ndata:\n  cni_genie_network_config: |-\n    {\n        \"name\": \"k8s-pod-network\",\n        \"type\": \"genie\",\n        \"cniVersion\": \"0.2.0\",\n        \"default_plugin\": \"calico\",\n        \"log_level\": \"info\",\n        \"datastore_type\": \"kubernetes\",\n        \"hostname\": \"__KUBERNETES_NODE_NAME__\",\n        \"policy\": {\n            \"type\": \"k8s\",\n            \"k8s_auth_token\": \"__SERVICEACCOUNT_TOKEN__\"\n        },\n        \"kubernetes\": {\n            \"k8s_api_root\": \"https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__\",\n            \"kubeconfig\": \"/etc/cni/net.d/genie-kubeconfig\"\n        },\n        \"romana_root\": \"http://__ROMANA_SERVICE_HOST__:__ROMANA_SERVICE_PORT__\",\n        \"segment_label_name\": \"romanaSegment\"\n    }\nkind: ConfigMap\nmetadata:\n  name: genie-config\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:cni_genie_network_config,fieldValue:{\n    \"name\": \"k8s-pod-network\",\n    \"type\": \"genie\",\n    \"cniVersion\": \"0.2.0\",\n    \"default_plugin\": \"calico\",\n    \"log_level\": \"info\",\n    \"datastore_type\": \"kubernetes\",\n    \"hostname\": \"__KUBERNETES_NODE_NAME__\",\n    \"policy\": {\n        \"type\": \"k8s\",\n        \"k8s_auth_token\": \"__SERVICEACCOUNT_TOKEN__\"\n    },\n    \"kubernetes\": {\n        \"k8s_api_root\": \"https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__\",\n        \"kubeconfig\": \"/etc/cni/net.d/genie-kubeconfig\"\n    },\n    \"romana_root\": \"http://__ROMANA_SERVICE_HOST__:__ROMANA_SERVICE_PORT__\",\n    \"segment_label_name\": \"romanaSegment\"\n}fieldName:kind,fieldValue:ConfigMapfieldName:name,fieldValue:genie-configfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kube-system/daemonsets/genie-plugin",
            "ignore_fields": null,
            "kind": "DaemonSet",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:command[0],fieldValue:/launch.shfieldName:effect,fieldValue:NoExecutefieldName:effect,fieldValue:NoSchedulefieldName:effect,fieldValue:NoSchedulefieldName:fieldPath,fieldValue:spec.nodeNamefieldName:hostNetwork,fieldValue:truefieldName:hostPID,fieldValue:truefieldName:image,fieldValue:quay.io/huawei-cni-genie/genie-plugin:latestfieldName:imagePullPolicy,fieldValue:AlwaysfieldName:k8s-app,fieldValue:geniefieldName:k8s-app,fieldValue:geniefieldName:k8s-app,fieldValue:geniefieldName:key,fieldValue:CriticalAddonsOnlyfieldName:key,fieldValue:cni_genie_network_configfieldName:key,fieldValue:node.kubernetes.io/not-readyfieldName:kind,fieldValue:DaemonSetfieldName:mountPath,fieldValue:/host/etc/cni/net.dfieldName:mountPath,fieldValue:/host/opt/cni/binfieldName:name,fieldValue:CNI_NETWORK_CONFIGfieldName:name,fieldValue:KUBERNETES_NODE_NAMEfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:genie-configfieldName:name,fieldValue:genie-pluginfieldName:name,fieldValue:install-cnifieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:path,fieldValue:/etc/cni/net.dfieldName:path,fieldValue:/opt/cni/binfieldName:scheduler.alpha.kubernetes.io/critical-pod,fieldValue:fieldName:serviceAccountName,fieldValue:genie-plugin",
            "live_resource_version": "946",
            "live_uid": "ffff79ca-5210-4c66-af8f-ed776ad276e1",
            "name": "genie-plugin",
            "namespace": "kube-system",
            "resource_version": "946",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "ffff79ca-5210-4c66-af8f-ed776ad276e1",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Install CNI-Genie plugin on each slave node.\nkind: DaemonSet\napiVersion: apps/v1\nmetadata:\n  name: genie-plugin\n  namespace: kube-system\n  labels:\n    k8s-app: genie\nspec:\n  selector:\n    matchLabels:\n      k8s-app: genie\n  template:\n    metadata:\n      labels:\n        k8s-app: genie\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n    spec:\n      hostNetwork: true\n      hostPID: true\n      serviceAccountName: genie-plugin\n      containers:\n        # Create a container with install.sh that\n        # Installs required 00-genie.conf and genie binary\n        # on slave node.\n        - name: install-cni\n          image: quay.io/huawei-cni-genie/genie-plugin:latest\n          imagePullPolicy: Always\n          command: [\"/launch.sh\"]\n          env:\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n                  name: genie-config\n                  key: cni_genie_network_config\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n          volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n      tolerations:\n      - key: CriticalAddonsOnly\n        operator: Exists\n      - key: node.kubernetes.io/not-ready\n        effect: NoSchedule\n        operator: Exists\n      - operator: \"Exists\"\n        effect: \"NoSchedule\"\n      - operator: \"Exists\"\n        effect: \"NoExecute\"\n      volumes:\n        - name: cni-bin-dir\n          hostPath:\n            path: /opt/cni/bin\n        - name: cni-net-dir\n          hostPath:\n            path: /etc/cni/net.d",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    k8s-app: genie\n  name: genie-plugin\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      k8s-app: genie\n  template:\n    metadata:\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: \"\"\n      labels:\n        k8s-app: genie\n    spec:\n      containers:\n      - command:\n        - /launch.sh\n        env:\n        - name: CNI_NETWORK_CONFIG\n          valueFrom:\n            configMapKeyRef:\n              key: cni_genie_network_config\n              name: genie-config\n        - name: KUBERNETES_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        image: quay.io/huawei-cni-genie/genie-plugin:latest\n        imagePullPolicy: Always\n        name: install-cni\n        volumeMounts:\n        - mountPath: /host/opt/cni/bin\n          name: cni-bin-dir\n        - mountPath: /host/etc/cni/net.d\n          name: cni-net-dir\n      hostNetwork: true\n      hostPID: true\n      serviceAccountName: genie-plugin\n      tolerations:\n      - key: CriticalAddonsOnly\n        operator: Exists\n      - effect: NoSchedule\n        key: node.kubernetes.io/not-ready\n        operator: Exists\n      - effect: NoSchedule\n        operator: Exists\n      - effect: NoExecute\n        operator: Exists\n      volumes:\n      - hostPath:\n          path: /opt/cni/bin\n        name: cni-bin-dir\n      - hostPath:\n          path: /etc/cni/net.d\n        name: cni-net-dir\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:command[0],fieldValue:/launch.shfieldName:effect,fieldValue:NoExecutefieldName:effect,fieldValue:NoSchedulefieldName:effect,fieldValue:NoSchedulefieldName:fieldPath,fieldValue:spec.nodeNamefieldName:hostNetwork,fieldValue:truefieldName:hostPID,fieldValue:truefieldName:image,fieldValue:quay.io/huawei-cni-genie/genie-plugin:latestfieldName:imagePullPolicy,fieldValue:AlwaysfieldName:k8s-app,fieldValue:geniefieldName:k8s-app,fieldValue:geniefieldName:k8s-app,fieldValue:geniefieldName:key,fieldValue:CriticalAddonsOnlyfieldName:key,fieldValue:cni_genie_network_configfieldName:key,fieldValue:node.kubernetes.io/not-readyfieldName:kind,fieldValue:DaemonSetfieldName:mountPath,fieldValue:/host/etc/cni/net.dfieldName:mountPath,fieldValue:/host/opt/cni/binfieldName:name,fieldValue:CNI_NETWORK_CONFIGfieldName:name,fieldValue:KUBERNETES_NODE_NAMEfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-bin-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:cni-net-dirfieldName:name,fieldValue:genie-configfieldName:name,fieldValue:genie-pluginfieldName:name,fieldValue:install-cnifieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:ExistsfieldName:path,fieldValue:/etc/cni/net.dfieldName:path,fieldValue:/opt/cni/binfieldName:scheduler.alpha.kubernetes.io/critical-pod,fieldValue:fieldName:serviceAccountName,fieldValue:genie-plugin"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kube-system/deployments/genie-network-admission-controller",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:cni,fieldValue:awsfieldName:containerPort,fieldValue:8000fieldName:image,fieldValue:quay.io/huawei-cni-genie/genie-admission-controller:latestfieldName:imagePullPolicy,fieldValue:AlwaysfieldName:kind,fieldValue:DeploymentfieldName:name,fieldValue:genie-network-admission-controllerfieldName:name,fieldValue:genie-network-admission-controllerfieldName:namespace,fieldValue:kube-systemfieldName:role,fieldValue:genie-network-admission-controllerfieldName:role,fieldValue:genie-network-admission-controllerfieldName:role,fieldValue:genie-network-admission-controllerfieldName:scheduler.alpha.kubernetes.io/critical-pod,fieldValue:fieldName:serviceAccountName,fieldValue:genie-plugin",
            "live_resource_version": "907",
            "live_uid": "7f6c5e7f-7fbc-4772-8900-e4b273f50f13",
            "name": "genie-network-admission-controller",
            "namespace": "kube-system",
            "resource_version": "907",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "7f6c5e7f-7fbc-4772-8900-e4b273f50f13",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# ~Genie network admission controller daemonset configuration~\n# ~Genie network admission controller pods will run only in master nodes~\n# Changed to run as deployment on non master nodes for eks\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: genie-network-admission-controller\n  namespace: kube-system\n  labels:\n    role: genie-network-admission-controller\nspec:\n  selector:\n    matchLabels:\n      role: genie-network-admission-controller\n  template:\n    metadata:\n      labels:\n        role: genie-network-admission-controller\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n        # Admission controllers need to run with aws ip\n        cni: \"aws\"\n    spec:\n      serviceAccountName: genie-plugin\n      containers:\n        - name: genie-network-admission-controller\n          image: quay.io/huawei-cni-genie/genie-admission-controller:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8000",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    role: genie-network-admission-controller\n  name: genie-network-admission-controller\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      role: genie-network-admission-controller\n  template:\n    metadata:\n      annotations:\n        cni: aws\n        scheduler.alpha.kubernetes.io/critical-pod: \"\"\n      labels:\n        role: genie-network-admission-controller\n    spec:\n      containers:\n      - image: quay.io/huawei-cni-genie/genie-admission-controller:latest\n        imagePullPolicy: Always\n        name: genie-network-admission-controller\n        ports:\n        - containerPort: 8000\n      serviceAccountName: genie-plugin\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:cni,fieldValue:awsfieldName:containerPort,fieldValue:8000fieldName:image,fieldValue:quay.io/huawei-cni-genie/genie-admission-controller:latestfieldName:imagePullPolicy,fieldValue:AlwaysfieldName:kind,fieldValue:DeploymentfieldName:name,fieldValue:genie-network-admission-controllerfieldName:name,fieldValue:genie-network-admission-controllerfieldName:namespace,fieldValue:kube-systemfieldName:role,fieldValue:genie-network-admission-controllerfieldName:role,fieldValue:genie-network-admission-controllerfieldName:role,fieldValue:genie-network-admission-controllerfieldName:scheduler.alpha.kubernetes.io/critical-pod,fieldValue:fieldName:serviceAccountName,fieldValue:genie-plugin"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 6,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/services/genie-network-admission-controller",
            "ignore_fields": null,
            "kind": "Service",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServicefieldName:name,fieldValue:genie-network-admission-controllerfieldName:namespace,fieldValue:kube-systemfieldName:port,fieldValue:443fieldName:role,fieldValue:genie-network-admission-controllerfieldName:role,fieldValue:genie-network-admission-controllerfieldName:targetPort,fieldValue:8000",
            "live_resource_version": "939",
            "live_uid": "da6e4a26-5dc4-4ec7-b936-6e687e1e8b0b",
            "name": "genie-network-admission-controller",
            "namespace": "kube-system",
            "resource_version": "939",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "da6e4a26-5dc4-4ec7-b936-6e687e1e8b0b",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "# Genie network admission controller service\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: genie-network-admission-controller\n  name: genie-network-admission-controller\n  namespace: kube-system\nspec:\n  ports:\n    - port: 443\n      targetPort: 8000\n  selector:\n    role: genie-network-admission-controller",
            "yaml_body_parsed": "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: genie-network-admission-controller\n  name: genie-network-admission-controller\n  namespace: kube-system\nspec:\n  ports:\n  - port: 443\n    targetPort: 8000\n  selector:\n    role: genie-network-admission-controller\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServicefieldName:name,fieldValue:genie-network-admission-controllerfieldName:namespace,fieldValue:kube-systemfieldName:port,fieldValue:443fieldName:role,fieldValue:genie-network-admission-controllerfieldName:role,fieldValue:genie-network-admission-controllerfieldName:targetPort,fieldValue:8000"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "k8s_dns_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": true,
            "id": "/apis/apps/v1/namespaces/kube-system/deployments/coredns",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:add[0],fieldValue:NET_BIND_SERVICEfieldName:allowPrivilegeEscalation,fieldValue:falsefieldName:apiVersion,fieldValue:apps/v1fieldName:args[0],fieldValue:-conffieldName:args[1],fieldValue:/etc/coredns/CorefilefieldName:cni,fieldValue:awsfieldName:cni,fieldValue:awsfieldName:containerPort,fieldValue:53fieldName:containerPort,fieldValue:53fieldName:containerPort,fieldValue:9153fieldName:cpu,fieldValue:100mfieldName:defaultMode,fieldValue:420fieldName:dnsPolicy,fieldValue:DefaultfieldName:drop[0],fieldValue:allfieldName:effect,fieldValue:NoSchedulefieldName:eks.amazonaws.com/component,fieldValue:corednsfieldName:eks.amazonaws.com/component,fieldValue:corednsfieldName:eks.amazonaws.com/component,fieldValue:corednsfieldName:failureThreshold,fieldValue:5fieldName:image,fieldValue:602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.6.6fieldName:imagePullPolicy,fieldValue:IfNotPresentfieldName:initialDelaySeconds,fieldValue:60fieldName:k8s-app,fieldValue:kube-dnsfieldName:k8s-app,fieldValue:kube-dnsfieldName:k8s-app,fieldValue:kube-dnsfieldName:key,fieldValue:CorefilefieldName:key,fieldValue:CriticalAddonsOnlyfieldName:key,fieldValue:beta.kubernetes.io/archfieldName:key,fieldValue:beta.kubernetes.io/osfieldName:key,fieldValue:k8s-appfieldName:key,fieldValue:node-role.kubernetes.io/masterfieldName:kind,fieldValue:DeploymentfieldName:kubernetes.io/name,fieldValue:CoreDNSfieldName:maxSurge,fieldValue:1fieldName:maxUnavailable,fieldValue:1fieldName:memory,fieldValue:170MifieldName:memory,fieldValue:70MifieldName:mountPath,fieldValue:/etc/corednsfieldName:name,fieldValue:config-volumefieldName:name,fieldValue:config-volumefieldName:name,fieldValue:corednsfieldName:name,fieldValue:corednsfieldName:name,fieldValue:corednsfieldName:name,fieldValue:dnsfieldName:name,fieldValue:dns-tcpfieldName:name,fieldValue:metricsfieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:path,fieldValue:/healthfieldName:path,fieldValue:CorefilefieldName:periodSeconds,fieldValue:10fieldName:port,fieldValue:8080fieldName:priorityClassName,fieldValue:system-node-criticalfieldName:progressDeadlineSeconds,fieldValue:2147483647fieldName:protocol,fieldValue:TCPfieldName:protocol,fieldValue:TCPfieldName:protocol,fieldValue:UDPfieldName:readOnly,fieldValue:truefieldName:readOnlyRootFilesystem,fieldValue:truefieldName:replicas,fieldValue:2fieldName:restartPolicy,fieldValue:AlwaysfieldName:revisionHistoryLimit,fieldValue:2147483647fieldName:schedulerName,fieldValue:default-schedulerfieldName:scheme,fieldValue:HTTPfieldName:serviceAccount,fieldValue:corednsfieldName:serviceAccountName,fieldValue:corednsfieldName:successThreshold,fieldValue:1fieldName:terminationGracePeriodSeconds,fieldValue:30fieldName:terminationMessagePath,fieldValue:/dev/termination-logfieldName:terminationMessagePolicy,fieldValue:FilefieldName:timeoutSeconds,fieldValue:5fieldName:topologyKey,fieldValue:kubernetes.io/hostnamefieldName:type,fieldValue:RollingUpdatefieldName:values[0],fieldValue:amd64fieldName:values[0],fieldValue:kube-dnsfieldName:values[0],fieldValue:linuxfieldName:weight,fieldValue:100",
            "live_resource_version": "1148",
            "live_uid": "4e4293e2-5d66-4731-8574-3578dbfd2ca1",
            "name": "coredns",
            "namespace": "kube-system",
            "resource_version": "1148",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "4e4293e2-5d66-4731-8574-3578dbfd2ca1",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    cni: aws\n  labels:\n    eks.amazonaws.com/component: coredns\n    k8s-app: kube-dns\n    kubernetes.io/name: CoreDNS\n  name: coredns\n  namespace: kube-system\nspec:\n  progressDeadlineSeconds: 2147483647\n  replicas: 2\n  revisionHistoryLimit: 2147483647\n  selector:\n    matchLabels:\n      eks.amazonaws.com/component: coredns\n      k8s-app: kube-dns\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        eks.amazonaws.com/component: coredns\n        k8s-app: kube-dns\n      annotations:\n        cni: aws\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: beta.kubernetes.io/os\n                operator: In\n                values:\n                - linux\n              - key: beta.kubernetes.io/arch\n                operator: In\n                values:\n                - amd64\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: k8s-app\n                  operator: In\n                  values:\n                  - kube-dns\n              topologyKey: kubernetes.io/hostname\n            weight: 100\n      containers:\n      - args:\n        - -conf\n        - /etc/coredns/Corefile\n        image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.6.6\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          failureThreshold: 5\n          httpGet:\n            path: /health\n            port: 8080\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        name: coredns\n        ports:\n        - containerPort: 53\n          name: dns\n          protocol: UDP\n        - containerPort: 53\n          name: dns-tcp\n          protocol: TCP\n        - containerPort: 9153\n          name: metrics\n          protocol: TCP\n        resources:\n          limits:\n            memory: 170Mi\n          requests:\n            cpu: 100m\n            memory: 70Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            add:\n            - NET_BIND_SERVICE\n            drop:\n            - all\n          readOnlyRootFilesystem: true\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /etc/coredns\n          name: config-volume\n          readOnly: true\n      dnsPolicy: Default\n      priorityClassName: system-node-critical\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext: {}\n      serviceAccount: coredns\n      serviceAccountName: coredns\n      terminationGracePeriodSeconds: 30\n      tolerations:\n      - effect: NoSchedule\n        key: node-role.kubernetes.io/master\n      - key: CriticalAddonsOnly\n        operator: Exists\n      volumes:\n      - configMap:\n          defaultMode: 420\n          items:\n          - key: Corefile\n            path: Corefile\n          name: coredns\n        name: config-volume",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    cni: aws\n  labels:\n    eks.amazonaws.com/component: coredns\n    k8s-app: kube-dns\n    kubernetes.io/name: CoreDNS\n  name: coredns\n  namespace: kube-system\nspec:\n  progressDeadlineSeconds: 2147483647\n  replicas: 2\n  revisionHistoryLimit: 2147483647\n  selector:\n    matchLabels:\n      eks.amazonaws.com/component: coredns\n      k8s-app: kube-dns\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        cni: aws\n      creationTimestamp: null\n      labels:\n        eks.amazonaws.com/component: coredns\n        k8s-app: kube-dns\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: beta.kubernetes.io/os\n                operator: In\n                values:\n                - linux\n              - key: beta.kubernetes.io/arch\n                operator: In\n                values:\n                - amd64\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: k8s-app\n                  operator: In\n                  values:\n                  - kube-dns\n              topologyKey: kubernetes.io/hostname\n            weight: 100\n      containers:\n      - args:\n        - -conf\n        - /etc/coredns/Corefile\n        image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.6.6\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          failureThreshold: 5\n          httpGet:\n            path: /health\n            port: 8080\n            scheme: HTTP\n          initialDelaySeconds: 60\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        name: coredns\n        ports:\n        - containerPort: 53\n          name: dns\n          protocol: UDP\n        - containerPort: 53\n          name: dns-tcp\n          protocol: TCP\n        - containerPort: 9153\n          name: metrics\n          protocol: TCP\n        resources:\n          limits:\n            memory: 170Mi\n          requests:\n            cpu: 100m\n            memory: 70Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            add:\n            - NET_BIND_SERVICE\n            drop:\n            - all\n          readOnlyRootFilesystem: true\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /etc/coredns\n          name: config-volume\n          readOnly: true\n      dnsPolicy: Default\n      priorityClassName: system-node-critical\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext: {}\n      serviceAccount: coredns\n      serviceAccountName: coredns\n      terminationGracePeriodSeconds: 30\n      tolerations:\n      - effect: NoSchedule\n        key: node-role.kubernetes.io/master\n      - key: CriticalAddonsOnly\n        operator: Exists\n      volumes:\n      - configMap:\n          defaultMode: 420\n          items:\n          - key: Corefile\n            path: Corefile\n          name: coredns\n        name: config-volume\n",
            "yaml_incluster": "fieldName:add[0],fieldValue:NET_BIND_SERVICEfieldName:allowPrivilegeEscalation,fieldValue:falsefieldName:apiVersion,fieldValue:apps/v1fieldName:args[0],fieldValue:-conffieldName:args[1],fieldValue:/etc/coredns/CorefilefieldName:cni,fieldValue:awsfieldName:cni,fieldValue:awsfieldName:containerPort,fieldValue:53fieldName:containerPort,fieldValue:53fieldName:containerPort,fieldValue:9153fieldName:cpu,fieldValue:100mfieldName:defaultMode,fieldValue:420fieldName:dnsPolicy,fieldValue:DefaultfieldName:drop[0],fieldValue:allfieldName:effect,fieldValue:NoSchedulefieldName:eks.amazonaws.com/component,fieldValue:corednsfieldName:eks.amazonaws.com/component,fieldValue:corednsfieldName:eks.amazonaws.com/component,fieldValue:corednsfieldName:failureThreshold,fieldValue:5fieldName:image,fieldValue:602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.6.6fieldName:imagePullPolicy,fieldValue:IfNotPresentfieldName:initialDelaySeconds,fieldValue:60fieldName:k8s-app,fieldValue:kube-dnsfieldName:k8s-app,fieldValue:kube-dnsfieldName:k8s-app,fieldValue:kube-dnsfieldName:key,fieldValue:CorefilefieldName:key,fieldValue:CriticalAddonsOnlyfieldName:key,fieldValue:beta.kubernetes.io/archfieldName:key,fieldValue:beta.kubernetes.io/osfieldName:key,fieldValue:k8s-appfieldName:key,fieldValue:node-role.kubernetes.io/masterfieldName:kind,fieldValue:DeploymentfieldName:kubernetes.io/name,fieldValue:CoreDNSfieldName:maxSurge,fieldValue:1fieldName:maxUnavailable,fieldValue:1fieldName:memory,fieldValue:170MifieldName:memory,fieldValue:70MifieldName:mountPath,fieldValue:/etc/corednsfieldName:name,fieldValue:config-volumefieldName:name,fieldValue:config-volumefieldName:name,fieldValue:corednsfieldName:name,fieldValue:corednsfieldName:name,fieldValue:corednsfieldName:name,fieldValue:dnsfieldName:name,fieldValue:dns-tcpfieldName:name,fieldValue:metricsfieldName:namespace,fieldValue:kube-systemfieldName:operator,fieldValue:ExistsfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:operator,fieldValue:InfieldName:path,fieldValue:/healthfieldName:path,fieldValue:CorefilefieldName:periodSeconds,fieldValue:10fieldName:port,fieldValue:8080fieldName:priorityClassName,fieldValue:system-node-criticalfieldName:progressDeadlineSeconds,fieldValue:2147483647fieldName:protocol,fieldValue:TCPfieldName:protocol,fieldValue:TCPfieldName:protocol,fieldValue:UDPfieldName:readOnly,fieldValue:truefieldName:readOnlyRootFilesystem,fieldValue:truefieldName:replicas,fieldValue:2fieldName:restartPolicy,fieldValue:AlwaysfieldName:revisionHistoryLimit,fieldValue:2147483647fieldName:schedulerName,fieldValue:default-schedulerfieldName:scheme,fieldValue:HTTPfieldName:serviceAccount,fieldValue:corednsfieldName:serviceAccountName,fieldValue:corednsfieldName:successThreshold,fieldValue:1fieldName:terminationGracePeriodSeconds,fieldValue:30fieldName:terminationMessagePath,fieldValue:/dev/termination-logfieldName:terminationMessagePolicy,fieldValue:FilefieldName:timeoutSeconds,fieldValue:5fieldName:topologyKey,fieldValue:kubernetes.io/hostnamefieldName:type,fieldValue:RollingUpdatefieldName:values[0],fieldValue:amd64fieldName:values[0],fieldValue:kube-dnsfieldName:values[0],fieldValue:linuxfieldName:weight,fieldValue:100"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.data.kubectl_path_documents.k8s_dns_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "metrics_server_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterroles/system%3Aaggregated-metrics-reader",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:metrics.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:system:aggregated-metrics-readerfieldName:rbac.authorization.k8s.io/aggregate-to-admin,fieldValue:truefieldName:rbac.authorization.k8s.io/aggregate-to-edit,fieldValue:truefieldName:rbac.authorization.k8s.io/aggregate-to-view,fieldValue:truefieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:nodesfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:watch",
            "live_resource_version": "984",
            "live_uid": "40678af9-5c90-48f7-8e08-0f6ab27fd430",
            "name": "system:aggregated-metrics-reader",
            "namespace": null,
            "resource_version": "984",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "40678af9-5c90-48f7-8e08-0f6ab27fd430",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:aggregated-metrics-reader\n  labels:\n    rbac.authorization.k8s.io/aggregate-to-view: \"true\"\n    rbac.authorization.k8s.io/aggregate-to-edit: \"true\"\n    rbac.authorization.k8s.io/aggregate-to-admin: \"true\"\nrules:\n- apiGroups: [\"metrics.k8s.io\"]\n  resources: [\"pods\", \"nodes\"]\n  verbs: [\"get\", \"list\", \"watch\"]",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    rbac.authorization.k8s.io/aggregate-to-admin: \"true\"\n    rbac.authorization.k8s.io/aggregate-to-edit: \"true\"\n    rbac.authorization.k8s.io/aggregate-to-view: \"true\"\n  name: system:aggregated-metrics-reader\nrules:\n- apiGroups:\n  - metrics.k8s.io\n  resources:\n  - pods\n  - nodes\n  verbs:\n  - get\n  - list\n  - watch\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:metrics.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:system:aggregated-metrics-readerfieldName:rbac.authorization.k8s.io/aggregate-to-admin,fieldValue:truefieldName:rbac.authorization.k8s.io/aggregate-to-edit,fieldValue:truefieldName:rbac.authorization.k8s.io/aggregate-to-view,fieldValue:truefieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:nodesfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:watch"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/metrics-server%3Asystem%3Aauth-delegator",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:metrics-server:system:auth-delegatorfieldName:name,fieldValue:system:auth-delegatorfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1018",
            "live_uid": "8b4466a2-b921-402d-93cb-25b753b3b69f",
            "name": "metrics-server:system:auth-delegator",
            "namespace": null,
            "resource_version": "1018",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "8b4466a2-b921-402d-93cb-25b753b3b69f",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: metrics-server:system:auth-delegator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: metrics-server:system:auth-delegator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:metrics-server:system:auth-delegatorfieldName:name,fieldValue:system:auth-delegatorfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/namespaces/kube-system/rolebindings/metrics-server-auth-reader",
            "ignore_fields": null,
            "kind": "RoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:RolefieldName:kind,fieldValue:RoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:extension-apiserver-authentication-readerfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:metrics-server-auth-readerfieldName:namespace,fieldValue:kube-systemfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "991",
            "live_uid": "8d0a2011-80c7-4bc9-a2a7-c77f277dc867",
            "name": "metrics-server-auth-reader",
            "namespace": "kube-system",
            "resource_version": "991",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "8d0a2011-80c7-4bc9-a2a7-c77f277dc867",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:RolefieldName:kind,fieldValue:RoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:extension-apiserver-authentication-readerfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:metrics-server-auth-readerfieldName:namespace,fieldValue:kube-systemfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiregistration.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiregistration.k8s.io/v1beta1/apiservices/v1beta1.metrics.k8s.io",
            "ignore_fields": null,
            "kind": "APIService",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiregistration.k8s.io/v1beta1fieldName:group,fieldValue:metrics.k8s.iofieldName:groupPriorityMinimum,fieldValue:100fieldName:insecureSkipTLSVerify,fieldValue:truefieldName:kind,fieldValue:APIServicefieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:v1beta1.metrics.k8s.iofieldName:namespace,fieldValue:kube-systemfieldName:version,fieldValue:v1beta1fieldName:versionPriority,fieldValue:100",
            "live_resource_version": "983",
            "live_uid": "333aeb76-8dc2-49c0-a05b-a46830041338",
            "name": "v1beta1.metrics.k8s.io",
            "namespace": null,
            "resource_version": "983",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "333aeb76-8dc2-49c0-a05b-a46830041338",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1beta1.metrics.k8s.io\nspec:\n  service:\n    name: metrics-server\n    namespace: kube-system\n  group: metrics.k8s.io\n  version: v1beta1\n  insecureSkipTLSVerify: true\n  groupPriorityMinimum: 100\n  versionPriority: 100",
            "yaml_body_parsed": "apiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1beta1.metrics.k8s.io\nspec:\n  group: metrics.k8s.io\n  groupPriorityMinimum: 100\n  insecureSkipTLSVerify: true\n  service:\n    name: metrics-server\n    namespace: kube-system\n  version: v1beta1\n  versionPriority: 100\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiregistration.k8s.io/v1beta1fieldName:group,fieldValue:metrics.k8s.iofieldName:groupPriorityMinimum,fieldValue:100fieldName:insecureSkipTLSVerify,fieldValue:truefieldName:kind,fieldValue:APIServicefieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:v1beta1.metrics.k8s.iofieldName:namespace,fieldValue:kube-systemfieldName:version,fieldValue:v1beta1fieldName:versionPriority,fieldValue:100"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/metrics-server",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:metrics-serverfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1031",
            "live_uid": "6d003ace-9921-45f3-bc08-fdb240828d50",
            "name": "metrics-server",
            "namespace": "kube-system",
            "resource_version": "1031",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "6d003ace-9921-45f3-bc08-fdb240828d50",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:metrics-serverfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kube-system/deployments/metrics-server",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:args[0],fieldValue:--cert-dir=/tmpfieldName:args[1],fieldValue:--secure-port=4443fieldName:cni,fieldValue:awsfieldName:containerPort,fieldValue:4443fieldName:image,fieldValue:k8s.gcr.io/metrics-server/metrics-server:v0.3.7fieldName:imagePullPolicy,fieldValue:IfNotPresentfieldName:k8s-app,fieldValue:metrics-serverfieldName:k8s-app,fieldValue:metrics-serverfieldName:k8s-app,fieldValue:metrics-serverfieldName:kind,fieldValue:DeploymentfieldName:kubernetes.io/arch,fieldValue:amd64fieldName:kubernetes.io/os,fieldValue:linuxfieldName:mountPath,fieldValue:/tmpfieldName:name,fieldValue:main-portfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:tmp-dirfieldName:name,fieldValue:tmp-dirfieldName:namespace,fieldValue:kube-systemfieldName:protocol,fieldValue:TCPfieldName:readOnlyRootFilesystem,fieldValue:truefieldName:runAsNonRoot,fieldValue:truefieldName:runAsUser,fieldValue:1000fieldName:serviceAccountName,fieldValue:metrics-server",
            "live_resource_version": "1000",
            "live_uid": "7aec8a2b-8850-4b27-a765-2367f2a37aab",
            "name": "metrics-server",
            "namespace": "kube-system",
            "resource_version": "1000",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "7aec8a2b-8850-4b27-a765-2367f2a37aab",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    k8s-app: metrics-server\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n  template:\n    metadata:\n      name: metrics-server\n      labels:\n        k8s-app: metrics-server\n      annotations:\n        cni: \"aws\"\n    spec:\n      serviceAccountName: metrics-server\n      volumes:\n      # mount in tmp so we can safely use from-scratch images and/or read-only containers\n      - name: tmp-dir\n        emptyDir: {}\n      containers:\n      - name: metrics-server\n        image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7\n        imagePullPolicy: IfNotPresent\n        args:\n          - --cert-dir=/tmp\n          - --secure-port=4443\n        ports:\n        - name: main-port\n          containerPort: 4443\n          protocol: TCP\n        securityContext:\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1000\n        volumeMounts:\n        - name: tmp-dir\n          mountPath: /tmp\n      nodeSelector:\n        kubernetes.io/os: linux\n        kubernetes.io/arch: \"amd64\"",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    k8s-app: metrics-server\n  name: metrics-server\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n  template:\n    metadata:\n      annotations:\n        cni: aws\n      labels:\n        k8s-app: metrics-server\n      name: metrics-server\n    spec:\n      containers:\n      - args:\n        - --cert-dir=/tmp\n        - --secure-port=4443\n        image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7\n        imagePullPolicy: IfNotPresent\n        name: metrics-server\n        ports:\n        - containerPort: 4443\n          name: main-port\n          protocol: TCP\n        securityContext:\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1000\n        volumeMounts:\n        - mountPath: /tmp\n          name: tmp-dir\n      nodeSelector:\n        kubernetes.io/arch: amd64\n        kubernetes.io/os: linux\n      serviceAccountName: metrics-server\n      volumes:\n      - emptyDir: {}\n        name: tmp-dir\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:args[0],fieldValue:--cert-dir=/tmpfieldName:args[1],fieldValue:--secure-port=4443fieldName:cni,fieldValue:awsfieldName:containerPort,fieldValue:4443fieldName:image,fieldValue:k8s.gcr.io/metrics-server/metrics-server:v0.3.7fieldName:imagePullPolicy,fieldValue:IfNotPresentfieldName:k8s-app,fieldValue:metrics-serverfieldName:k8s-app,fieldValue:metrics-serverfieldName:k8s-app,fieldValue:metrics-serverfieldName:kind,fieldValue:DeploymentfieldName:kubernetes.io/arch,fieldValue:amd64fieldName:kubernetes.io/os,fieldValue:linuxfieldName:mountPath,fieldValue:/tmpfieldName:name,fieldValue:main-portfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:tmp-dirfieldName:name,fieldValue:tmp-dirfieldName:namespace,fieldValue:kube-systemfieldName:protocol,fieldValue:TCPfieldName:readOnlyRootFilesystem,fieldValue:truefieldName:runAsNonRoot,fieldValue:truefieldName:runAsUser,fieldValue:1000fieldName:serviceAccountName,fieldValue:metrics-server"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 6,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/services/metrics-server",
            "ignore_fields": null,
            "kind": "Service",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:metrics-serverfieldName:kind,fieldValue:ServicefieldName:kubernetes.io/cluster-service,fieldValue:truefieldName:kubernetes.io/name,fieldValue:Metrics-serverfieldName:name,fieldValue:metrics-serverfieldName:namespace,fieldValue:kube-systemfieldName:port,fieldValue:443fieldName:protocol,fieldValue:TCPfieldName:targetPort,fieldValue:main-port",
            "live_resource_version": "1024",
            "live_uid": "a506d976-8906-4772-ab95-6802017c1085",
            "name": "metrics-server",
            "namespace": "kube-system",
            "resource_version": "1024",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "a506d976-8906-4772-ab95-6802017c1085",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: Service\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    kubernetes.io/name: \"Metrics-server\"\n    kubernetes.io/cluster-service: \"true\"\nspec:\n  selector:\n    k8s-app: metrics-server\n  ports:\n  - port: 443\n    protocol: TCP\n    targetPort: main-port",
            "yaml_body_parsed": "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    kubernetes.io/name: Metrics-server\n  name: metrics-server\n  namespace: kube-system\nspec:\n  ports:\n  - port: 443\n    protocol: TCP\n    targetPort: main-port\n  selector:\n    k8s-app: metrics-server\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:k8s-app,fieldValue:metrics-serverfieldName:kind,fieldValue:ServicefieldName:kubernetes.io/cluster-service,fieldValue:truefieldName:kubernetes.io/name,fieldValue:Metrics-serverfieldName:name,fieldValue:metrics-serverfieldName:namespace,fieldValue:kube-systemfieldName:port,fieldValue:443fieldName:protocol,fieldValue:TCPfieldName:targetPort,fieldValue:main-port"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 7,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterroles/system%3Ametrics-server",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:system:metrics-serverfieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:nodesfieldName:resources[2],fieldValue:nodes/statsfieldName:resources[3],fieldValue:namespacesfieldName:resources[4],fieldValue:configmapsfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:watch",
            "live_resource_version": "981",
            "live_uid": "c610436c-1396-4faa-a62a-f00c0ceb3905",
            "name": "system:metrics-server",
            "namespace": null,
            "resource_version": "981",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "c610436c-1396-4faa-a62a-f00c0ceb3905",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:metrics-server\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  - configmaps\n  verbs:\n  - get\n  - list\n  - watch",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:metrics-server\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  - configmaps\n  verbs:\n  - get\n  - list\n  - watch\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:system:metrics-serverfieldName:resources[0],fieldValue:podsfieldName:resources[1],fieldValue:nodesfieldName:resources[2],fieldValue:nodes/statsfieldName:resources[3],fieldValue:namespacesfieldName:resources[4],fieldValue:configmapsfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[2],fieldValue:watch"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 8,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/system%3Ametrics-server",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:system:metrics-serverfieldName:name,fieldValue:system:metrics-serverfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "966",
            "live_uid": "22cb9e4a-1ea4-4139-aa59-7e354f195c21",
            "name": "system:metrics-server",
            "namespace": null,
            "resource_version": "966",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "22cb9e4a-1ea4-4139-aa59-7e354f195c21",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:metrics-server\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:metrics-server\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:metrics-serverfieldName:name,fieldValue:system:metrics-serverfieldName:name,fieldValue:system:metrics-serverfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.metrics_server_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "sealed_secrets_controller_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/serviceaccounts/sealed-secrets-controller",
            "ignore_fields": null,
            "kind": "ServiceAccount",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:sealed-secrets-controllerfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1016",
            "live_uid": "01decfa2-9a2d-483f-b076-e331934f58c0",
            "name": "sealed-secrets-controller",
            "namespace": "kube-system",
            "resource_version": "1016",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "01decfa2-9a2d-483f-b076-e331934f58c0",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:sealed-secrets-controllerfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.sealed_secrets_controller_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "api_version": "apps/v1",
            "force_new": false,
            "id": "/apis/apps/v1/namespaces/kube-system/deployments/sealed-secrets-controller",
            "ignore_fields": null,
            "kind": "Deployment",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:cni,fieldValue:awsfieldName:command[0],fieldValue:controllerfieldName:containerPort,fieldValue:8080fieldName:image,fieldValue:quay.io/bitnami/sealed-secrets-controller:v0.7.0fieldName:kind,fieldValue:DeploymentfieldName:name,fieldValue:httpfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:namespace,fieldValue:kube-systemfieldName:path,fieldValue:/healthzfieldName:path,fieldValue:/healthzfieldName:port,fieldValue:8080fieldName:port,fieldValue:8080fieldName:readOnlyRootFilesystem,fieldValue:truefieldName:runAsNonRoot,fieldValue:truefieldName:runAsUser,fieldValue:1001fieldName:serviceAccountName,fieldValue:sealed-secrets-controller",
            "live_resource_version": "1084",
            "live_uid": "f26f4806-acf9-424a-9263-4111f7924cc9",
            "name": "sealed-secrets-controller",
            "namespace": "kube-system",
            "resource_version": "1084",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "f26f4806-acf9-424a-9263-4111f7924cc9",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      name: sealed-secrets-controller\n  template:\n    metadata:\n      labels:\n        name: sealed-secrets-controller\n      annotations:\n        cni: \"aws\"\n    spec:\n      containers:\n      - command:\n        - controller\n        image: quay.io/bitnami/sealed-secrets-controller:v0.7.0\n        livenessProbe:\n          httpGet:\n            path: /healthz\n            port: 8080\n        name: sealed-secrets-controller\n        ports:\n        - containerPort: 8080\n          name: http\n        readinessProbe:\n          httpGet:\n            path: /healthz\n            port: 8080\n        securityContext:\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1001\n      serviceAccountName: sealed-secrets-controller",
            "yaml_body_parsed": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      name: sealed-secrets-controller\n  template:\n    metadata:\n      annotations:\n        cni: aws\n      labels:\n        name: sealed-secrets-controller\n    spec:\n      containers:\n      - command:\n        - controller\n        image: quay.io/bitnami/sealed-secrets-controller:v0.7.0\n        livenessProbe:\n          httpGet:\n            path: /healthz\n            port: 8080\n        name: sealed-secrets-controller\n        ports:\n        - containerPort: 8080\n          name: http\n        readinessProbe:\n          httpGet:\n            path: /healthz\n            port: 8080\n        securityContext:\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1001\n      serviceAccountName: sealed-secrets-controller\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apps/v1fieldName:cni,fieldValue:awsfieldName:command[0],fieldValue:controllerfieldName:containerPort,fieldValue:8080fieldName:image,fieldValue:quay.io/bitnami/sealed-secrets-controller:v0.7.0fieldName:kind,fieldValue:DeploymentfieldName:name,fieldValue:httpfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:namespace,fieldValue:kube-systemfieldName:path,fieldValue:/healthzfieldName:path,fieldValue:/healthzfieldName:port,fieldValue:8080fieldName:port,fieldValue:8080fieldName:readOnlyRootFilesystem,fieldValue:truefieldName:runAsNonRoot,fieldValue:truefieldName:runAsUser,fieldValue:1001fieldName:serviceAccountName,fieldValue:sealed-secrets-controller"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.sealed_secrets_controller_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "api_version": "v1",
            "force_new": false,
            "id": "/api/v1/namespaces/kube-system/services/sealed-secrets-controller",
            "ignore_fields": null,
            "kind": "Service",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServicefieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:namespace,fieldValue:kube-systemfieldName:port,fieldValue:8080",
            "live_resource_version": "1021",
            "live_uid": "b1aff3b2-3529-493a-a3d9-f2519dec38f5",
            "name": "sealed-secrets-controller",
            "namespace": "kube-system",
            "resource_version": "1021",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "b1aff3b2-3529-493a-a3d9-f2519dec38f5",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: v1\nkind: Service\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nspec:\n  ports:\n  - port: 8080\n  selector:\n    name: sealed-secrets-controller",
            "yaml_body_parsed": "apiVersion: v1\nkind: Service\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nspec:\n  ports:\n  - port: 8080\n  selector:\n    name: sealed-secrets-controller\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:v1fieldName:kind,fieldValue:ServicefieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:namespace,fieldValue:kube-systemfieldName:port,fieldValue:8080"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.sealed_secrets_controller_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/kube-system/rolebindings/sealed-secrets-controller",
            "ignore_fields": null,
            "kind": "RoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:RolefieldName:kind,fieldValue:RoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-key-adminfieldName:namespace,fieldValue:kube-systemfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1005",
            "live_uid": "a683ee6b-b454-4f63-9762-7333c8bb1b8d",
            "name": "sealed-secrets-controller",
            "namespace": "kube-system",
            "resource_version": "1005",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "a683ee6b-b454-4f63-9762-7333c8bb1b8d",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: RoleBinding\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: sealed-secrets-key-admin\nsubjects:\n- apiGroup: \"\"\n  kind: ServiceAccount\n  name: sealed-secrets-controller\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: RoleBinding\nmetadata:\n  name: sealed-secrets-controller\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: sealed-secrets-key-admin\nsubjects:\n- apiGroup: \"\"\n  kind: ServiceAccount\n  name: sealed-secrets-controller\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:RolefieldName:kind,fieldValue:RoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-key-adminfieldName:namespace,fieldValue:kube-systemfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.sealed_secrets_controller_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/kube-system/roles/sealed-secrets-key-admin",
            "ignore_fields": null,
            "kind": "Role",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:RolefieldName:name,fieldValue:sealed-secrets-key-adminfieldName:namespace,fieldValue:kube-systemfieldName:resourceNames[0],fieldValue:sealed-secrets-keyfieldName:resources[0],fieldValue:secretsfieldName:resources[0],fieldValue:secretsfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:get",
            "live_resource_version": "1054",
            "live_uid": "747ede6b-cffc-46bb-b26a-31cd263347e5",
            "name": "sealed-secrets-key-admin",
            "namespace": "kube-system",
            "resource_version": "1054",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "747ede6b-cffc-46bb-b26a-31cd263347e5",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: Role\nmetadata:\n  name: sealed-secrets-key-admin\n  namespace: kube-system\nrules:\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - sealed-secrets-key\n  resources:\n  - secrets\n  verbs:\n  - get\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  verbs:\n  - create",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: Role\nmetadata:\n  name: sealed-secrets-key-admin\n  namespace: kube-system\nrules:\n- apiGroups:\n  - \"\"\n  resourceNames:\n  - sealed-secrets-key\n  resources:\n  - secrets\n  verbs:\n  - get\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  verbs:\n  - create\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:fieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:RolefieldName:name,fieldValue:sealed-secrets-key-adminfieldName:namespace,fieldValue:kube-systemfieldName:resourceNames[0],fieldValue:sealed-secrets-keyfieldName:resources[0],fieldValue:secretsfieldName:resources[0],fieldValue:secretsfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:get"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.sealed_secrets_controller_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/sealed-secrets-controller",
            "ignore_fields": null,
            "kind": "ClusterRoleBinding",
            "live_manifest_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:secrets-unsealerfieldName:namespace,fieldValue:kube-system",
            "live_resource_version": "1019",
            "live_uid": "f772ac03-9b64-43bd-a1bd-ef747dd9df17",
            "name": "sealed-secrets-controller",
            "namespace": null,
            "resource_version": "1019",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "f772ac03-9b64-43bd-a1bd-ef747dd9df17",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: sealed-secrets-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: secrets-unsealer\nsubjects:\n- apiGroup: \"\"\n  kind: ServiceAccount\n  name: sealed-secrets-controller\n  namespace: kube-system",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: sealed-secrets-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: secrets-unsealer\nsubjects:\n- apiGroup: \"\"\n  kind: ServiceAccount\n  name: sealed-secrets-controller\n  namespace: kube-system\n",
            "yaml_incluster": "fieldName:apiGroup,fieldValue:rbac.authorization.k8s.iofieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:kind,fieldValue:ClusterRoleBindingfieldName:kind,fieldValue:ServiceAccountfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:sealed-secrets-controllerfieldName:name,fieldValue:secrets-unsealerfieldName:namespace,fieldValue:kube-system"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.sealed_secrets_controller_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        },
        {
          "index_key": 6,
          "schema_version": 0,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/secrets-unsealer",
            "ignore_fields": null,
            "kind": "ClusterRole",
            "live_manifest_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:bitnami.comfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:secrets-unsealerfieldName:resources[0],fieldValue:sealedsecretsfieldName:resources[0],fieldValue:secretsfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:updatefieldName:verbs[2],fieldValue:deletefieldName:verbs[2],fieldValue:watch",
            "live_resource_version": "1058",
            "live_uid": "690cd5f7-efa7-4e5b-b816-88779ed4e839",
            "name": "secrets-unsealer",
            "namespace": null,
            "resource_version": "1058",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "690cd5f7-efa7-4e5b-b816-88779ed4e839",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: secrets-unsealer\nrules:\n- apiGroups:\n  - bitnami.com\n  resources:\n  - sealedsecrets\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  verbs:\n  - create\n  - update\n  - delete",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: secrets-unsealer\nrules:\n- apiGroups:\n  - bitnami.com\n  resources:\n  - sealedsecrets\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  verbs:\n  - create\n  - update\n  - delete\n",
            "yaml_incluster": "fieldName:apiGroups[0],fieldValue:fieldName:apiGroups[0],fieldValue:bitnami.comfieldName:apiVersion,fieldValue:rbac.authorization.k8s.io/v1beta1fieldName:kind,fieldValue:ClusterRolefieldName:name,fieldValue:secrets-unsealerfieldName:resources[0],fieldValue:sealedsecretsfieldName:resources[0],fieldValue:secretsfieldName:verbs[0],fieldValue:createfieldName:verbs[0],fieldValue:getfieldName:verbs[1],fieldValue:listfieldName:verbs[1],fieldValue:updatefieldName:verbs[2],fieldValue:deletefieldName:verbs[2],fieldValue:watch"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.sealed_secrets_controller_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "sealed_secrets_crd_resources",
      "provider": "module.eks.provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "api_version": "apiextensions.k8s.io/v1beta1",
            "force_new": false,
            "id": "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/sealedsecrets.bitnami.com",
            "ignore_fields": null,
            "kind": "CustomResourceDefinition",
            "live_manifest_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:bitnami.comfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:SealedSecretfieldName:listKind,fieldValue:SealedSecretListfieldName:name,fieldValue:sealedsecrets.bitnami.comfieldName:plural,fieldValue:sealedsecretsfieldName:scope,fieldValue:NamespacedfieldName:singular,fieldValue:sealedsecretfieldName:version,fieldValue:v1alpha1",
            "live_resource_version": "880",
            "live_uid": "83c1b70e-2c7b-4d60-b2eb-9b313557534a",
            "name": "sealedsecrets.bitnami.com",
            "namespace": null,
            "resource_version": "880",
            "sensitive_fields": null,
            "timeouts": null,
            "uid": "83c1b70e-2c7b-4d60-b2eb-9b313557534a",
            "validate_schema": true,
            "wait_for_rollout": false,
            "yaml_body": "---\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: sealedsecrets.bitnami.com\nspec:\n  group: bitnami.com\n  names:\n    kind: SealedSecret\n    listKind: SealedSecretList\n    plural: sealedsecrets\n    singular: sealedsecret\n  scope: Namespaced\n  version: v1alpha1",
            "yaml_body_parsed": "apiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: sealedsecrets.bitnami.com\nspec:\n  group: bitnami.com\n  names:\n    kind: SealedSecret\n    listKind: SealedSecretList\n    plural: sealedsecrets\n    singular: sealedsecret\n  scope: Namespaced\n  version: v1alpha1\n",
            "yaml_incluster": "fieldName:apiVersion,fieldValue:apiextensions.k8s.io/v1beta1fieldName:group,fieldValue:bitnami.comfieldName:kind,fieldValue:CustomResourceDefinitionfieldName:kind,fieldValue:SealedSecretfieldName:listKind,fieldValue:SealedSecretListfieldName:name,fieldValue:sealedsecrets.bitnami.comfieldName:plural,fieldValue:sealedsecretsfieldName:scope,fieldValue:NamespacedfieldName:singular,fieldValue:sealedsecretfieldName:version,fieldValue:v1alpha1"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.sealed_secrets_crd_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "data",
      "type": "aws_ami",
      "name": "eks_worker",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-0a0b67d5830cc0c8c",
            "block_device_mappings": [
              {
                "device_name": "/dev/xvda",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-054719cff05cdcce6",
                  "throughput": "0",
                  "volume_size": "20",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              }
            ],
            "creation_date": "2021-03-23T21:22:24.000Z",
            "description": "EKS Kubernetes Worker AMI with AmazonLinux2 image, (k8s: 1.16.15, docker: 19.03.13ce-1.amzn2, containerd: 1.4.1-2.amzn2)",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "amazon-eks-node-1.16-v*"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0a0b67d5830cc0c8c",
            "image_id": "ami-0a0b67d5830cc0c8c",
            "image_location": "amazon/amazon-eks-node-1.16-v20210322",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "amazon-eks-node-1.16-v20210322",
            "name_regex": null,
            "owner_id": "602401143452",
            "owners": [
              "602401143452"
            ],
            "platform": null,
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": null,
            "root_device_name": "/dev/xvda",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-054719cff05cdcce6",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          }
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "data",
      "type": "aws_ami",
      "name": "eks_worker_windows",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-0fbb327caaa475e83",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-076579302fdd10090",
                  "throughput": "0",
                  "volume_size": "50",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "xvdca",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "xvdcb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              },
              {
                "device_name": "xvdcc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral2"
              },
              {
                "device_name": "xvdcd",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral3"
              },
              {
                "device_name": "xvdce",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral4"
              },
              {
                "device_name": "xvdcf",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral5"
              },
              {
                "device_name": "xvdcg",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral6"
              },
              {
                "device_name": "xvdch",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral7"
              },
              {
                "device_name": "xvdci",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral8"
              },
              {
                "device_name": "xvdcj",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral9"
              },
              {
                "device_name": "xvdck",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral10"
              },
              {
                "device_name": "xvdcl",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral11"
              },
              {
                "device_name": "xvdcm",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral12"
              },
              {
                "device_name": "xvdcn",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral13"
              },
              {
                "device_name": "xvdco",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral14"
              },
              {
                "device_name": "xvdcp",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral15"
              },
              {
                "device_name": "xvdcq",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral16"
              },
              {
                "device_name": "xvdcr",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral17"
              },
              {
                "device_name": "xvdcs",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral18"
              },
              {
                "device_name": "xvdct",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral19"
              },
              {
                "device_name": "xvdcu",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral20"
              },
              {
                "device_name": "xvdcv",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral21"
              },
              {
                "device_name": "xvdcw",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral22"
              },
              {
                "device_name": "xvdcx",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral23"
              },
              {
                "device_name": "xvdcy",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral24"
              },
              {
                "device_name": "xvdcz",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral25"
              }
            ],
            "creation_date": "2021-03-11T04:22:01.000Z",
            "description": "Microsoft Windows Server 2019 Core optimized for EKS and provided by Amazon",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "Windows_Server-2019-English-Core-EKS_Optimized-1.16-*"
                ]
              },
              {
                "name": "platform",
                "values": [
                  "windows"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0fbb327caaa475e83",
            "image_id": "ami-0fbb327caaa475e83",
            "image_location": "amazon/Windows_Server-2019-English-Core-EKS_Optimized-1.16-2021.03.10",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "kernel_id": null,
            "most_recent": true,
            "name": "Windows_Server-2019-English-Core-EKS_Optimized-1.16-2021.03.10",
            "name_regex": null,
            "owner_id": "801119661308",
            "owners": [
              "801119661308"
            ],
            "platform": "windows",
            "platform_details": "Windows",
            "product_codes": [],
            "public": true,
            "ramdisk_id": null,
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-076579302fdd10090",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "usage_operation": "RunInstances:0002",
            "virtualization_type": "hvm"
          }
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "599908802495",
            "arn": "arn:aws:iam::599908802495:user/drew",
            "id": "599908802495",
            "user_id": "AIDAYXLKZ3672A2F2OUGH"
          }
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "cluster_assume_role_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "2764486067",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"EKSClusterAssumeRole\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"eks.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "eks.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": "EKSClusterAssumeRole"
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "cluster_elb_sl_role_creation",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "3407219844",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInternetGateways\",\n        \"ec2:DescribeAccountAttributes\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "ec2:DescribeAccountAttributes",
                  "ec2:DescribeInternetGateways"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "workers_assume_role_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3778018924",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"EKSWorkerAssumeRole\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "ec2.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": "EKSWorkerAssumeRole"
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "data",
      "type": "aws_partition",
      "name": "current",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "dns_suffix": "amazonaws.com",
            "id": "aws",
            "partition": "aws",
            "reverse_dns_prefix": "com.amazonaws"
          }
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "data",
      "type": "template_file",
      "name": "userdata",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "fdfde9187837ad3963ea25c80d2905582734b88d35c2eb77ebe4e6b9d92f2535",
            "rendered": "#!/bin/bash -xe\n\n# Allow user supplied pre userdata code\n\nyum install -y amazon-ssm-agent\nsystemctl start amazon-ssm-agent\nsystemctl enable amazon-ssm-agent\n\n\n# Bootstrap and join the cluster\n/etc/eks/bootstrap.sh --b64-cluster-ca 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1ETXlOakl6TVRFME5Gb1hEVE14TURNeU5ESXpNVEUwTkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUFZqCnE4RWJTVU1RRVZoRno5dCs3QzdBTkFNczhEanJJalMvNm1hUCtkOHpDWUkrZ2tORFZTbENVS0tKVm5jTnJMNHkKNkQ4QVZ5TWxsV2xZV21Qa0NBeUtvUTg2VTJiZC9VR3BldHRlVmJscU1ZdmpEK3FKVW9kN2lwaFdNUmg0SWN6TQpsUGtIS3RFWHRQUnlvbERUUmtBeCtGSERhY0VLcnZXWWNUdGtRa2ZPUDJrY25VU0d3amVuRURNRTgwZzkxbFpZCk5ZaVl6ZERCSEhld01iaWRWaXkyUWhvR2UzSnBEajlhUld5c1BGb1ZHNjNOWjUyamVTYVFiTWFHeDVpclNlRXcKa3VYVXdBa3l4NlR4TFQ3alIrRUxHTll3cmRsTy9Oa1BPbVFuUkpzQ0NnWDFDdHdRRUR1cDhBSTl4ZWI2TWVKSQoyNWROWVhkQ0tibEgxcFY1M2VNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDL1YvaG9uaEhRU1dvVVUxR0xoUUIwU3JvOGcKNmtqeUh5ZlBkSjVvWFA3QWdIYjhnZ0hYVHo3N0RKVGc4bk5NYm5HRnI1NFZLOWJXcHVYSHk3NDM2eGVOYll2VgpWcGxPZEZLTXRHTFYzNHprbGprTXh4Ym4yRDFlU1NZQUp4M0RnUmRHeXlVd0pqRGQxRTlUV2JTalZKVVFWS0N2Ck94OTdmNEsrSDJVUGd0djd5MzgydjBqeVlNMzRIQ1BQNW9qM3IrTzE0Nm5GUTFsVUJpeXRZMHdLYjBuUGg1djkKb2kzWmIzZHgvbXR0TlcxVFQ1OC94WnY0Z1ZHN1d3cmdXaUhWQVlQVFBsdVM0NVE4ZGoyd3pRdHF0dVlOdzFXVAp5cTNjaFVRY0t2VVB3TlBCNzUvVjlkSUM1WFNweVFhOHgybnFKdEltUEI4clhFenJyRGhhT2dSakozMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=' --apiserver-endpoint 'https://3087F903F299280F65199C21FB7A1CD5.gr7.us-east-1.eks.amazonaws.com'  --kubelet-extra-args \"--node-labels=groupName=hw_demo,instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)  --eviction-hard=\\\"memory.available\u003c5%\\\" --eviction-soft=\\\"memory.available\u003c10%\\\" --eviction-soft-grace-period=\\\"memory.available=5m\\\" --system-reserved=\\\"memory=500Mi\\\" \" 'hello_world'\n\n# Allow user supplied userdata code\n\n",
            "template": "#!/bin/bash -xe\n\n# Allow user supplied pre userdata code\n${pre_userdata}\n\n# Bootstrap and join the cluster\n/etc/eks/bootstrap.sh --b64-cluster-ca '${cluster_auth_base64}' --apiserver-endpoint '${endpoint}' ${bootstrap_extra_args} --kubelet-extra-args \"${kubelet_extra_args}\" '${cluster_name}'\n\n# Allow user supplied userdata code\n${additional_userdata}\n",
            "vars": {
              "additional_userdata": "",
              "bootstrap_extra_args": "",
              "cluster_auth_base64": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1ETXlOakl6TVRFME5Gb1hEVE14TURNeU5ESXpNVEUwTkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUFZqCnE4RWJTVU1RRVZoRno5dCs3QzdBTkFNczhEanJJalMvNm1hUCtkOHpDWUkrZ2tORFZTbENVS0tKVm5jTnJMNHkKNkQ4QVZ5TWxsV2xZV21Qa0NBeUtvUTg2VTJiZC9VR3BldHRlVmJscU1ZdmpEK3FKVW9kN2lwaFdNUmg0SWN6TQpsUGtIS3RFWHRQUnlvbERUUmtBeCtGSERhY0VLcnZXWWNUdGtRa2ZPUDJrY25VU0d3amVuRURNRTgwZzkxbFpZCk5ZaVl6ZERCSEhld01iaWRWaXkyUWhvR2UzSnBEajlhUld5c1BGb1ZHNjNOWjUyamVTYVFiTWFHeDVpclNlRXcKa3VYVXdBa3l4NlR4TFQ3alIrRUxHTll3cmRsTy9Oa1BPbVFuUkpzQ0NnWDFDdHdRRUR1cDhBSTl4ZWI2TWVKSQoyNWROWVhkQ0tibEgxcFY1M2VNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDL1YvaG9uaEhRU1dvVVUxR0xoUUIwU3JvOGcKNmtqeUh5ZlBkSjVvWFA3QWdIYjhnZ0hYVHo3N0RKVGc4bk5NYm5HRnI1NFZLOWJXcHVYSHk3NDM2eGVOYll2VgpWcGxPZEZLTXRHTFYzNHprbGprTXh4Ym4yRDFlU1NZQUp4M0RnUmRHeXlVd0pqRGQxRTlUV2JTalZKVVFWS0N2Ck94OTdmNEsrSDJVUGd0djd5MzgydjBqeVlNMzRIQ1BQNW9qM3IrTzE0Nm5GUTFsVUJpeXRZMHdLYjBuUGg1djkKb2kzWmIzZHgvbXR0TlcxVFQ1OC94WnY0Z1ZHN1d3cmdXaUhWQVlQVFBsdVM0NVE4ZGoyd3pRdHF0dVlOdzFXVAp5cTNjaFVRY0t2VVB3TlBCNzUvVjlkSUM1WFNweVFhOHgybnFKdEltUEI4clhFenJyRGhhT2dSakozMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
              "cluster_name": "hello_world",
              "endpoint": "https://3087F903F299280F65199C21FB7A1CD5.gr7.us-east-1.eks.amazonaws.com",
              "kubelet_extra_args": "--node-labels=groupName=hw_demo,instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)  --eviction-hard=\\\"memory.available\u003c5%\\\" --eviction-soft=\\\"memory.available\u003c10%\\\" --eviction-soft-grace-period=\\\"memory.available=5m\\\" --system-reserved=\\\"memory=500Mi\\\" ",
              "platform": "linux",
              "pre_userdata": "\nyum install -y amazon-ssm-agent\nsystemctl start amazon-ssm-agent\nsystemctl enable amazon-ssm-agent\n"
            }
          }
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_autoscaling_group",
      "name": "workers",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:autoscaling:us-east-1:599908802495:autoScalingGroup:4e204cb5-6535-4694-b047-6f8148b0f0c3:autoScalingGroupName/hello_world-hw_demo20210326231946058700000010",
            "availability_zones": [
              "us-east-1a",
              "us-east-1b"
            ],
            "capacity_rebalance": false,
            "default_cooldown": 300,
            "desired_capacity": 2,
            "enabled_metrics": [
              "GroupDesiredCapacity",
              "GroupInServiceInstances",
              "GroupMaxSize",
              "GroupMinSize",
              "GroupPendingInstances",
              "GroupStandbyInstances",
              "GroupTerminatingInstances",
              "GroupTotalInstances"
            ],
            "force_delete": false,
            "health_check_grace_period": 300,
            "health_check_type": "EC2",
            "id": "hello_world-hw_demo20210326231946058700000010",
            "initial_lifecycle_hook": [],
            "instance_refresh": [],
            "launch_configuration": "hello_world-hw_demo2021032623193960700000000f",
            "launch_template": [],
            "load_balancers": null,
            "max_instance_lifetime": 0,
            "max_size": 2,
            "metrics_granularity": "1Minute",
            "min_elb_capacity": null,
            "min_size": 1,
            "mixed_instances_policy": [],
            "name": "hello_world-hw_demo20210326231946058700000010",
            "name_prefix": "hello_world-hw_demo",
            "placement_group": "",
            "protect_from_scale_in": false,
            "service_linked_role_arn": "arn:aws:iam::599908802495:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
            "suspended_processes": [
              "AZRebalance"
            ],
            "tag": [],
            "tags": [
              {
                "key": "Environment",
                "propagate_at_launch": "true",
                "value": "prod"
              },
              {
                "key": "Name",
                "propagate_at_launch": "true",
                "value": "hello_world-hw_demo-eks_asg"
              },
              {
                "key": "Owner",
                "propagate_at_launch": "true",
                "value": "Terraform"
              },
              {
                "key": "alpha.service-controller.kubernetes.io/exclude-balancer",
                "propagate_at_launch": "true",
                "value": "false"
              },
              {
                "key": "groupName",
                "propagate_at_launch": "true",
                "value": "hw_demo"
              },
              {
                "key": "k8s.io/cluster-autoscaler/enabled",
                "propagate_at_launch": "false",
                "value": "true"
              },
              {
                "key": "k8s.io/cluster-autoscaler/hello_world",
                "propagate_at_launch": "false",
                "value": "true"
              },
              {
                "key": "k8s.io/cluster-autoscaler/node-template/label",
                "propagate_at_launch": "true",
                "value": "hw_demo"
              },
              {
                "key": "k8s.io/cluster-autoscaler/node-template/resources/ephemeral-storage",
                "propagate_at_launch": "false",
                "value": "100Gi"
              },
              {
                "key": "k8s.io/cluster/hello_world",
                "propagate_at_launch": "true",
                "value": "owned"
              },
              {
                "key": "k8s.io/cni/aws",
                "propagate_at_launch": "true",
                "value": "4a157e8f-2bd8-46fd-bcfc-75a5f551a939"
              },
              {
                "key": "k8s.io/cni/calico",
                "propagate_at_launch": "true",
                "value": "caabfc04-ba86-4a13-a6cf-cfe4ea8bdb00"
              },
              {
                "key": "k8s.io/cni/genie",
                "propagate_at_launch": "true",
                "value": "413023b6-4db7-46d9-b339-432c6da8ecc2"
              },
              {
                "key": "kubernetes.io/cluster/hello_world",
                "propagate_at_launch": "true",
                "value": "owned"
              }
            ],
            "target_group_arns": null,
            "termination_policies": [
              "OldestLaunchConfiguration",
              "Default"
            ],
            "timeouts": null,
            "vpc_zone_identifier": [
              "subnet-05fe4f98639ff4274",
              "subnet-096ff4de659530b74"
            ],
            "wait_for_capacity_timeout": "10m",
            "wait_for_elb_capacity": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_instance_profile.workers",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_additional_policies",
            "module.eks.module.eks.aws_launch_configuration.workers",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_primary_ingress_workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.aws_security_group_rule.workers_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_https",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_kubelet",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_primary",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_self",
            "module.eks.module.eks.data.aws_ami.eks_worker",
            "module.eks.module.eks.data.aws_ami.eks_worker_windows",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.data.template_file.userdata",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.eks.module.eks.random_pet.workers",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:logs:us-east-1:599908802495:log-group:/aws/eks/hello_world/cluster",
            "id": "/aws/eks/hello_world/cluster",
            "kms_key_id": "",
            "name": "/aws/eks/hello_world/cluster",
            "name_prefix": null,
            "retention_in_days": 90,
            "tags": {
              "Environment": "prod",
              "Owner": "Terraform"
            }
          },
          "private": "bnVsbA==",
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_eks_cluster",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:eks:us-east-1:599908802495:cluster/hello_world",
            "certificate_authority": [
              {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1ETXlOakl6TVRFME5Gb1hEVE14TURNeU5ESXpNVEUwTkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUFZqCnE4RWJTVU1RRVZoRno5dCs3QzdBTkFNczhEanJJalMvNm1hUCtkOHpDWUkrZ2tORFZTbENVS0tKVm5jTnJMNHkKNkQ4QVZ5TWxsV2xZV21Qa0NBeUtvUTg2VTJiZC9VR3BldHRlVmJscU1ZdmpEK3FKVW9kN2lwaFdNUmg0SWN6TQpsUGtIS3RFWHRQUnlvbERUUmtBeCtGSERhY0VLcnZXWWNUdGtRa2ZPUDJrY25VU0d3amVuRURNRTgwZzkxbFpZCk5ZaVl6ZERCSEhld01iaWRWaXkyUWhvR2UzSnBEajlhUld5c1BGb1ZHNjNOWjUyamVTYVFiTWFHeDVpclNlRXcKa3VYVXdBa3l4NlR4TFQ3alIrRUxHTll3cmRsTy9Oa1BPbVFuUkpzQ0NnWDFDdHdRRUR1cDhBSTl4ZWI2TWVKSQoyNWROWVhkQ0tibEgxcFY1M2VNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDL1YvaG9uaEhRU1dvVVUxR0xoUUIwU3JvOGcKNmtqeUh5ZlBkSjVvWFA3QWdIYjhnZ0hYVHo3N0RKVGc4bk5NYm5HRnI1NFZLOWJXcHVYSHk3NDM2eGVOYll2VgpWcGxPZEZLTXRHTFYzNHprbGprTXh4Ym4yRDFlU1NZQUp4M0RnUmRHeXlVd0pqRGQxRTlUV2JTalZKVVFWS0N2Ck94OTdmNEsrSDJVUGd0djd5MzgydjBqeVlNMzRIQ1BQNW9qM3IrTzE0Nm5GUTFsVUJpeXRZMHdLYjBuUGg1djkKb2kzWmIzZHgvbXR0TlcxVFQ1OC94WnY0Z1ZHN1d3cmdXaUhWQVlQVFBsdVM0NVE4ZGoyd3pRdHF0dVlOdzFXVAp5cTNjaFVRY0t2VVB3TlBCNzUvVjlkSUM1WFNweVFhOHgybnFKdEltUEI4clhFenJyRGhhT2dSakozMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
              }
            ],
            "created_at": "2021-03-26 23:04:42.677 +0000 UTC",
            "enabled_cluster_log_types": [
              "api",
              "audit",
              "authenticator",
              "controllerManager",
              "scheduler"
            ],
            "encryption_config": [],
            "endpoint": "https://3087F903F299280F65199C21FB7A1CD5.gr7.us-east-1.eks.amazonaws.com",
            "id": "hello_world",
            "identity": [
              {
                "oidc": [
                  {
                    "issuer": "https://oidc.eks.us-east-1.amazonaws.com/id/3087F903F299280F65199C21FB7A1CD5"
                  }
                ]
              }
            ],
            "kubernetes_network_config": [
              {
                "service_ipv4_cidr": "172.20.0.0/16"
              }
            ],
            "name": "hello_world",
            "platform_version": "eks.6",
            "role_arn": "arn:aws:iam::599908802495:role/hello_world20210326230435293100000001",
            "status": "ACTIVE",
            "tags": {
              "Environment": "prod",
              "Owner": "Terraform"
            },
            "timeouts": {
              "create": "30m",
              "delete": "15m",
              "update": null
            },
            "version": "1.16",
            "vpc_config": [
              {
                "cluster_security_group_id": "sg-009611a579a5d7fe2",
                "endpoint_private_access": false,
                "endpoint_public_access": true,
                "public_access_cidrs": [
                  "0.0.0.0/0"
                ],
                "security_group_ids": [
                  "sg-0c156f71b6f7b000c"
                ],
                "subnet_ids": [
                  "subnet-05fe4f98639ff4274",
                  "subnet-096ff4de659530b74"
                ],
                "vpc_id": "vpc-0a99b62d225d4f4c8"
              }
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozNjAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 0,
          "deposed": "eea169af",
          "schema_version": 0,
          "attributes": null,
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozNjAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "workers",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::599908802495:instance-profile/hello_world2021032623193691780000000c",
            "create_date": "2021-03-26T23:19:37Z",
            "id": "hello_world2021032623193691780000000c",
            "name": "hello_world2021032623193691780000000c",
            "name_prefix": "hello_world",
            "path": "/",
            "role": "hello_world20210326231659112400000007",
            "tags": null,
            "unique_id": "AIPAYXLKZ367VHFN7JRPW"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::599908802495:role/hello_world20210326230435293100000001",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"EKSClusterAssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"eks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2021-03-26T23:04:35Z",
            "description": "",
            "force_detach_policies": true,
            "id": "hello_world20210326230435293100000001",
            "inline_policy": [
              {
                "name": "",
                "policy": ""
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "hello_world20210326230435293100000001",
            "name_prefix": "hello_world",
            "path": "/",
            "permissions_boundary": null,
            "tags": {
              "Environment": "prod",
              "Owner": "Terraform"
            },
            "unique_id": "AROAYXLKZ367YLUIS6NDS"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "workers",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::599908802495:role/hello_world20210326231659112400000007",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"EKSWorkerAssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2021-03-26T23:16:59Z",
            "description": "",
            "force_detach_policies": true,
            "id": "hello_world20210326231659112400000007",
            "inline_policy": [
              {
                "name": "",
                "policy": ""
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "hello_world20210326231659112400000007",
            "name_prefix": "hello_world",
            "path": "/",
            "permissions_boundary": null,
            "tags": {
              "Environment": "prod",
              "Owner": "Terraform"
            },
            "unique_id": "AROAYXLKZ3676O5QU6CBA"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "cluster_elb_sl_role_creation",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326230435293100000001:hello_world-elb-sl-role-creation20210326230437428100000004",
            "name": "hello_world-elb-sl-role-creation20210326230437428100000004",
            "name_prefix": "hello_world-elb-sl-role-creation",
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInternetGateways\",\n        \"ec2:DescribeAccountAttributes\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}",
            "role": "hello_world20210326230435293100000001"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_elb_sl_role_creation"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "cluster_AmazonEKSClusterPolicy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326230435293100000001-20210326230437933300000006",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
            "role": "hello_world20210326230435293100000001"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_partition.current"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "cluster_AmazonEKSServicePolicy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326230435293100000001-20210326230437911200000005",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSServicePolicy",
            "role": "hello_world20210326230435293100000001"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_partition.current"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "workers_AmazonEC2ContainerRegistryReadOnly",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326231659112400000007-20210326231701740700000008",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
            "role": "hello_world20210326231659112400000007"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "workers_AmazonEKSWorkerNodePolicy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326231659112400000007-2021032623170176430000000a",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
            "role": "hello_world20210326231659112400000007"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "workers_AmazonEKS_CNI_Policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "hello_world20210326231659112400000007-20210326231701740800000009",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
            "role": "hello_world20210326231659112400000007"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_launch_configuration",
      "name": "workers",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:autoscaling:us-east-1:599908802495:launchConfiguration:e248ef92-1626-49b0-a5ab-3528ffcf7e20:launchConfigurationName/hello_world-hw_demo2021032623193960700000000f",
            "associate_public_ip_address": false,
            "ebs_block_device": [],
            "ebs_optimized": true,
            "enable_monitoring": true,
            "ephemeral_block_device": [],
            "iam_instance_profile": "hello_world2021032623193691780000000c",
            "id": "hello_world-hw_demo2021032623193960700000000f",
            "image_id": "ami-0a0b67d5830cc0c8c",
            "instance_type": "t3.small",
            "key_name": "eks",
            "metadata_options": [],
            "name": "hello_world-hw_demo2021032623193960700000000f",
            "name_prefix": "hello_world-hw_demo",
            "placement_tenancy": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "encrypted": false,
                "iops": 0,
                "volume_size": 100,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [
              "sg-068e58fa196cf0ab0",
              "sg-0bc8b858e5bdc139e"
            ],
            "spot_price": "",
            "user_data": null,
            "user_data_base64": "IyEvYmluL2Jhc2ggLXhlCgojIEFsbG93IHVzZXIgc3VwcGxpZWQgcHJlIHVzZXJkYXRhIGNvZGUKCnl1bSBpbnN0YWxsIC15IGFtYXpvbi1zc20tYWdlbnQKc3lzdGVtY3RsIHN0YXJ0IGFtYXpvbi1zc20tYWdlbnQKc3lzdGVtY3RsIGVuYWJsZSBhbWF6b24tc3NtLWFnZW50CgoKIyBCb290c3RyYXAgYW5kIGpvaW4gdGhlIGNsdXN0ZXIKL2V0Yy9la3MvYm9vdHN0cmFwLnNoIC0tYjY0LWNsdXN0ZXItY2EgJ0xTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVU41UkVORFFXSkRaMEYzU1VKQlowbENRVVJCVGtKbmEzRm9hMmxIT1hjd1FrRlJjMFpCUkVGV1RWSk5kMFZSV1VSV1VWRkVSWGR3Y21SWFNtd0tZMjAxYkdSSFZucE5RalJZUkZSSmVFMUVUWGxPYWtsNlRWUkZNRTVHYjFoRVZFMTRUVVJOZVU1RVNYcE5WRVV3VGtadmQwWlVSVlJOUWtWSFFURlZSUXBCZUUxTFlUTldhVnBZU25WYVdGSnNZM3BEUTBGVFNYZEVVVmxLUzI5YVNXaDJZMDVCVVVWQ1FsRkJSR2RuUlZCQlJFTkRRVkZ2UTJkblJVSkJVRlpxQ25FNFJXSlRWVTFSUlZab1JubzVkQ3MzUXpkQlRrRk5jemhFYW5KSmFsTXZObTFoVUN0a09IcERXVWtyWjJ0T1JGWlRiRU5WUzB0S1ZtNWpUbkpNTkhrS05rUTRRVlo1VFd4c1YyeFpWMjFRYTBOQmVVdHZVVGcyVlRKaVpDOVZSM0JsZEhSbFZtSnNjVTFaZG1wRUszRktWVzlrTjJsd2FGZE5VbWcwU1dONlRRcHNVR3RJUzNSRldIUlFVbmx2YkVSVVVtdEJlQ3RHU0VSaFkwVkxjblpYV1dOVWRHdFJhMlpQVURKclkyNVZVMGQzYW1WdVJVUk5SVGd3WnpreGJGcFpDazVaYVZsNlpFUkNTRWhsZDAxaWFXUldhWGt5VVdodlIyVXpTbkJFYWpsaFVsZDVjMUJHYjFaSE5qTk9XalV5YW1WVFlWRmlUV0ZIZURWcGNsTmxSWGNLYTNWWVZYZEJhM2w0TmxSNFRGUTNhbElyUlV4SFRsbDNjbVJzVHk5T2ExQlBiVkZ1VWtwelEwTm5XREZEZEhkUlJVUjFjRGhCU1RsNFpXSTJUV1ZLU1FveU5XUk9XVmhrUTB0aWJFZ3hjRlkxTTJWTlEwRjNSVUZCWVUxcVRVTkZkMFJuV1VSV1VqQlFRVkZJTDBKQlVVUkJaMHRyVFVFNFIwRXhWV1JGZDBWQ0NpOTNVVVpOUVUxQ1FXWTRkMFJSV1VwTGIxcEphSFpqVGtGUlJVeENVVUZFWjJkRlFrRkRMMVl2YUc5dWFFaFJVMWR2VlZVeFIweG9VVUl3VTNKdk9HY0tObXRxZVVoNVpsQmtTalZ2V0ZBM1FXZElZamhuWjBoWVZIbzNOMFJLVkdjNGJrNU5ZbTVIUm5JMU5GWkxPV0pYY0hWWVNIazNORE0yZUdWT1lsbDJWZ3BXY0d4UFpFWkxUWFJIVEZZek5IcHJiR3ByVFhoNFltNHlSREZsVTFOWlFVcDRNMFJuVW1SSGVYbFZkMHBxUkdReFJUbFVWMkpUYWxaS1ZWRldTME4yQ2s5NE9UZG1ORXNyU0RKVlVHZDBkamQ1TXpneWRqQnFlVmxOTXpSSVExQlFOVzlxTTNJclR6RTBObTVHVVRGc1ZVSnBlWFJaTUhkTFlqQnVVR2cxZGprS2Iya3pXbUl6WkhndmJYUjBUbGN4VkZRMU9DOTRXblkwWjFaSE4xZDNjbWRYYVVoV1FWbFFWRkJzZFZNME5WRTRaR295ZDNwUmRIRjBkVmxPZHpGWFZBcDVjVE5qYUZWUlkwdDJWVkIzVGxCQ056VXZWamxrU1VNMVdGTndlVkZoT0hneWJuRktkRWx0VUVJNGNsaEZlbkp5UkdoaFQyZFNha296TUQwS0xTMHRMUzFGVGtRZ1EwVlNWRWxHU1VOQlZFVXRMUzB0TFFvPScgLS1hcGlzZXJ2ZXItZW5kcG9pbnQgJ2h0dHBzOi8vMzA4N0Y5MDNGMjk5MjgwRjY1MTk5QzIxRkI3QTFDRDUuZ3I3LnVzLWVhc3QtMS5la3MuYW1hem9uYXdzLmNvbScgIC0ta3ViZWxldC1leHRyYS1hcmdzICItLW5vZGUtbGFiZWxzPWdyb3VwTmFtZT1od19kZW1vLGluc3RhbmNlSWQ9JChjdXJsIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbGF0ZXN0L21ldGEtZGF0YS9pbnN0YW5jZS1pZCkgIC0tZXZpY3Rpb24taGFyZD1cIm1lbW9yeS5hdmFpbGFibGU8NSVcIiAtLWV2aWN0aW9uLXNvZnQ9XCJtZW1vcnkuYXZhaWxhYmxlPDEwJVwiIC0tZXZpY3Rpb24tc29mdC1ncmFjZS1wZXJpb2Q9XCJtZW1vcnkuYXZhaWxhYmxlPTVtXCIgLS1zeXN0ZW0tcmVzZXJ2ZWQ9XCJtZW1vcnk9NTAwTWlcIiAiICdoZWxsb193b3JsZCcKCiMgQWxsb3cgdXNlciBzdXBwbGllZCB1c2VyZGF0YSBjb2RlCgo=",
            "vpc_classic_link_id": "",
            "vpc_classic_link_security_groups": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_instance_profile.workers",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_additional_policies",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_primary_ingress_workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.aws_security_group_rule.workers_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_https",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_kubelet",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_primary",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_self",
            "module.eks.module.eks.data.aws_ami.eks_worker",
            "module.eks.module.eks.data.aws_ami.eks_worker_windows",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.data.template_file.userdata",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:security-group/sg-0c156f71b6f7b000c",
            "description": "EKS cluster security group.",
            "egress": [],
            "id": "sg-0c156f71b6f7b000c",
            "ingress": [],
            "name": "hello_world20210326230435322600000002",
            "name_prefix": "hello_world",
            "owner_id": "599908802495",
            "revoke_rules_on_delete": false,
            "tags": {
              "Environment": "prod",
              "Name": "hello_world-eks_cluster_sg",
              "Owner": "Terraform"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "workers",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:security-group/sg-068e58fa196cf0ab0",
            "description": "Security group for all nodes in the cluster.",
            "egress": [],
            "id": "sg-068e58fa196cf0ab0",
            "ingress": [],
            "name": "hello_world20210326230435324000000003",
            "name_prefix": "hello_world",
            "owner_id": "599908802495",
            "revoke_rules_on_delete": false,
            "tags": {
              "Environment": "prod",
              "Name": "hello_world-eks_worker_sg",
              "Owner": "Terraform",
              "kubernetes.io/cluster/hello_world": "owned"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "cluster_egress_internet",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "Allow cluster egress access to the Internet.",
            "from_port": 0,
            "id": "sgrule-126672347",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "-1",
            "security_group_id": "sg-0c156f71b6f7b000c",
            "self": false,
            "source_security_group_id": null,
            "to_port": 0,
            "type": "egress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.cluster",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "cluster_https_worker_ingress",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": "Allow pods to communicate with the EKS cluster API.",
            "from_port": 443,
            "id": "sgrule-4169649735",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0c156f71b6f7b000c",
            "self": false,
            "source_security_group_id": "sg-068e58fa196cf0ab0",
            "to_port": 443,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "workers_egress_internet",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": "Allow nodes all egress to the Internet.",
            "from_port": 0,
            "id": "sgrule-2340542065",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "-1",
            "security_group_id": "sg-068e58fa196cf0ab0",
            "self": false,
            "source_security_group_id": null,
            "to_port": 0,
            "type": "egress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 0,
          "deposed": "7b396b2a",
          "schema_version": 2,
          "attributes": null,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "workers_ingress_cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": "Allow workers pods to receive communication from the cluster control plane.",
            "from_port": 1025,
            "id": "sgrule-826851470",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-068e58fa196cf0ab0",
            "self": false,
            "source_security_group_id": "sg-0c156f71b6f7b000c",
            "to_port": 65535,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 0,
          "deposed": "5fbfe316",
          "schema_version": 2,
          "attributes": null,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "workers_ingress_cluster_https",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": "Allow pods running extension API servers on port 443 to receive communication from cluster control plane.",
            "from_port": 443,
            "id": "sgrule-3147382580",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-068e58fa196cf0ab0",
            "self": false,
            "source_security_group_id": "sg-0c156f71b6f7b000c",
            "to_port": 443,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 0,
          "deposed": "3d72864b",
          "schema_version": 2,
          "attributes": null,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "workers_ingress_self",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": "Allow node to communicate with each other.",
            "from_port": 0,
            "id": "sgrule-345176241",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "-1",
            "security_group_id": "sg-068e58fa196cf0ab0",
            "self": false,
            "source_security_group_id": "sg-068e58fa196cf0ab0",
            "to_port": 65535,
            "type": "ingress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        },
        {
          "index_key": 0,
          "deposed": "121636e9",
          "schema_version": 2,
          "attributes": null,
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.eks.module.eks.aws_security_group.workers",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "kubernetes_config_map",
      "name": "aws_auth",
      "provider": "module.eks.provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "mapAccounts": "[]\n",
              "mapRoles": "- \"groups\":\n  - \"system:bootstrappers\"\n  - \"system:nodes\"\n  \"rolearn\": \"arn:aws:iam::599908802495:role/hello_world20210326231659112400000007\"\n  \"username\": \"system:node:{{EC2PrivateDNSName}}\"\n",
              "mapUsers": "[]\n"
            },
            "id": "kube-system/aws-auth",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "aws-auth",
                "namespace": "kube-system",
                "resource_version": "1214",
                "self_link": "/api/v1/namespaces/kube-system/configmaps/aws-auth",
                "uid": "f08ed0a4-a091-44a3-a88a-443796609a53"
              }
            ]
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_instance_profile.workers",
            "module.eks.module.eks.aws_iam_instance_profile.workers_launch_template",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_ami.eks_worker",
            "module.eks.module.eks.data.aws_caller_identity.current",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_launch_template_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "local_file",
      "name": "kubeconfig",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "content": "apiVersion: v1\npreferences: {}\nkind: Config\n\nclusters:\n- cluster:\n    server: https://3087F903F299280F65199C21FB7A1CD5.gr7.us-east-1.eks.amazonaws.com\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1ETXlOakl6TVRFME5Gb1hEVE14TURNeU5ESXpNVEUwTkZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUFZqCnE4RWJTVU1RRVZoRno5dCs3QzdBTkFNczhEanJJalMvNm1hUCtkOHpDWUkrZ2tORFZTbENVS0tKVm5jTnJMNHkKNkQ4QVZ5TWxsV2xZV21Qa0NBeUtvUTg2VTJiZC9VR3BldHRlVmJscU1ZdmpEK3FKVW9kN2lwaFdNUmg0SWN6TQpsUGtIS3RFWHRQUnlvbERUUmtBeCtGSERhY0VLcnZXWWNUdGtRa2ZPUDJrY25VU0d3amVuRURNRTgwZzkxbFpZCk5ZaVl6ZERCSEhld01iaWRWaXkyUWhvR2UzSnBEajlhUld5c1BGb1ZHNjNOWjUyamVTYVFiTWFHeDVpclNlRXcKa3VYVXdBa3l4NlR4TFQ3alIrRUxHTll3cmRsTy9Oa1BPbVFuUkpzQ0NnWDFDdHdRRUR1cDhBSTl4ZWI2TWVKSQoyNWROWVhkQ0tibEgxcFY1M2VNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDL1YvaG9uaEhRU1dvVVUxR0xoUUIwU3JvOGcKNmtqeUh5ZlBkSjVvWFA3QWdIYjhnZ0hYVHo3N0RKVGc4bk5NYm5HRnI1NFZLOWJXcHVYSHk3NDM2eGVOYll2VgpWcGxPZEZLTXRHTFYzNHprbGprTXh4Ym4yRDFlU1NZQUp4M0RnUmRHeXlVd0pqRGQxRTlUV2JTalZKVVFWS0N2Ck94OTdmNEsrSDJVUGd0djd5MzgydjBqeVlNMzRIQ1BQNW9qM3IrTzE0Nm5GUTFsVUJpeXRZMHdLYjBuUGg1djkKb2kzWmIzZHgvbXR0TlcxVFQ1OC94WnY0Z1ZHN1d3cmdXaUhWQVlQVFBsdVM0NVE4ZGoyd3pRdHF0dVlOdzFXVAp5cTNjaFVRY0t2VVB3TlBCNzUvVjlkSUM1WFNweVFhOHgybnFKdEltUEI4clhFenJyRGhhT2dSakozMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\n  name: eks_hello_world\n\ncontexts:\n- context:\n    cluster: eks_hello_world\n    user: eks_hello_world\n  name: eks_hello_world\n\ncurrent-context: eks_hello_world\n\nusers:\n- name: eks_hello_world\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1alpha1\n      command: aws-iam-authenticator\n      args:\n        - \"token\"\n        - \"-i\"\n        - \"hello_world\"\n      env:\n        - name: AWS_PROFILE\n          value: helloworld\n\n",
            "content_base64": null,
            "directory_permission": "0755",
            "file_permission": "0644",
            "filename": "/home/drew/Documents/Hello_World/hw-enviornments/terraform/hello_world.kubeconfig",
            "id": "954071327de551095c8e791398de8063ffe90343",
            "sensitive_content": null,
            "source": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ]
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "null_resource",
      "name": "wait_for_cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "4596584688759343019",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.eks.module.eks",
      "mode": "managed",
      "type": "random_pet",
      "name": "workers",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "organic-koi",
            "keepers": {
              "lc_name": "hello_world-hw_demo2021032623193960700000000f"
            },
            "length": 2,
            "prefix": null,
            "separator": "-"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.eks.data.aws_ami.eks_gpu_worker",
            "module.eks.data.aws_ami.eks_worker",
            "module.eks.data.aws_eks_cluster.cluster",
            "module.eks.data.aws_eks_cluster_auth.cluster",
            "module.eks.data.kubectl_path_documents.aws_cni_resources",
            "module.eks.data.kubectl_path_documents.calico_resources",
            "module.eks.data.kubectl_path_documents.genie_resources",
            "module.eks.kubectl_manifest.aws_cni_resources",
            "module.eks.kubectl_manifest.calico_resources",
            "module.eks.kubectl_manifest.genie_resources",
            "module.eks.module.eks.aws_cloudwatch_log_group.this",
            "module.eks.module.eks.aws_eks_cluster.this",
            "module.eks.module.eks.aws_iam_instance_profile.workers",
            "module.eks.module.eks.aws_iam_role.cluster",
            "module.eks.module.eks.aws_iam_role.workers",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy",
            "module.eks.module.eks.aws_iam_role_policy_attachment.workers_additional_policies",
            "module.eks.module.eks.aws_launch_configuration.workers",
            "module.eks.module.eks.aws_security_group.cluster",
            "module.eks.module.eks.aws_security_group.workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress",
            "module.eks.module.eks.aws_security_group_rule.cluster_primary_ingress_workers",
            "module.eks.module.eks.aws_security_group_rule.cluster_private_access",
            "module.eks.module.eks.aws_security_group_rule.workers_egress_internet",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_https",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_kubelet",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_primary",
            "module.eks.module.eks.aws_security_group_rule.workers_ingress_self",
            "module.eks.module.eks.data.aws_ami.eks_worker",
            "module.eks.module.eks.data.aws_ami.eks_worker_windows",
            "module.eks.module.eks.data.aws_iam_instance_profile.custom_worker_group_iam_instance_profile",
            "module.eks.module.eks.data.aws_iam_policy_document.cluster_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_policy_document.workers_assume_role_policy",
            "module.eks.module.eks.data.aws_iam_role.custom_cluster_iam_role",
            "module.eks.module.eks.data.aws_partition.current",
            "module.eks.module.eks.data.template_file.userdata",
            "module.eks.module.eks.null_resource.wait_for_cluster",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this"
          ],
          "create_before_destroy": true
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_db_subnet_group",
      "name": "database",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:rds:us-east-1:599908802495:subgrp:hello_world_demo",
            "description": "Database subnet group for hello_world_demo",
            "id": "hello_world_demo",
            "name": "hello_world_demo",
            "name_prefix": null,
            "subnet_ids": [
              "subnet-04c803c864a61da86",
              "subnet-0dd10ed31ace64f6f"
            ],
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo",
              "Terraform": "true"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_subnet.database",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_eip",
      "name": "nat",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allocation_id": null,
            "associate_with_private_ip": null,
            "association_id": "eipassoc-002fa4b66bca8dfb2",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-01694bdc8460dafec",
            "instance": "",
            "network_border_group": "us-east-1",
            "network_interface": "eni-006639a6ee9f1e723",
            "private_dns": "ip-10-11-20-62.ec2.internal",
            "private_ip": "10.11.20.62",
            "public_dns": "ec2-54-174-179-170.compute-1.amazonaws.com",
            "public_ip": "54.174.179.170",
            "public_ipv4_pool": "amazon",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-us-east-1a",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc": true
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:internet-gateway/igw-0c1ad164a73c06da3",
            "id": "igw-0c1ad164a73c06da3",
            "owner_id": "599908802495",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo",
              "Terraform": "true"
            },
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-01694bdc8460dafec",
            "id": "nat-052f1db47a534618e",
            "network_interface_id": "eni-006639a6ee9f1e723",
            "private_ip": "10.11.20.62",
            "public_ip": "54.174.179.170",
            "subnet_id": "subnet-04bf16d6fc39bea58",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-us-east-1a",
              "Terraform": "true"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_eip.nat",
            "module.vpc.aws_internet_gateway.this",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "private_nat_gateway",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "",
            "id": "r-rtb-08f8f462f0c86ae5d1080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "nat-052f1db47a534618e",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-08f8f462f0c86ae5d",
            "state": "active",
            "timeouts": {
              "create": "5m",
              "delete": null
            },
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.vpc.aws_eip.nat",
            "module.vpc.aws_internet_gateway.this",
            "module.vpc.aws_nat_gateway.this",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "public_internet_gateway",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "destination_cidr_block": "0.0.0.0/0",
            "destination_ipv6_cidr_block": "",
            "destination_prefix_list_id": "",
            "egress_only_gateway_id": "",
            "gateway_id": "igw-0c1ad164a73c06da3",
            "id": "r-rtb-045c9b4550d05f71d1080289494",
            "instance_id": "",
            "instance_owner_id": "",
            "local_gateway_id": "",
            "nat_gateway_id": "",
            "network_interface_id": "",
            "origin": "CreateRoute",
            "route_table_id": "rtb-045c9b4550d05f71d",
            "state": "active",
            "timeouts": {
              "create": "5m",
              "delete": null
            },
            "transit_gateway_id": "",
            "vpc_endpoint_id": "",
            "vpc_peering_connection_id": ""
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.vpc.aws_internet_gateway.this",
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "rtb-08f8f462f0c86ae5d",
            "owner_id": "599908802495",
            "propagating_vgws": [],
            "route": [
              {
                "cidr_block": "0.0.0.0/0",
                "egress_only_gateway_id": "",
                "gateway_id": "",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "nat-052f1db47a534618e",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-private",
              "Terraform": "true"
            },
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "rtb-045c9b4550d05f71d",
            "owner_id": "599908802495",
            "propagating_vgws": [],
            "route": [
              {
                "cidr_block": "0.0.0.0/0",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-0c1ad164a73c06da3",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-public",
              "Terraform": "true"
            },
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "database",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-03d9641ca80e9db23",
            "route_table_id": "rtb-08f8f462f0c86ae5d",
            "subnet_id": "subnet-0dd10ed31ace64f6f"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.database",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.database",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-003bcf9c9ec2caf84",
            "route_table_id": "rtb-08f8f462f0c86ae5d",
            "subnet_id": "subnet-04c803c864a61da86"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.database",
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.database",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-0c53a26c7bbbf174e",
            "route_table_id": "rtb-08f8f462f0c86ae5d",
            "subnet_id": "subnet-096ff4de659530b74"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-0a139ca583591dac0",
            "route_table_id": "rtb-08f8f462f0c86ae5d",
            "subnet_id": "subnet-05fe4f98639ff4274"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.private",
            "module.vpc.aws_subnet.private",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-00953f8d1193852ff",
            "route_table_id": "rtb-045c9b4550d05f71d",
            "subnet_id": "subnet-04bf16d6fc39bea58"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "gateway_id": null,
            "id": "rtbassoc-06a811eedb97e3646",
            "route_table_id": "rtb-045c9b4550d05f71d",
            "subnet_id": "subnet-09b63ddc9dd314aa6"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.aws_route_table.public",
            "module.vpc.aws_subnet.public",
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "database",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-0dd10ed31ace64f6f",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.11.30.0/24",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-0dd10ed31ace64f6f",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "599908802495",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-db-us-east-1a",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "dev",
              "Name": "hello_world_demo-db-us-east-1a",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-04c803c864a61da86",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.11.31.0/24",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-04c803c864a61da86",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "599908802495",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-db-us-east-1b",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "dev",
              "Name": "hello_world_demo-db-us-east-1b",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-096ff4de659530b74",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.11.10.0/24",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-096ff4de659530b74",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "599908802495",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-private-us-east-1a",
              "Terraform": "true",
              "kubernetes.io/cluster/main": "shared"
            },
            "tags_all": {
              "Environment": "dev",
              "Name": "hello_world_demo-private-us-east-1a",
              "Terraform": "true",
              "kubernetes.io/cluster/main": "shared"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-05fe4f98639ff4274",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.11.11.0/24",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-05fe4f98639ff4274",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "599908802495",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-private-us-east-1b",
              "Terraform": "true",
              "kubernetes.io/cluster/main": "shared"
            },
            "tags_all": {
              "Environment": "dev",
              "Name": "hello_world_demo-private-us-east-1b",
              "Terraform": "true",
              "kubernetes.io/cluster/main": "shared"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-04bf16d6fc39bea58",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.11.20.0/24",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-04bf16d6fc39bea58",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "599908802495",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-public-us-east-1a",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "dev",
              "Name": "hello_world_demo-public-us-east-1a",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:subnet/subnet-09b63ddc9dd314aa6",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.11.21.0/24",
            "customer_owned_ipv4_pool": "",
            "id": "subnet-09b63ddc9dd314aa6",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "599908802495",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo-public-us-east-1b",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "dev",
              "Name": "hello_world_demo-public-us-east-1b",
              "Terraform": "true"
            },
            "timeouts": null,
            "vpc_id": "vpc-0a99b62d225d4f4c8"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.vpc.aws_vpc.this",
            "module.vpc.aws_vpc_ipv4_cidr_block_association.this"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc",
      "name": "this",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:599908802495:vpc/vpc-0a99b62d225d4f4c8",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.11.0.0/16",
            "default_network_acl_id": "acl-00979c1dffcff55b2",
            "default_route_table_id": "rtb-0af60081bc56ec7fe",
            "default_security_group_id": "sg-0bc8b858e5bdc139e",
            "dhcp_options_id": "dopt-ce0b58b4",
            "enable_classiclink": false,
            "enable_classiclink_dns_support": false,
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "id": "vpc-0a99b62d225d4f4c8",
            "instance_tenancy": "default",
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "main_route_table_id": "rtb-0af60081bc56ec7fe",
            "owner_id": "599908802495",
            "tags": {
              "Environment": "dev",
              "Name": "hello_world_demo",
              "Terraform": "true"
            },
            "tags_all": {
              "Environment": "dev",
              "Name": "hello_world_demo",
              "Terraform": "true"
            }
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ]
}
