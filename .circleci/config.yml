version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
executors:
  default-executor:
    docker:
      - image: circleci/buildpack-deps:stretch
commands: 
  deploy:
      description: "Deploy job"
      parameters:
        cluster:
          type: string
        namespace:
          type: string
      steps:
        - run:
            name: Install kubectl
            command: |
              wget https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl
              chmod +x  /usr/local/bin/kubectl
              wget https://amazon-eks.s3-us-west-2.amazonaws.com/1.11.5/2018-12-06/bin/linux/amd64/aws-iam-authenticator -O /usr/local/bin/aws-iam-authenticator
              chmod +x /usr/local/bin/aws-iam-authenticator
        - run:
            name: Auth kubectl with cluster
            command: |
              aws eks --region us-east-1 update-kubeconfig --name << parameters.cluster >> --alias << parameters.cluster >>
              echo "<< parameters.cluster >> deployments"
              kubectl -n << parameters.namespace >> get deployments --context << parameters.cluster >> 
        - run:
            name: Trigger deployments
            command: |
              IMAGE="599908802495.dkr.ecr.us-east-1.amazonaws.com/hello-world-demo-repo:${CIRCLE_SHA1}"
              HW_FRONT='{"spec":{"template":{"spec":{"containers":[{"name":"platform","image":"'$IMAGE'"}]}}}}'
              echo $HW_FRONT
              kubectl -n << parameters.namespace >> patch deployment platform -p ''$HW_FRONT'' 
              kubectl -n << parameters.namespace >> rollout status -w deployment platform
              
              IMAGE="599908802495.dkr.ecr.us-east-1.amazonaws.com/hello-world-demo-backend:${CIRCLE_SHA1}"
              HW_BACK='{"spec":{"template":{"spec":{"containers":[{"name":"platform","image":"'$IMAGE'"}]}}}}'
              echo $HW_BACK
              kubectl -n << parameters.namespace >> patch deployment platform -p ''$HW_BACK'' 
              kubectl -n << parameters.namespace >> rollout status -w deployment platform
jobs: 
  build-and-push:
    executor: default-executor
    steps: 
      - checkout
      - setup_remote_docker:
          version: 19.03.14
      - aws-ecr/ecr-login:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          region: AWS_REGION_ENV_VAR_NAME
      - run:
          name: Set Tag
          command: |
              if [ "${CIRCLE_BRANCH}" = "master" ]; then
                TAG="latest"
              else
                # Replace '/' with -
                TAG=$(echo $CIRCLE_BRANCH | sed -e 's/\//-/g')
              fi
              mkdir -p workspace
              echo "export CI_DOCKER_TAG=\"$TAG\"" >> $BASH_ENV
      - run: 
          name: build image
          command: | 
            cd ./base-project/frontend
            docker build -t ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}:${CIRCLE_SHA1} .
      - run: 
          name: build image
          command: | 
            cd ./base-project/backend
            docker build -f backend.dockerfile -t ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_BACKEND}:${CIRCLE_SHA1} .
      - run: 
          name: build image
          command: | 
            cd ./base-project/backend
            docker build -f celeryworker.dockerfile -t ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_CELERY}:${CIRCLE_SHA1} .
      - run: 
          name: push images
          command: | 
            docker push ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}:${CIRCLE_SHA1}
            docker tag ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}:${CIRCLE_SHA1} ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}:latest
            docker push ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME}:latest
            docker push ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_BACKEND}:${CIRCLE_SHA1}
            docker tag ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_BACKEND}:${CIRCLE_SHA1} ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_BACKEND}:latest
            docker push ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_BACKEND}:latest
            docker push ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_CELERY}:${CIRCLE_SHA1}
            docker tag ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_CELERY}:${CIRCLE_SHA1} ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_CELERY}:latest
            docker push ${AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME_CELERY}:latest
  deploy-prod:
    executor: default-executor
    steps:
      - deploy:
          environment: prod
workflows:
  build-and-push: 
    jobs:
      - build-and-push
          
